用户态线性地址-物理地址转换

这个用来打开物理内存
;/////////////////////////////////////////////////////////////////////


.386
.Model Flat,StdCall
Option CaseMap :None

Include \MASMPlus\Include\w2k\ntstatus.inc
Include \MASMPlus\Include\w2k\ntddk.inc
Include \MASMPlus\Include\w2k\ntdll.inc
Include \MASMPlus\macros\Strings.mac
IncludeLib \MASMPlus\Lib\w2k\ntdll.lib


Include        accctrl.inc
Include        advapi32.inc
IncludeLib advapi32.lib
Include        kernel32.inc
IncludeLib kernel32.lib
Include        user32.inc
IncludeLib user32.lib

.Const
CCOUNTED_UNICODE_STRING        "\\Device\\PhysicalMemory",g_usPhysicalMemory,4

.Code
SetCanBeWritten                Proc        hSection
                        Local        pDacl,pNewDacl,pSD,dwRet
                        Local        ea:EXPLICIT_ACCESS
                        
                        invoke        GetSecurityInfo,hSection,SE_KERNEL_OBJECT,DACL_SECURITY_INFORMATION,NULL,NULL,addr pDacl,NULL,addr pSD
                        .if        eax == 0 ;ERROR_SUCCESS
                                invoke        RtlZeroMemory,addr ea,sizeof EXPLICIT_ACCESS
                                mov        ea.grfAccessPermissions,SECTION_MAP_WRITE
                                mov        ea.grfAccessMode,GRANT_ACCESS
                                mov        ea.grfInheritance,NO_INHERITANCE
                                mov        ea.Trustee.TrusteeForm,TRUSTEE_IS_NAME
                                mov        ea.Trustee.TrusteeType,TRUSTEE_IS_USER
                                mov        ea.Trustee.ptstrName,$CTA0("CURRENT_USER")
                                
                                invoke        SetEntriesInAcl,1,addr ea,pDacl,addr pNewDacl
                                .if        eax == 0
                                        invoke        SetSecurityInfo,hSection,SE_KERNEL_OBJECT,DACL_SECURITY_INFORMATION,NULL,NULL,pNewDacl,NULL
                                .endif
                                
                        .endif
                        
                        invoke        LocalFree,pSD
                        invoke        LocalFree,pNewDacl
                        mov        eax,dwRet
                        ret
SetCanBeWritten                EndP

OpenPhysicalMemory        Proc
                        Local        status:NTSTATUS
                        Local        hPhysMem:HANDLE
                        Local        oa:OBJECT_ATTRIBUTES
                        
                        and        hPhysMem,NULL
                        lea        ecx,oa
                        InitializeObjectAttributes ecx,offset g_usPhysicalMemory,0,NULL,NULL
                        invoke        ZwOpenSection,addr hPhysMem,SECTION_MAP_READ or SECTION_MAP_WRITE,addr oa
                        .if        eax == STATUS_ACCESS_DENIED
                                invoke        ZwOpenSection,addr hPhysMem,READ_CONTROL or WRITE_DAC,addr oa
                                invoke        SetCanBeWritten,hPhysMem
                                invoke        ZwClose,hPhysMem
                                invoke        ZwOpenSection,addr hPhysMem,SECTION_MAP_READ or SECTION_MAP_WRITE,addr oa
                        .endif
                        mov        eax,hPhysMem
                        ret
OpenPhysicalMemory        EndP
End



下面是主程序。
;/////////////////////////////////////////////////////////////////////


.386
.Model Flat,StdCall
Option CaseMap :None

Include Windows.inc
Include User32.inc
Include Kernel32.inc

IncludeLib User32.lib
IncludeLib Kernel32.lib

Include \MASMPlus\macros\Strings.mac


OpenPhysicalMemory        Proto


.Data?
hPhysMem        dd ?

buf                db 256 dup(?)


.Code
LinearToPhys        Proc        uses esi edi _hPhysMem,_VirtAddr
                Local        PDE,PTE,dwRet
                
                mov        dwRet,0
                invoke        MapViewOfFile,_hPhysMem,FILE_MAP_READ,0,39000h,1000h
                mov        esi,eax
                
                mov        eax,_VirtAddr
                shr        eax,22
                shl        eax,2
                add        eax,esi
                mov        eax,[eax]
                mov        PDE,eax         ;我感觉这里获得的PDE 有问题
                
                invoke        UnmapViewOfFile,esi
                
                .if        PDE & 1
                        .if        !PDE & 80h
                                and        PDE,0FFFFF000h
                                invoke        MapViewOfFile,_hPhysMem,FILE_MAP_READ,0,PDE,1000h
                                mov        edi,eax
                                
                                mov        eax,_VirtAddr
                                and        eax,3FF000h
                                shr        eax,12
                                shl        eax,2
                                add        eax,edi
                                mov        eax,[eax]
                                mov        PTE,eax
                                
                                .if        PTE & 1
                                        and        PTE,0FFFFF000h
                                        mov        eax,_VirtAddr
                                        and        eax,0FFFh
                                        add        eax,PTE
                                        mov        dwRet,eax
                                .endif
                                
                                invoke        UnmapViewOfFile,edi
                        .endif
                        
                .endif
                
                mov        eax,dwRet
                ret
LinearToPhys        EndP


Start:
        invoke        OpenPhysicalMemory
        mov        hPhysMem,eax
        
        invoke        GetModuleHandle,CTEXT("kernel32.dll")   ;7C800000h
        invoke        LinearToPhys,hPhysMem,eax
        
        invoke        wsprintf,addr buf,CTEXT("%p"),eax
        invoke        MessageBox,0,addr buf,0,0
        
        invoke        ExitProcess,0
End        Start

 
-----------------------------------------------------------------------------------------------------
 
