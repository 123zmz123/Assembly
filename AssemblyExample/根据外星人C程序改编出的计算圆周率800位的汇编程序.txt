 根据外星人C程序改编出的计算圆周率800位的汇编程序  某天，见到下面一段C程序，4行代码计算出圆周率800位，号称是外星人写的程序：

int a=10000,b,c=2800,d,e,f[2801],g; 
main(){for(;b-c;)f[b++]=a/5; 
for(;d=0,g=c*2;c-=14,printf("%.4d",e+d/a),e=d%a) 
for(b=c;d+=f[b]*a,f[b]=d%--g,d/=g--,--b;d*=b);} 

    近日，根据反汇编结果，并根据CPU寄存器的特点，用汇编语言改编了这段程序，也可以计算出圆周率800位：

  .586
  .model flat, stdcall
  option casemap :none
include    MACRO.ASM
includelib  msvcrt.lib
printf  proto C :VARARG
  .data
f  dd 2801 dup(2000)  ;因为有这种定义，省略了for(;b-c;)f[b++]=a/5;
  .code  ;a--->ebx，b、g--->ecx,d--->edi,e--->ebp,e--->esi
start:  xor esi,esi      ;e=0
    mov ebp,2800    ;c=2800
    mov ebx,10000
@1:    xor edi,edi    ;d=0
    mov ecx,ebp    ;b=c
    @@:  imul edi,ecx  ;d=d*b
      mov eax,[ecx*4+f]  ;d+=f[b]*a
      mul ebx  
      add eax,edi
      lea ecx,[ecx*2-1]
      div ecx
      inc ecx
      shr ecx,1
      mov [ecx*4+f],edx  ;f[b]=d%(2b-1)
      mov edi,eax  ;d=d/(2b-1)
      loop @b        
    div ebx  
    add eax,esi    ;e+d/a
    mov esi,edx    ;e=d%a
    invoke printf,CTXT("%.4d"),eax
    sub ebp,14    ;c-=14
    jnz @1    
    ret      ;控制台程序，最后用这个即可
    end start
编译所用的命令    
;ml /c /coff /nologo pi.asm
;Link /subsystem:console /nologo pi.obj
要自己找一下msvcrt.lib和msvcrt.dll，否则无法使用printf。

.586
  .model flat, stdcall
  option casemap :none
include    MACRO.ASM
includelib  msvcrt.lib
printf  proto C :VARARG
  .data
f  dd 2801 dup(2000)  ;因为有这种定义，省略了for(;b-c;)f[b++]=a/5;
  .code  ;a--->ebx，b、g--->ecx,d--->edi,e--->ebp,e--->esi
start:  xor esi,esi      ;e=0
    mov ebp,2800    ;c=2800
    mov ebx,10000
@1:    xor edi,edi    ;d=0
    mov ecx,ebp    ;b=c
    @@:  imul edi,ecx  ;d=d*b
      mov eax,[ecx*4+f]  ;d+=f[b]*a
      mul ebx  
      add eax,edi
      lea edi,[ecx*2-1]
      div edi
      mov [ecx*4+f],edx  ;f[b]=d%(2b-1)
      mov edi,eax  ;d=d/(2b-1)
      loop @b        
    div ebx  
    add eax,esi    ;e+d/a
    mov esi,edx    ;e=d%a
    invoke printf,CTXT("%.4d"),eax
    sub ebp,14    ;c-=14
    jnz @1    
    ret      ;控制台程序，最后用这个即可
    end start

据人分析，这个软件所使用的公式为：
          1          2          3                      k
pi = 2 + --- * (2 + --- * (2 + --- * (2 + ...   (2 + ---- * (2 + ... ))...)))
          3          5          7                    2k+1

