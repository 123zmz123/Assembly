;使用以下方式进行编译和连接
;ml /c /coff imd5.asm
;link /subsystem:windows imd5.obj imd5.res
;用法：资源管理器里Ctrl+A   再往窗口里拖就行了
;by HHH2000     原产地 ―― http://www.aogosoft.com/bbs/ ――

	.486
	.model	flat,stdcall
	option	casemap:none
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; Include 文件定义
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
include		windows.inc
include		kernel32.inc
include		user32.inc
include		gdi32.inc
include		shell32.inc
include		Winmm.inc
include		Comctl32.inc

includelib	kernel32.lib
includelib	user32.lib
includelib	gdi32.lib
includelib	shell32.lib
includelib	Comctl32.lib
includelib	Winmm.lib
include		CTXT.asm
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;以下是数据段的定义
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DLG_MAIN			equ	1000
ICO_MAIN			equ	101
IDC_EDIT			equ	1005
IDC_PROGRESS	equ	1003
IDC_BUTTON		equ	1001
IDC_LABEL		equ	1006
IDC_CHECKBOX	equ	1008
IDC_WINEDIT		equ	1010

		.data?
;------------------------------------------------------
;_iMD5用全局变量
;------------------------------------------------------
Am						dd	?
Bm						dd	?
Cm						dd	?
Dm						dd	?
temp					dd	?
espSave				dd ?
szFilebuffer		db	65536 dup (?)
LENmod64k			dd	?
NumOBRead			dd ?
szBuffer				db 64 dup (?)
rem64					dd	?
szMD5Value			db	64 dup (?)
dwReadnumber		dd ?
;------------------------------------------------------
hInstance			dd	?
hWinMain				dd	?
hProgress			dd ?
hLabel				dd ?
hWinEdit				dd ?
hCheckBox			dd ?
hEdit					dd ?
hButton				dd ?
hmyMutex				dd	?
hFile					dd	?
hThread				dd	?
lpExitCode			dd	?
AogoBrush			dd ?
FLag					dd ?
hDrag					dd ?
ButtonCheck			dd ?
lpCS					CRITICAL_SECTION <?>
hRichEdit			dd ?

xxx					dd ?
xxxx					dd ?
xx						dd ?
szTemp				db	256 dup (?)

MD5		struct
	m00	dd	?
	m01	dd	?
	m02	dd	?
	m03	dd	?
	m04	dd	?
	m05	dd	?
	m06	dd	?
	m07	dd	?
	m08	dd	?
	m09	dd	?
	m10	dd	?
	m11	dd	?
	m12	dd	?
	m13	dd	?
	m14	dd	?
	m15	dd	?
MD5		ends

Time struct
	dwTimer		dd ?
	dwSecond		dd ?
	dwTenthSec	dd ?
Time ends
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;以下是一些常量的定义
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		.const
MutexName			db	'HHH2000MD5',0
MsgCaption			db	'消息',0
MsgText				db	'一个实例运行中',0
Verdana				db	'Verdana',0
iFilePath			db '\MD5.txt',0
szErrCreateFile	db '无法打开文件',0
szErrGlobalAlloc	db '内存分配错误',0
mynull				db	0
FORMAT				db	'%08X%08X%08X%08X',0
_Aogo					dd	0ebebebh		; 嘻嘻
odoa					db 0dh,0ah,0
odoa2					db 0dh,0ah,0dh,0ah,0
szDllEdit			db	'riched20.dll',0
szClassEdit			db	'RichEdit20A',0
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	.code
;------------------------------------------------------
;f(x,y,z) =(x&y)|((~x)&z)
;------------------------------------------------------
_f	MACRO	x,y,z,m,n
	mov m,x
	mov n,y
	and n,x
	not m
	and m,z
	or  m,n
endm
;------------------------------------------------------
;g(x,y,z) =(x&z)|(y&(~z))
;------------------------------------------------------
_g	MACRO	x,y,z,m,n
	mov m,z
	mov n,y
	not m
	and n,m
	mov m,x
	and m,z
	or  m,n
endm
;------------------------------------------------------
;h(x,y,z) =x^y^z
;------------------------------------------------------
_h	MACRO	x,y,z,m,n
	mov m,x
	xor m,y
	xor m,z
endm
;------------------------------------------------------
;i(x,y,z)=y^(x|(~z))
;------------------------------------------------------
_i	MACRO	x,y,z,m,n
	mov m,x
	mov n,z
	not n
	or  m,n
	xor m,y
endm
;------------------------------------------------------
;_a = _b + ((_a + _fghi(_b,_c,_d) + _mj + _ti) <<< _s)
;------------------------------------------------------
_FGHI macro	_a,_b,_c,_d,_mj,_ti,_s,_fghi,_m,_n
	_fghi _b,_c,_d,_m,_n				;_fghi宏的结果放到_m中
	lea _a,[_a+_m+_ti]
	add _a,_mj
	rol _a,_s
	add _a,_b
endm
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;颠倒位置(386使用，486以后可以使用指令 bswap)
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_ChgString proc _lpXm
	mov ecx,_lpXm
	mov eax,[ecx]
	mov ebx,eax
	ror eax,8
	rol ebx,8
	and eax,0FF00FF00h
	and ebx,0FF00FFh
	or  eax,ebx
	mov [ecx],eax
	ret
_ChgString endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;颠倒位置2 (上面的快点)
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_ChgString2 proc _lpXm
	mov esi,_lpXm
	mov edx,3
	mov ecx,2
	mov eax,0
_F:
	mov bl,[esi+eax]
	xchg bl,[esi+edx]
	mov [esi+eax],bl
	inc al
	dec dl
loop	_F
	ret
_ChgString2 endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;处理文件尾部，以达到MD5算法的要求
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_SetFileEnd proc	_lpBuffer,_readnumberS
	local	@NumOBRead:DWORD
	invoke RtlZeroMemory,_lpBuffer,64
	mov eax,_readnumberS					;_readnumberS为文件长度
	mov ebx,eax
	shr eax,16
	mov LENmod64k,eax
	shl eax,16
	sub ebx,eax																					;(分配颗粒64k)
	invoke SetFilePointer,hFile,eax,0,FILE_BEGIN										;移动文件指针
	invoke ReadFile,hFile,addr szFilebuffer,65536,addr @NumOBRead,NULL		;读文件
	mov eax,@NumOBRead
	mov ebx,eax
	shr eax,6
	shl eax,6
	sub ebx,eax
	mov rem64,ebx
	lea esi,szFilebuffer
	add esi,eax
	mov edi,_lpBuffer
	mov ecx,ebx
	rep movsb
		mov DWORD ptr[edi],eax
	.if ebx==56										;处理文件尾部，以达到MD5算法的要求
		mov eax,_readnumberS
		mov edx,eax
		shr edx,29
		shl eax,3
		mov DWORD ptr[edi],eax
		mov DWORD ptr[edi+4],edx
	.elseif ebx<56
		mov BYTE ptr[edi],80h
		inc ebx
		inc edi
		.while ebx<56
			mov BYTE ptr[edi],0
			inc ebx
			inc edi
		.endw
		mov eax,_readnumberS
		mov edx,eax
		shr edx,29
		shl eax,3
		mov DWORD ptr[edi],eax
		mov DWORD ptr[edi+4],edx
	.elseif ebx>56
		mov BYTE ptr[edi],80h
		inc ebx
		inc edi
		.while ebx<64
			mov BYTE ptr[edi],0
			inc ebx
			inc edi
		.endw
	.endif
	invoke SetFilePointer,hFile,0,0,FILE_BEGIN
	ret
_SetFileEnd endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;主函数   速度需要使用ebp,esp，所以不使用参数和局部变量
;A = 01234567h		B = 89abcdefh		C = fedcba98h		D = 76543210h
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_iMD5 proc
	pushad
	assume edi:ptr MD5
	invoke _SetFileEnd,addr szBuffer,dwReadnumber
	mov temp,0
	inc LENmod64k
	mov Am,67452301h
	mov Bm,0efcdab89h
	mov Cm,98badcfeh
	mov Dm,10325476h
	xor esi,esi
	
	.while esi<LENmod64k
		cmp FLag,0
		jnz BreakOff
		invoke PostMessage,hProgress,PBM_DELTAPOS,1,0	;进度条(以64K为单位)
		push esi
		xor esi,esi
		lea edi,szFilebuffer
		invoke ReadFile,hFile,addr szFilebuffer,65536,addr NumOBRead,NULL		;读文件
		shr NumOBRead,6
		.while esi<NumOBRead		;主循环
	@@:
			mov espSave,esp
			
			mov eax,Am
			mov ebx,Bm
			mov ecx,Cm
			mov edx,Dm
	;------------------------------------------------------
			_FGHI	eax,ebx,ecx,edx,[edi].m00,0d76aa478h,07,_f,ebp,esp								;_FGHI宏
			_FGHI	edx,eax,ebx,ecx,[edi].m01,0e8c7b756h,12,_f,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m02,0242070dbh,17,_f,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m03,0c1bdceeeh,22,_f,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m04,0f57c0fafh,07,_f,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m05,04787c62ah,12,_f,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m06,0a8304613h,17,_f,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m07,0fd469501h,22,_f,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m08,0698098d8h,07,_f,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m09,08b44f7afh,12,_f,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m10,0ffff5bb1h,17,_f,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m11,0895cd7beh,22,_f,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m12,06b901122h,07,_f,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m13,0fd987193h,12,_f,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m14,0a679438eh,17,_f,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m15,049b40821h,22,_f,ebp,esp
	;------------------------------------------------------
			_FGHI	eax,ebx,ecx,edx,[edi].m01,0f61e2562h,05,_g,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m06,0c040b340h,09,_g,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m11,0265e5a51h,14,_g,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m00,0e9b6c7aah,20,_g,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m05,0d62f105dh,05,_g,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m10,002441453h,09,_g,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m15,0d8a1e681h,14,_g,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m04,0e7d3fbc8h,20,_g,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m09,021e1cde6h,05,_g,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m14,0c33707d6h,09,_g,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m03,0f4d50d87h,14,_g,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m08,0455a14edh,20,_g,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m13,0a9e3e905h,05,_g,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m02,0fcefa3f8h,09,_g,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m07,0676f02d9h,14,_g,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m12,08d2a4c8ah,20,_g,ebp,esp
	;------------------------------------------------------
			_FGHI	eax,ebx,ecx,edx,[edi].m05,0fffa3942h,04,_h,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m08,08771f681h,11,_h,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m11,06d9d6122h,16,_h,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m14,0fde5380ch,23,_h,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m01,0a4beea44h,04,_h,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m04,04bdecfa9h,11,_h,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m07,0f6bb4b60h,16,_h,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m10,0bebfbc70h,23,_h,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m13,0289b7ec6h,04,_h,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m00,0eaa127fah,11,_h,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m03,0d4ef3085h,16,_h,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m06,004881d05h,23,_h,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m09,0d9d4d039h,04,_h,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m12,0e6db99e5h,11,_h,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m15,01fa27cf8h,16,_h,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m02,0c4ac5665h,23,_h,ebp,esp
	;------------------------------------------------------
			_FGHI	eax,ebx,ecx,edx,[edi].m00,0f4292244h,06,_i,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m07,0432aff97h,10,_i,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m14,0ab9423a7h,15,_i,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m05,0fc93a039h,21,_i,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m12,0655b59c3h,06,_i,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m03,08f0ccc92h,10,_i,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m10,0ffeff47dh,15,_i,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m01,085845dd1h,21,_i,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m08,06fa87e4fh,06,_i,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m15,0fe2ce6e0h,10,_i,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m06,0a3014314h,15,_i,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m13,04e0811a1h,21,_i,ebp,esp
			_FGHI	eax,ebx,ecx,edx,[edi].m04,0f7537e82h,06,_i,ebp,esp
			_FGHI	edx,eax,ebx,ecx,[edi].m11,0bd3af235h,10,_i,ebp,esp
			_FGHI	ecx,edx,eax,ebx,[edi].m02,02ad7d2bbh,15,_i,ebp,esp
			_FGHI	ebx,ecx,edx,eax,[edi].m09,0eb86d391h,21,_i,ebp,esp
	;------------------------------------------------------
			add Am,eax
			add Bm,ebx
			add Cm,ecx
			add Dm,edx
	;------------------------------------------------------
			add edi,64
			inc esi
			mov esp,espSave
		.endw
		pop esi
		inc esi
	.endw
	
	.if	temp==0
		inc temp
		lea edi,szBuffer
		mov esi,LENmod64k
		push esi
		mov esi,NumOBRead
		jmp @B
	.endif
	mov esi,56
	.if temp==1 && rem64>esi
		inc temp
		invoke RtlZeroMemory,addr szBuffer,64
		lea edi,szBuffer
		add edi,56
		mov eax,dwReadnumber
		mov edx,eax
		shr edx,29
		shl eax,3
		mov DWORD ptr[edi],eax
		mov DWORD ptr[edi+4],edx
		lea edi,szBuffer
		mov esi,LENmod64k
		push esi
		mov esi,NumOBRead
		jmp @B
	.endif
	
	mov eax,Am
	mov ebx,Bm
	mov ecx,Cm
	mov edx,Dm
	bswap eax
	bswap ebx
	bswap ecx
	bswap edx
	invoke wsprintf,addr szMD5Value,addr FORMAT,eax,ebx,ecx,edx
BreakOff:
	assume edi:nothing
	popad
	ret
_iMD5 endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;更改字体
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_SetFont proc  uses ebx  esi  edi _Hwnd,_fHeight
	local @hFont:DWORD,@logfont:LOGFONT
	invoke RtlZeroMemory,addr @logfont,sizeof LOGFONT
	mov ebx,_fHeight
	mov @logfont.lfHeight,ebx
	invoke lstrcpy,addr @logfont.lfFaceName,addr Verdana
	invoke CreateFontIndirect,addr @logfont
	.if eax
		mov @hFont,eax
		invoke SendMessage,_Hwnd,WM_SETFONT,@hFont,TRUE
	.endif
	ret
_SetFont		endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;计时
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_TimeCount	Proc uses ebx esi edi _lpstTime:DWORD
	invoke timeGetTime
	mov esi,_lpstTime
	sub eax,(Time ptr[esi]).dwTimer
	xor edx,edx
	mov ecx,100
	div ecx
	xor edx,edx
	mov ecx,10
	div ecx
	mov (Time ptr[esi]).dwSecond,eax
	mov (Time ptr[esi]).dwTenthSec,edx
	ret
_TimeCount endp
;=====================================================
; 字符串拷贝
;=====================================================
_CopyMemory proc uses ebx edi esi _lpDestination, _lpSource, _dwLength
	.if _dwLength!=0
		mov esi,_lpDestination
		mov edi,_lpSource
		mov ecx,_dwLength
		dec ecx
@@:
		mov al,[edi+ecx]
		mov [esi+ecx],al
		loopd @B
		mov al,[edi+ecx]
		mov [esi+ecx],al
	.endif
	mov eax,_lpDestination
	ret
_CopyMemory endp
;		pushad
;		inc xxx
;		invoke wsprintf,addr szTemp,ctxt("%d  %d  %d  %d"),eax,ebx,ecx,xxx
;		invoke SendDlgItemMessage,hWinMain,IDC_EDIT,WM_SETTEXT,256,addr szTemp
;		popad
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;MD5线程
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_ExecuteThread		Proc uses ebx esi edi _lParam
	local @szMD5[128]:BYTE
	local @szTemp[300]:BYTE
	local @lpMD5Data:DWORD
	local @lpFileType:DWORD
	local @rect:RECT
	local @dwAllFileSize:DWORD
	local @DragFileNumber:DWORD
	local @DragDirectoryNumber:DWORD
	local @CheckDirectoryNumber:DWORD
	local @stTime:Time
	local @szPathBuffer[MAX_PATH]:BYTE
	
	invoke SendDlgItemMessage,hWinMain,IDC_LABEL,WM_SETTEXT,256,addr mynull
	invoke SendDlgItemMessage,hWinMain,IDC_EDIT,WM_SETTEXT,256,addr mynull
	invoke SendDlgItemMessage,hWinMain,IDC_WINEDIT,WM_SETTEXT,256,addr mynull
	invoke SendDlgItemMessage,hWinMain,IDC_LABEL,WM_SETTEXT,256,ctxt("预处理……")
	invoke SendMessage,hProgress,PBM_SETPOS,0,0	;进度条(以64K为单位)
	invoke RtlZeroMemory,addr @stTime,sizeof @stTime
	invoke RtlZeroMemory,addr @szPathBuffer,sizeof @szPathBuffer
	invoke timeGetTime
	mov @stTime.dwTimer,eax
	invoke DragQueryFile,hDrag,-1,NULL,MAX_PATH
	mov @DragFileNumber,eax
	invoke GlobalAlloc,GPTR,eax
	test eax,eax
	jz @error2
	mov @lpFileType,eax
	mov esi,eax
	mov @DragDirectoryNumber,0
	mov @CheckDirectoryNumber,0
	mov @dwAllFileSize,0
	xor ebx,ebx
	.while ebx<@DragFileNumber		;得到文件总大小/64K
		cmp FLag,0
		jz @F
		mov ebx,0
		jmp @stop
@@:
		invoke DragQueryFile, hDrag, ebx, addr @szPathBuffer, MAX_PATH
		invoke CreateFile,addr @szPathBuffer,GENERIC_READ,FILE_SHARE_READ,0,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL ,0
		.if eax==INVALID_HANDLE_VALUE
			inc @DragDirectoryNumber
			inc @dwAllFileSize
			mov BYTE ptr[esi+ebx],1
			invoke GetFileAttributes,addr @szPathBuffer
			or eax,FILE_ATTRIBUTE_DIRECTORY
			jnz @F
			jmp @error
		.else
			mov hFile,eax
			invoke GetFileSize,hFile,NULL
			shr eax,16
			add @dwAllFileSize,eax
			inc @dwAllFileSize
			invoke CloseHandle,hFile
		.endif
@@:
		inc ebx
	.endw
;------------------------------------------------------
	invoke SendMessage,hProgress,PBM_SETRANGE32,0,@dwAllFileSize	;根据文件总大小设置进度条
	mov eax,MAX_PATH+60
	mul @DragFileNumber
	mov ebx,eax
	invoke GlobalAlloc,GPTR,eax
	test eax,eax
	jz @error2
	mov @lpMD5Data,eax
	mov edi,eax
	invoke RtlZeroMemory,edi,ebx
	xor ebx,ebx
;------------------------------------------------------
	.while ebx<@DragFileNumber		;循环校验MD5
		invoke DragQueryFile, hDrag, ebx, addr @szPathBuffer, MAX_PATH
		invoke SendDlgItemMessage,hWinMain,IDC_EDIT,WM_SETTEXT,256,addr @szPathBuffer
		invoke wsprintf,addr @szMD5,ctxt("%d/%d  %d.%d秒"),ebx,@DragFileNumber,@stTime.dwSecond,@stTime.dwTenthSec
		invoke SendDlgItemMessage,hWinMain,IDC_LABEL,WM_SETTEXT,256,addr @szMD5
		
		invoke CreateFile,addr @szPathBuffer,GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0
		.if eax==INVALID_HANDLE_VALUE
			invoke PostMessage,hProgress,PBM_DELTAPOS,1,0	;进度条(以64K为单位)
			inc @CheckDirectoryNumber
			mov esi,@lpFileType
			cmp BYTE ptr[ebx+esi],0
			jnz @F
			jmp @error
		.endif
		mov hFile,eax
		invoke GetFileSize,hFile,NULL
		mov dwReadnumber,eax
		call _iMD5
		invoke CloseHandle,hFile
		
		.if !FLag	;停止标志
			.if ButtonCheck==BST_CHECKED
				invoke RtlZeroMemory,addr @szTemp,sizeof @szTemp
				invoke lstrcat,addr @szTemp,addr @szPathBuffer
				invoke lstrcat,addr @szTemp,addr odoa
				invoke lstrcat,addr @szTemp,addr szMD5Value
				invoke lstrcat,addr @szTemp,addr odoa2
				invoke SendDlgItemMessage,hWinMain,IDC_WINEDIT,EM_REPLACESEL,0,addr @szTemp
			.else
				invoke lstrlen,addr @szPathBuffer
				mov esi,eax
				invoke _CopyMemory,edi,addr @szPathBuffer,esi
				add edi,esi
				mov WORD ptr[edi],0a0dh
				inc edi
				inc edi
				
				mov esi,32
				invoke _CopyMemory,edi,addr szMD5Value,esi
				add edi,esi
				mov DWORD ptr[edi],0a0d0a0dh
				add edi,4
			.endif
		.else
@stop:
			invoke SendDlgItemMessage,hWinMain,IDC_EDIT,WM_SETTEXT,256,ctxt("已停止")
			.break
		.endif
@@:
		invoke _TimeCount,addr @stTime
		inc ebx
	.endw
;------------------------------------------------------
	.if ButtonCheck!=BST_CHECKED && ((!FLag && ebx>@DragDirectoryNumber) || (FLag && ebx>0))
		mov edi,@lpMD5Data
		invoke SendDlgItemMessage,hWinMain,IDC_WINEDIT,EM_REPLACESEL,0,@lpMD5Data
		.if @DragFileNumber==1
			invoke RtlZeroMemory,addr @szTemp,sizeof @szTemp
			invoke lstrcat,addr @szTemp,addr @szPathBuffer
			invoke lstrcat,addr @szTemp,addr odoa
			invoke lstrcat,addr @szTemp,addr szMD5Value
			invoke SendDlgItemMessage,hWinMain,IDC_EDIT,WM_SETTEXT,sizeof @szTemp,addr @szTemp
		.else
			invoke GetWindowRect,hWinMain,addr @rect
			mov ecx,@rect.right
			sub ecx,@rect.left
			invoke SetWindowPos,hWinMain,HWND_TOPMOST,@rect.left,@rect.top,ecx,450,SWP_SHOWWINDOW
		.endif
	.endif
;------------------------------------------------------
	sub ebx,@CheckDirectoryNumber
	mov eax,@DragFileNumber
	sub eax,@DragDirectoryNumber
	invoke wsprintf,addr @szMD5,ctxt("验证完成 %d(%d)/%d(%d) 个文件(文件夹)  用时%d.%d秒"), \
 						      ebx,@CheckDirectoryNumber,eax,@DragDirectoryNumber,@stTime.dwSecond,@stTime.dwTenthSec
	invoke SendDlgItemMessage,hWinMain,IDC_LABEL,WM_SETTEXT,256,addr @szMD5
	jmp @exit
@error:
	invoke MessageBox,hWinMain,addr szErrCreateFile,0,MB_OK or MB_ICONEXCLAMATION
	jmp @exit
@error2:
	invoke MessageBox,hWinMain,addr szErrGlobalAlloc,0,MB_OK or MB_ICONEXCLAMATION
	jmp @exit
@exit:
	invoke EnableWindow,hCheckBox,TRUE
	invoke DragFinish,hDrag
	invoke GlobalFree,@lpMD5Data
	invoke GlobalFree,@lpFileType
	ret
_ExecuteThread		endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_iFunction proc uses ebx edi esi _lpiBTNSTATE:DWORD

	ret
_iFunction endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;主窗口过程
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_ProcDlgMain	proc	uses ebx edi esi _hWnd,_wMsg,_wParam,_lParam
	local @dwThreadID:DWORD,@hdc:HDC,@ps:PAINTSTRUCT,@rect:RECT,@hfont:HFONT,@logfont:LOGFONT
	local @Noncm:NONCLIENTMETRICS
	local @mi:MINIMIZEDMETRICS
	local	@stCf:CHARFORMAT
;------------------------------------------------------
	.if	_wMsg == WM_CLOSE
		invoke	EndDialog,hWinMain,NULL
		invoke	DestroyWindow,hWinMain
		invoke   PostQuitMessage,NULL
	.elseif	_wMsg == WM_DROPFILES
		push _wParam
		pop hDrag
		invoke EnableWindow,hCheckBox,FALSE
		invoke DragQueryFile,hDrag,-1,NULL,MAX_PATH
		mov ebx,eax
		invoke IsDlgButtonChecked,hWinMain,IDC_CHECKBOX
		.if eax!=BST_CHECKED && ebx==1
			invoke GetWindowRect,hWinMain,addr @rect
			mov ecx,@rect.right
			sub ecx,@rect.left
			invoke SetWindowPos,hWinMain,HWND_TOPMOST,@rect.left,@rect.top,ecx,237,SWP_SHOWWINDOW
		.endif
;--------------------------------------------------线程
		invoke GetExitCodeThread,hThread,addr lpExitCode
		.if lpExitCode!=STILL_ACTIVE
			invoke CloseHandle,hThread
			mov FLag,0
			invoke CreateThread,NULL,0,offset _ExecuteThread,addr _wParam,NULL,addr @dwThreadID
			.if eax
				mov hThread,eax
			.endif
		.else
			invoke DragFinish,hDrag
		.endif
;------------------------------------------------------
;设置EDIT背景色及字体颜色
;------------------------------------------------------
	.elseif _wMsg == WM_CTLCOLORSTATIC
		mov eax,_lParam
		.if eax==hEdit
			invoke HideCaret,hEdit
			invoke SetTextColor,_wParam,Blue
			invoke SetBkColor,_wParam,_Aogo
			mov eax,AogoBrush
		.elseif eax==hLabel
			invoke SetTextColor,_wParam,020320ffh
			invoke SetBkColor,_wParam,_Aogo
			mov eax,AogoBrush
		.endif
		ret
;------------------------------------------------------
;设置停止标志等
;------------------------------------------------------
	.elseif _wMsg==WM_COMMAND
		mov ecx,_wParam
		.if cx==IDC_BUTTON
			shr ecx,16
			.if ecx==BN_CLICKED
				mov FLag,1
			.endif
		.endif
		.if cx==IDC_CHECKBOX
			shr ecx,16
			.if ecx==BN_CLICKED
				invoke IsDlgButtonChecked,hWinMain,IDC_CHECKBOX
				.if eax==BST_CHECKED
					mov ButtonCheck,BST_CHECKED
					invoke GetWindowRect,hWinMain,addr @rect
					mov ecx,@rect.right
					sub ecx,@rect.left
					mov edx,@rect.bottom
					sub edx,@rect.top
					invoke SetWindowPos,hWinMain,HWND_TOPMOST,@rect.left,@rect.top,ecx,450,SWP_SHOWWINDOW
				.elseif eax==BST_UNCHECKED
					mov ButtonCheck,BST_UNCHECKED
					invoke GetWindowRect,hWinMain,addr @rect
					mov ecx,@rect.right
					sub ecx,@rect.left
					mov edx,@rect.bottom
					sub edx,@rect.top
					invoke SetWindowPos,hWinMain,HWND_TOPMOST,@rect.left,@rect.top,ecx,237,SWP_SHOWWINDOW
				.endif
				invoke SetFocus,hEdit
			.endif
		.endif
		invoke HideCaret,hEdit
	.elseif _wMsg==WM_WINDOWPOSCHANGED
		invoke SendDlgItemMessage,hWinMain,IDC_EDIT,EM_SETSEL,0,0
	.elseif _wMsg == WM_LBUTTONDOWN
		invoke SendMessage,hWinMain,WM_NCLBUTTONDOWN,HTCAPTION,0
;------------------------------------------------------
;窗口初始化
;------------------------------------------------------
	.elseif _wMsg == WM_INITDIALOG
		push _hWnd
		pop hWinMain
		invoke LoadIcon,hInstance,ICO_MAIN
		invoke SendMessage,hWinMain,WM_SETICON,ICON_SMALL,eax
		invoke CreateWindowEx,20004h,offset szClassEdit,NULL,50310804h,40,205,437,183,_hWnd,IDC_WINEDIT,hInstance,NULL
		mov hWinEdit,eax
		invoke SendMessage,hWinEdit,EM_SETTEXTMODE,TM_PLAINTEXT,0
		invoke RtlZeroMemory,addr @stCf,sizeof @stCf
		mov @stCf.cbSize,sizeof @stCf
		mov @stCf.yHeight,9 * 20
		mov @stCf.dwMask,CFM_FACE or CFM_SIZE or CFM_BOLD
		invoke lstrcpy,addr @stCf.szFaceName,addr Verdana
		invoke SendMessage,hWinEdit,EM_SETCHARFORMAT,0,addr @stCf
		invoke SendMessage,hWinEdit,EM_EXLIMITTEXT,0,-1
		invoke SendMessage,hWinEdit,EM_SETBKGNDCOLOR,NULL,_Aogo
		;------------------------------------------------------
		invoke GetDlgItem,hWinMain,IDC_EDIT
		mov hEdit,eax
		invoke GetDlgItem,hWinMain,IDC_BUTTON
		mov hButton,eax
		invoke GetDlgItem,hWinMain,IDC_PROGRESS
		mov hProgress,eax
		invoke GetDlgItem,hWinMain,IDC_LABEL
		mov hLabel,eax
		invoke GetDlgItem,hWinMain,IDC_CHECKBOX
		mov hCheckBox,eax
		invoke _SetFont,hEdit,-14
		invoke _SetFont,hButton,-14
		invoke _SetFont,hLabel,-14
		invoke _SetFont,hWinEdit,-14
		invoke _SetFont,hCheckBox,-14
		invoke SendDlgItemMessage,hWinMain,IDC_EDIT,WM_SETTEXT,256,ctxt("请把需要验证MD5的文件拖放进来……")
		invoke SendDlgItemMessage,hWinMain,IDC_WINEDIT,WM_SETTEXT,256,ctxt("请把需要验证MD5的文件拖放进来……")
		invoke DragAcceptFiles,hWinMain,TRUE
		invoke CreateSolidBrush,_Aogo
		mov AogoBrush,eax
		invoke GetWindowRect,hWinMain,addr @rect
		mov ecx,@rect.right
		sub ecx,@rect.left
		add @rect.top,100
		invoke SetWindowPos,hWinMain,HWND_TOPMOST,@rect.left,@rect.top,ecx,237,SWP_SHOWWINDOW
;------------------------------------------
	.else
		mov eax,FALSE
		ret
	.endif
	mov eax,TRUE
	ret
_ProcDlgMain	endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;主程序
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_WinMain proc
	local @stMsg:MSG
;********************************************************************
;消息循环
;********************************************************************
	.while TRUE
		invoke GetMessage,addr @stMsg,NULL,0,0
		.break .if eax  == 0
		invoke TranslateMessage,addr @stMsg
		invoke DispatchMessage,addr @stMsg
	.endw
	ret
_WinMain endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;程序入口
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
start:
;********************************************************************
;判断程序是否已经运行
;********************************************************************
	invoke	CreateMutex,NULL,FALSE,addr MutexName
	mov		hmyMutex,eax
	invoke	GetLastError
	.if	eax==ERROR_ALREADY_EXISTS
		invoke	MessageBox,NULL,addr MsgText,addr MsgCaption,MB_SYSTEMMODAL or MB_ICONEXCLAMATION
		invoke	CloseHandle,hmyMutex
		invoke	ExitProcess,NULL
	.endif
;********************************************************************
	invoke	LoadLibrary,offset szDllEdit
	mov		hRichEdit,eax
	invoke	InitCommonControls
	invoke	InitializeCriticalSection, addr lpCS
	invoke	GetModuleHandle,NULL
	mov		hInstance,eax
	invoke	DialogBoxParam,eax,DLG_MAIN,NULL,offset _ProcDlgMain,NULL
	call     _WinMain
	invoke	FreeLibrary,hRichEdit
	invoke	ExitProcess,NULL
	end start