			.386
			.model flat, stdcall
			option casemap :none
include		windows.inc
include		user32.inc
include		kernel32.inc
include		gdi32.inc
include		advapi32.inc
include		scrnsave.inc
include 		image.inc
includelib		user32.lib
includelib		kernel32.lib
includelib		gdi32.lib
includelib		advapi32.lib
includelib		scrnsave.lib
includelib 		image.lib
includelib		msvcrt.lib

ICO_MAIN		equ	100	;Must be 100
DLG_SETUP		equ	2003	;Must be 2003
TIMER			equ	1
ID_PATH		equ	2001
FIND_JPG		equ	0
FIND_BMP		equ	1

			.data?
hPic			dd	?
hDC			dd	?
DC			dd	?
szPath		db	1024 dup(?)
szPic			db	1024 dup(?)
stRect 		RECT	<?>
stBMP			BITMAP	<?>
stFindFileData	WIN32_FIND_DATA 	<?>

			.data
dwWidth		dd	0
dwHeight		dd	0
hFindFile		dd	0
dwBufferSize	dd	1024
dwFlag		dd	FIND_JPG
szSUB			db	"\",0
szFindJpg		db	"*.jpg",0
szFindBmp		db	"*.bmp",0
szConfigFile	db	"config.ini",0

			.code
ScreenSaverConfigureDialog	proc	uses ebx edi esi, hWnd,wMsg,wParam,lParam
		local	@hNewFile,@nNumOfBytesWritten
		mov	eax,wMsg
		.if	eax == WM_CLOSE
			invoke	EndDialog,hWnd,NULL
		.elseif	eax == WM_COMMAND
			mov	eax,wParam
			.if	eax ==	IDOK
				;save the path of bmp files
				invoke	GetDlgItemText,hWnd,ID_PATH,addr szPath,dwBufferSize
				invoke	CreateFile,addr szConfigFile,GENERIC_WRITE,FILE_SHARE_READ,\
						0,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,0
				.if	eax != INVALID_HANDLE_VALUE
					mov	@hNewFile,eax
					invoke	WriteFile,@hNewFile,addr szPath,dwBufferSize,\
							addr @nNumOfBytesWritten,NULL
					invoke	CloseHandle,@hNewFile
				.endif			
				invoke	EndDialog,hWnd,NULL
			.elseif eax ==	IDCANCEL
				invoke	EndDialog,hWnd,NULL			
			.endif
		.else
			mov	eax,FALSE
			ret
		.endif
		mov	eax,TRUE
		ret
ScreenSaverConfigureDialog	endp

ScreenSaverProc	proc	uses ebx edi esi, hWnd,uMsg,wParam,lParam
		local	@hNewFile,@nNumOfBytesRead

		mov	eax,uMsg
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		.if	eax ==	WM_TIMER
			;erase the screen -- using the black blush draw the screen
			mov	stRect.left,0
			mov	stRect.top,0
			push	dwWidth
	    		pop	stRect.right
	    		push	dwHeight
	    		pop	stRect.bottom
	    		invoke	GetDC,hWnd
			mov	hDC,eax
			invoke	GetClientRect,hWnd,addr stRect
			invoke	GetStockObject,BLACK_BRUSH
			invoke	FillRect,hDC,addr stRect,eax
			invoke	ReleaseDC,hWnd,hDC
				
			;get path from "config.ini" or use the current directory if "config.ini" not exist
			invoke	CreateFile,addr szConfigFile,GENERIC_READ,FILE_SHARE_READ,\
					0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0
			.if	eax != INVALID_HANDLE_VALUE
				mov	@hNewFile,eax
				invoke	ReadFile,@hNewFile,addr szPath,dwBufferSize,\
						addr @nNumOfBytesRead,NULL			
				invoke	CloseHandle,@hNewFile
			.endif
			
			;search jpg files first and then the bmp files
			.if	dwFlag == FIND_JPG
				;find every jpg file in the directory
				.if	hFindFile == 0
					invoke	lstrlen,addr szPath 
					.if	eax == 0	;if the directory NULL,use the current directory
						invoke	GetCurrentDirectory,dwBufferSize,addr szPath
					.endif
					invoke	SetCurrentDirectory,addr szPath	;this line is needed!!!
					mov	dwFlag,FIND_JPG
					invoke	FindFirstFile,addr szFindJpg,addr stFindFileData
					.if	eax != INVALID_HANDLE_VALUE
						mov	hFindFile,eax					
					.endif		
				.else
@@:
					invoke	FindNextFile,hFindFile,addr stFindFileData
					.if	eax == FALSE					
						invoke	FindClose,hFindFile
						mov	hFindFile,0
						mov	dwFlag,FIND_BMP
					.endif
				.endif
			.else			
				;find every bmp file in the directory
				.if	hFindFile == 0
					invoke	lstrlen,addr szPath ;if the directory NULL,use the current directory
					.if	eax == 0
						invoke	GetCurrentDirectory,dwBufferSize,addr szPath
					.endif
					invoke	SetCurrentDirectory,addr szPath	;this line is needed!!!
					mov	dwFlag,FIND_JPG
					invoke	FindFirstFile,addr szFindBmp,addr stFindFileData
					.if	eax != INVALID_HANDLE_VALUE
						mov	hFindFile,eax					
					.endif		
				.else
@@:
					invoke	FindNextFile,hFindFile,addr stFindFileData
					.if	eax == FALSE					
						invoke	FindClose,hFindFile
						mov	hFindFile,0
						mov	dwFlag,FIND_JPG
					.endif
				.endif
			.endif
			
			.if	stFindFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY ;if a directory continue
				jmp	@B
			.endif
			
			;get the full path of the bmp file
			invoke	lstrcpy,addr szPic,addr szPath
			invoke	lstrcat,addr szPic,addr szSUB
			invoke	lstrcat,addr szPic,addr stFindFileData.cFileName
					
			;load  bmp pictures
			invoke BitmapFromFile,addr szPic	;using the image.lib in aogo.yeah.net
			.if eax!=0
				mov hPic,eax
			.endif
			
			;show	pictures
			invoke	GetDC,hWnd
			mov	hDC,eax
			invoke	CreateCompatibleDC,hDC
			mov	DC,eax
			invoke	SelectObject,DC,hPic
	    		invoke	GetObject,hPic, sizeof stBMP,addr stBMP
	    		invoke	BitBlt,hDC,0,0,stBMP.bmWidth, stBMP.bmHeight,DC,0,0,SRCCOPY
	    		invoke	ReleaseDC,hWnd,hDC
	    		;delete the handle of image files
	    		invoke 	DeleteObject,hPic
	    		
	    		;save the rect region to be erased
	    		push	stBMP.bmWidth
	    		pop	dwWidth
	    		push	stBMP.bmHeight
	    		pop	dwHeight
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		.elseif	eax ==	WM_CREATE
   			invoke	SetTimer,hWnd,TIMER,3000,NULL		;set the timer
		.elseif	eax ==	WM_DESTROY
			invoke	KillTimer,hWnd,TIMER			;Kill the timer
			invoke	ExitProcess,NULL
			xor	eax,eax
			ret
		.endif
		invoke	DefScreenSaverProc,hWnd,uMsg,wParam,lParam
		ret
ScreenSaverProc	endp

RegisterDialogClasses	proc	uses ebx edi esi, hInst
		mov	eax,TRUE
		ret
RegisterDialogClasses	endp

end	WinMain