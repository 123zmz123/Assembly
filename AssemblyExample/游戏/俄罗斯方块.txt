;经典俄罗斯方块游戏程序
;本程序是我自学win32汇编语言三个月后的成果花了我4个夜晚，其中定有不足希望网上的高手们多多指点。
;本人自学用的书是罗云彬编写的《Windwos 环境下32位汇编语言程序设计(第2版)》(电子工业出版社)定价79.00元，此书是中文版中的经典，我极力向广大初学者推荐。
;本人网名：HAM
;电子邮箱：jiangsunantongfeng@163.com    有点长^_^
.386
.model flat,stdcall
option casemap:none
        
        
include        windows.inc
include        gdi32.inc
includelib    gdi32.lib
include        user32.inc
includelib    user32.lib
include        kernel32.inc
includelib    kernel32.lib


L        equ        -1
R        equ        1

        .data?
a        dd        ?
b        dd        ?
hInstance    dd        ?
hWinMain    dd        ?
random1        dd        ?
random2        dd        ?
timergame    dd        ?
quickdiadown    dd        ?
timerleft    dd        ?
timerright    dd        ?
timercir    dd        ?
cirjh        dd        ?
achievement    dd        ?
achbuff        db    5 dup(?)
dialeft        dd        ?;左移标记
diaright    dd        ?;右称标记
diacia        dd        ?;旋转标记
rdtop        dd        ?;记录每种组合的状态
rdcoord        db    4   dup(?);记录每个小方格的偏移位置
rdbuff        db    210 dup(?);整个活动区域
systime     SYSTEMTIME    <>
poly        struct

tlX        dd        ?
tlY        dd        ?
blX        dd        ?
blY        dd        ?
brX        dd        ?
brY        dd        ?
trX        dd        ?
trY        dd        ?

poly         ends
        .const
szClassName    db    'MyGame',0
szCaptionMain    db    'Rd',0
explain        db    '↑  ↓  ←   →',0

        .code
        
_dia        proc    _x,_y,_p,@hdc
        ;----------------------------------------------------
        ;绘制小方格
        ;----------------------------------------------------
        LOCAL    @poly:poly
        pushad
        mov    eax,_p
        push    _x
        pop    @poly.tlX
        push    _y
        pop    @poly.tlY
        push    _x
        pop    @poly.blX
        push    _y
        pop    @poly.blY
        add    @poly.blY,eax
        push    _x
        pop    @poly.brX
        add    @poly.brX,eax
        push    _y
        pop    @poly.brY
        add    @poly.brY,eax
        push    _x
        pop    @poly.trX
        add    @poly.trX,eax
        push    _y
        pop    @poly.trY
        
        invoke    MoveToEx,@hdc,@poly.trX,@poly.trY,0
        invoke    PolylineTo,@hdc,addr @poly,4
        
        
        popad
        ret

_dia         endp

_scanplot    proc    @hdc
        LOCAL    @x
        LOCAL    @y
        pushad
        lea    esi,rdbuff
        xor    ecx,ecx
        @@:
        cmp    ecx,200
        jz    @f
        push    ecx
        mov    eax,ecx
        xor    edx,edx
        mov    ebx,10
        div    ebx
        mov    ecx,edx
        mov    ebx,7
        mul    ebx
        xchg    eax,ecx
        mul    ebx
        mov    @x,eax
        mov    @y,ecx
        mov    al,byte ptr[esi]
        .if    al
            invoke    GetStockObject,BLACK_PEN
            invoke    SelectObject,@hdc,eax
            invoke    _dia,@x,@y,6,@hdc
            add    @x,2
            add    @y,2
            invoke    _dia,@x,@y,2,@hdc
        .else
            invoke    GetStockObject,WHITE_PEN
            invoke    SelectObject,@hdc,eax
            invoke    _dia,@x,@y,6,@hdc
            add    @x,2
            add    @y,2
            invoke    _dia,@x,@y,2,@hdc
        .endif
        inc    esi
        pop    ecx
        inc    ecx
        jmp    @b
        @@:
        popad
        ret

_scanplot    endp
_next        proc    n,@hdc
        LOCAL    @poly:poly
        ;----------------------------------------------------------
        ;清除上次图形
        ;----------------------------------------------------------
        invoke    GetStockObject,WHITE_BRUSH
        invoke    SelectObject,@hdc,eax
        invoke    GetStockObject,NULL_PEN
        invoke    SelectObject,@hdc,eax
        invoke    Rectangle,@hdc,77,7,99,36
        ;----------------------------------------------------------
        ;在右栏绘制下一个图形
        ;----------------------------------------------------------        
        invoke    CreatePen,PS_SOLID,1,0
        push    eax
        invoke    SelectObject,@hdc,eax    
        .if    n == 1
            invoke    _dia,91, 7,6,@hdc
            invoke    _dia,93, 9,2,@hdc
            invoke    _dia,91,14,6,@hdc
            invoke    _dia,93,16,2,@hdc
            invoke    _dia,91,21,6,@hdc
            invoke    _dia,93,23,2,@hdc
            invoke    _dia,91,28,6,@hdc
            invoke    _dia,93,30,2,@hdc
        .elseif n == 2
            invoke    _dia,84,21,6,@hdc
            invoke    _dia,86,23,2,@hdc
            invoke    _dia,84,28,6,@hdc
            invoke    _dia,86,30,2,@hdc
            invoke    _dia,91,28,6,@hdc
            invoke    _dia,93,30,2,@hdc
            invoke    _dia,91,21,6,@hdc
            invoke    _dia,93,23,2,@hdc
        .elseif    n == 3
            invoke    _dia,84,14,6,@hdc
            invoke    _dia,86,16,2,@hdc
            invoke    _dia,84,21,6,@hdc
            invoke    _dia,86,23,2,@hdc
            invoke    _dia,84,28,6,@hdc
            invoke    _dia,86,30,2,@hdc
            invoke    _dia,91,28,6,@hdc
            invoke    _dia,93,30,2,@hdc
        .elseif    n == 4
            invoke    _dia,91,14,6,@hdc
            invoke    _dia,93,16,2,@hdc
            invoke    _dia,91,21,6,@hdc
            invoke    _dia,93,23,2,@hdc
            invoke    _dia,91,28,6,@hdc
            invoke    _dia,93,30,2,@hdc
            invoke    _dia,84,28,6,@hdc
            invoke    _dia,86,30,2,@hdc
        .elseif n == 5
            invoke    _dia,84,21,6,@hdc
            invoke    _dia,86,23,2,@hdc
            invoke    _dia,77,28,6,@hdc
            invoke    _dia,79,30,2,@hdc
            invoke    _dia,84,28,6,@hdc
            invoke    _dia,86,30,2,@hdc
            invoke    _dia,91,28,6,@hdc
            invoke    _dia,93,30,2,@hdc
        .elseif    n == 6
            invoke    _dia,77,21,6,@hdc
            invoke    _dia,79,23,2,@hdc
            invoke    _dia,84,21,6,@hdc
            invoke    _dia,86,23,2,@hdc
            invoke    _dia,84,28,6,@hdc
            invoke    _dia,86,30,2,@hdc
            invoke    _dia,91,28,6,@hdc
            invoke    _dia,93,30,2,@hdc
        .else
            invoke    _dia,84,21,6,@hdc
            invoke    _dia,86,23,2,@hdc
            invoke    _dia,91,21,6,@hdc
            invoke    _dia,93,23,2,@hdc
            invoke    _dia,77,28,6,@hdc
            invoke    _dia,79,30,2,@hdc
            invoke    _dia,84,28,6,@hdc
            invoke    _dia,86,30,2,@hdc            
        .endif
        pop    eax
        invoke    DeleteObject,eax
        ret

_next         endp

_shift        proc    LorR
        pushad
        mov    ebx,LorR
        lea    esi,rdcoord
        add    byte ptr[esi],bl
        add    byte ptr[esi+1],bl
        add    byte ptr[esi+2],bl
        add    byte ptr[esi+3],bl
        popad
        ret

_shift         endp

_init        proc        ;初始化方块偏侈坐标
    
            lea    esi,rdcoord
            .if    random2 == 1
                mov    byte ptr[esi],4
                mov    byte ptr[esi+1],14
                mov    byte ptr[esi+2],24
                mov    byte ptr[esi+3],34
            .elseif    random2 == 2
                mov    byte ptr[esi],4
                mov    byte ptr[esi+1],5
                mov    byte ptr[esi+2],14
                mov    byte ptr[esi+3],15            
            .elseif    random2 == 3
                mov    byte ptr[esi],4
                mov    byte ptr[esi+1],14
                mov    byte ptr[esi+2],24
                mov    byte ptr[esi+3],25        
            .elseif    random2 == 4
                mov    byte ptr[esi],5
                mov    byte ptr[esi+1],15
                mov    byte ptr[esi+2],25
                mov    byte ptr[esi+3],24
            .elseif    random2 == 5
                mov    byte ptr[esi],4
                mov    byte ptr[esi+1],13
                mov    byte ptr[esi+2],14
                mov    byte ptr[esi+3],15
            .elseif    random2 == 6
                mov    byte ptr[esi],3
                mov    byte ptr[esi+1],4
                mov    byte ptr[esi+2],14
                mov    byte ptr[esi+3],15
            .else
                mov    byte ptr[esi],4
                mov    byte ptr[esi+1],5
                mov    byte ptr[esi+2],13
                mov    byte ptr[esi+3],14
            .endif
                mov    rdtop,1
    
        ret

_init         endp

_setbuff    proc    zhi,clear        ;给图形缓冲区设定有无方块
        pushad
        
        mov    ecx,clear
        lea    edi,rdbuff
        lea    esi,rdcoord
        mov    eax,zhi
        
        xor    ebx,ebx
        mov    bl,byte ptr[esi]
        sub    ebx,ecx
        mov    byte ptr[edi+ebx],al
        xor    ebx,ebx
        mov    bl,byte ptr[esi+1]
        sub    ebx,ecx
        mov    byte ptr[edi+ebx],al
        xor    ebx,ebx
        mov    bl,byte ptr[esi+2]
        sub    ebx,ecx
        mov    byte ptr[edi+ebx],al
        xor    ebx,ebx
        mov    bl,BYTE ptr[esi+3]
        sub    ebx,ecx
        mov    byte ptr[edi+ebx],al
        
        popad
        ret

_setbuff     endp

_ran        proc    uses ebx edx
        invoke    GetLocalTime,addr systime
        mov    ax,systime.wMilliseconds
        xor    dx,dx
        mov    bx,7
        div    bx
        inc    dx
        movzx    edx,dx
        mov    eax,edx
        
        ret

_ran         endp

_down        proc    uses ebx ecx edx edi esi
        lea    edi,rdbuff
        lea    esi,rdcoord
        xor    ebx,ebx
        .if    random2 == 1
            .if    rdtop == 1
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    l
                @@:
                mov    eax,0
                ret
                l:
            .elseif    rdtop == 2
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+1]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    l1
                @@:
                mov    eax,0
                ret
                l1:
            .endif
        .elseif random2 == 2
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp1
                @@:
                mov    eax,0
                ret
                lp1:
        .elseif    random2 == 3
            .if    rdtop == 1
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp2
                @@:
                mov    eax,0
                ret
                lp2:
            .elseif    rdtop == 2
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+1]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp3
                @@:
                mov    eax,0
                ret
                lp3:
            .elseif    rdtop == 3
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp4
                @@:
                mov    eax,0
                ret
                lp4:
            .else
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+1]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp_4
                @@:
                mov    eax,0
                ret
                lp_4:
            .endif
        .elseif    random2 == 4
            .if    rdtop == 1
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp5
                @@:
                mov    eax,0
                ret
                lp5:
            .elseif    rdtop == 2
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+1]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp6
                @@:
                mov    eax,0
                ret
                lp6:
            .elseif    rdtop == 3
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp7
                @@:
                mov    eax,0
                ret
                lp7:
            .else
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+1]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp8
                @@:
                mov    eax,0
                ret
                lp8:
            .endif
        .elseif    random2 == 5
            .if    rdtop == 1
                mov    bl,byte ptr[esi+1]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp9
                @@:
                mov    eax,0
                ret
                lp9:
            .elseif    rdtop == 2                
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+1]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp10
                @@:
                mov    eax,0
                ret
                lp10:
            .elseif    rdtop == 3
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+1]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp11
                @@:
                mov    eax,0
                ret
                lp11:
            .else
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp12
                @@:
                mov    eax,0
                ret
                lp12:
            .endif
        .elseif    random2 == 6
            .if    rdtop == 1
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp13
                @@:
                mov    eax,0
                ret
                lp13:
            .elseif    rdtop == 2
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp14
                @@:
                mov    eax,0
                ret
                lp14:    
            .endif
        .else
            .if    rdtop == 1
                mov    bl,byte ptr[esi+1]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+3]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp17
                @@:
                mov    eax,0
                ret
                lp17:            
            .elseif    rdtop == 2
                mov    bl,byte ptr[esi]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                mov    bl,byte ptr[esi+2]
                cmp    byte ptr[edi+ebx],0
                jnz    @f
                    invoke    _setbuff,0,10
                    invoke    _setbuff,1,0
                    jmp    lp18
                @@:
                mov    eax,0
                ret
                lp18:    
            .endif
        .endif
        mov    eax,1
        ret

_down         endp

_printach    proc    hdc
        LOCAL    @stRect:RECT
        pushad
        lea    esi,achbuff
        add    esi,4
        mov    eax,achievement
        xor    dx,dx
        mov    bx,10
        @@:
        div    bx
        add    dl,30h
        mov    byte ptr[esi],dl
        dec    esi
        xor    dx,dx
        or    ax,ax
        jnz    @b
        inc    esi
        mov    @stRect.left,71
        mov    @stRect.top,44
        mov    @stRect.right,104
        mov    @stRect.bottom,54
        invoke    DrawText,hdc,esi,-1,addr @stRect,DT_SINGLELINE or DT_RIGHT or DT_VCENTER;输出成绩
        popad
        ret

_printach     endp

_game        proc
        LOCAL    hdc
        pushad
        invoke    GetDC,hWinMain
        mov    hdc,eax
        lea    esi,rdcoord
        add    byte ptr[esi],10
        add    byte ptr[esi+1],10
        add    byte ptr[esi+2],10
        add    byte ptr[esi+3],10        
        mov    ebx,10        
        invoke    _down
        .if    eax == 0
            mov    ecx,20
            lea    edi,rdbuff
            
            jiance:            ;此循环用来判断有无填满的行,有几行清几行并加分
            push    edi
            push    ecx
            mov    ecx,10
            
            dec    edi
            @@:
            inc    edi
            cmp    byte ptr[edi],1
            jne    ex        ;当其中有一个没有格子时不清行,跳出清行语句
            loop    @b
            
            inc    achievement;记录成绩
            mov    ecx,edi
            inc    ecx
            lea    ebx,rdbuff
            sub    ecx,ebx
            sub    ecx,10
            @@:
            mov    al,byte ptr[edi-10]    ;通过低位向高位移10格来清行
            mov    byte ptr[edi],al
            dec    edi
            loop    @b
            
            ex:
            pop    ecx
            pop    edi
            add    edi,10
            loop    jiance
            
            invoke    _printach,hdc        ;输出新成绩
            
            lea    esi,rdbuff
            cmp    word ptr[esi+24],0;放不下方块时清除所有方块
            jz    noclear
            mov    ecx,200
            @@:
            mov    byte ptr[esi],0
            inc    esi
            loop    @b
            
            noclear:
            @@:            
            push    random1
            pop    random2
            invoke    _ran
            mov    random1,eax
            invoke    _next,random1,hdc
            invoke    _init
        .endif
        
        invoke    _scanplot,hdc
        invoke    ReleaseDC,hWinMain,hdc
        popad
        ret

_game         endp

_testzero    proc    uses ebx esi edi firstaddr,degree,jump
        mov    esi,firstaddr
        lea    edi,rdbuff
        add    esi,edi
        mov    ecx,degree
        @@:
        cmp    byte ptr[esi],0
        jnz    @f
        add    esi,jump
        loop    @b
        mov    eax,0
        ret
        @@:
        mov    eax,1
        ret

_testzero     endp

_ratate        proc    uses ebx esi edi first,second,third,fourth
        
        lea    esi,rdcoord
        lea    edi,rdbuff
        xor    ebx,ebx
        xor    ecx,ecx
        @@:
        mov    bl,byte ptr[esi+ecx]
        mov    byte ptr[edi+ebx],0
        inc    ecx
        cmp    ecx,4
        jnz    @b
        mov    bl,byte ptr[esi]
        mov    eax,first
        add    bl,al
        mov    byte ptr[esi],bl
        mov    byte ptr[edi+ebx],1
        
        mov    bl,byte ptr[esi+1]
        mov    eax,second
        add    bl,al
        mov    byte ptr[esi+1],bl
        mov    byte ptr[edi+ebx],1
        
        mov    bl,byte ptr[esi+2]
        mov    eax,third
        add    bl,al
        mov    byte ptr[esi+2],bl
        mov    byte ptr[edi+ebx],1
        
        mov    bl,byte ptr[esi+3]
        mov    eax,fourth
        add    bl,al
        mov    byte ptr[esi+3],bl
        mov    byte ptr[edi+ebx],1
        
        
        ret

_ratate     endp

_cir        proc        ;旋转;左移;右移
        LOCAL    hdc
        pushad
        invoke    GetDC,hWinMain
        mov    hdc,eax
        
        cmp    dialeft,0    ;当左移键与右移键都按下时,不移位
        jz    @f
        cmp    diaright,0
        jz    @f
        mov    dialeft,0
        mov    diaright,0
        @@:
        
        
        lea    esi,rdcoord
        lea    edi,rdbuff
        xor    ebx,ebx
        cmp    diacia,1
        je    cir
        @@:
        mov    al,byte ptr[esi+ebx]
        inc    ebx
        mov    ah,0
        mov    cl,10
        .if    diaright == 1
            inc    al
        .endif
        div    cl
        or    ah,ah
        jz    exit2
        cmp    ebx,4
        jb    @b
        
        xor    ebx,ebx
        @@:
        .if    random2 == 1
            .if    rdtop == 1 || rdtop == 3
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                    
                .endif
            .elseif    rdtop == 2
                .if    dialeft == 1                    
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                        @@:
                .elseif    diaright == 1                    
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .else
                .if    dialeft == 1                    
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                        @@:
                .elseif    diaright == 1                    
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
                
                
                
                
            .endif
        .elseif    random2 == 2
            .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f                    
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                    @@:
            .elseif    diaright == 1
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f                    
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:                
            .endif
        .elseif    random2 == 3
            .if    rdtop == 1
                .if    dialeft == 1                
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f            
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .elseif rdtop == 2
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f            
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                    @@:
                .elseif diaright == 1            
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f                
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:            
                .endif
            .elseif    rdtop == 3
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                    @@:
                .elseif diaright == 1        
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f            
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f            
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .else
                .if    dialeft == 1
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                    @@:
                .elseif diaright == 1    
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f        
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .endif
        .elseif random2 == 4
            .if    rdtop == 1
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .elseif    rdtop == 2
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .elseif    rdtop == 3
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .else
                .if    dialeft == 1
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f    
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .endif
        .elseif random2 == 5
            .if    rdtop == 1
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                    
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .elseif    rdtop == 2
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                        
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .elseif    rdtop == 3
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                    
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .else
                .if    dialeft == 1
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                    
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .endif        
        .elseif random2 == 6
            .if    rdtop == 1
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                    
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .elseif    rdtop == 2
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .elseif    rdtop == 3
                .if    dialeft == 1
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .else
                .if    dialeft == 1
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                        
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .endif        
        .else
            .if    rdtop == 1
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                    
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .elseif    rdtop == 2
                .if    dialeft == 1
                    mov    bl,byte ptr[esi]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .elseif    rdtop == 3
                .if    dialeft == 1
                    mov    bl,byte ptr[esi+1]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                    
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+2]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .else
                .if    dialeft == 1
                    mov    bl,byte ptr[esi+2]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+3]
                    dec    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,L
                        invoke    _setbuff,1,0                        
                    @@:
                .elseif    diaright == 1
                    mov    bl,byte ptr[esi]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                    mov    bl,byte ptr[esi+1]
                    inc    bl
                    cmp    byte ptr[edi+ebx],0
                    jnz    @f
                        invoke    _setbuff,0,0
                        invoke    _shift,R
                        invoke    _setbuff,1,0
                    @@:
                .endif
            .endif        
        .endif
        
        jmp    exit2
        cir:
        cmp    cirjh,0
        jz    @f
        cmp    cirjh,5
        jb    exit2
        @@:
        lea    esi,rdcoord
        .if    random2 == 1
            .if    rdtop == 1
                mov    al,byte ptr[esi]
                mov    ah,0
                mov    bl,10
                div    bl
                cmp    ah,2
                jb    @f
                cmp    ah,8
                ja    @f
                mov    al,byte ptr[esi]
                sub    al,2
                movzx    eax,al    
                invoke    _testzero,eax,3,10
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+1]
                dec    al
                invoke    _testzero,eax,3,10
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+2]
                inc    al
                invoke    _testzero,eax,2,10
                or    eax,eax
                jnz    @f
                invoke    _ratate,18,9,0,-9
                mov    rdtop,2
                @@:
            .elseif    rdtop == 2
                mov    al,byte ptr[esi]
                sub    al,20
                movzx    eax,al
                invoke    _testzero,eax,3,1
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi]
                sub    al,10
                movzx    eax,al
                invoke    _testzero,eax,3,1
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+2]
                add    al,10
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                invoke    _ratate,-18,-9,0,9
                mov    rdtop,1
                @@:
            .endif
        .elseif random2 == 3
            .if    rdtop == 1
                mov    al,byte ptr[esi]
                mov    ah,0
                mov    bl,10
                div    bl
                cmp    ah,1
                jb    @f
                mov    al,byte ptr[esi]
                dec    al
                movzx    eax,al
                invoke    _testzero,eax,2,10

                or    eax,eax

                jnz    @f
                mov    al,byte ptr[esi]
                inc    al
                invoke    _testzero,eax,2,10
                or    eax,eax
                jnz    @f
                invoke    _ratate,9,0,-9,-20
                mov    rdtop,2
                @@:
            .elseif rdtop == 2
                mov    al,byte ptr[esi+3]
                sub    al,2
                movzx    eax,al
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi]
                add    al,10
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                invoke    _ratate,11,0,-11,-2
                mov    rdtop,3
                @@:                
            .elseif rdtop == 3
                mov    al,byte ptr[esi]
                mov    ah,0
                mov    bl,10
                div    bl
                cmp    ah,8
                ja    @f
                mov    al,byte ptr[esi+3]
                add    al,10
                movzx    eax,al
                invoke    _testzero,eax,2,10
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi]
                inc    al
                invoke    _testzero,eax,2,-10
                or    eax,eax
                jnz    @f
                invoke    _ratate,-9,0,9,20
                mov    rdtop,4
                @@:
            .else
                mov    al,byte ptr[esi+3]
                inc    al
                movzx    eax,al
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+1]
                sub    al,10
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                invoke    _ratate,-11,0,11,2
                mov    rdtop,1
                @@:
            .endif
        .elseif    random2 == 4
            .if    rdtop == 1
                mov    al,byte ptr[esi]
                mov    ah,0
                mov    bl,10
                div    bl
                cmp    ah,8
                ja    @f
                mov    al,byte ptr[esi]
                dec    al
                movzx    eax,al
                invoke    _testzero,eax,2,10
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+1]
                inc    al
                invoke    _testzero,eax,2,10
                or    eax,eax
                jnz    @f
                invoke    _ratate,9,0,-9,2
                mov    rdtop,2
                @@:
            .elseif rdtop == 2
                mov    al,byte ptr[esi+2]
                sub    al,10
                movzx    eax,al
                invoke    _testzero,eax,2,-1
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi]
                add    al,10
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                invoke    _ratate,11,0,-11,-20
                mov    rdtop,3
                @@:
            .elseif rdtop == 3
                mov    al,byte ptr[esi]
                mov    ah,0
                mov    bl,10
                div    bl
                cmp    ah,1
                jb    @f
                mov    al,byte ptr[esi+2]
                dec    al
                movzx    eax,al
                invoke    _testzero,eax,2,10
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi]
                inc    al
                invoke    _testzero,eax,2,-10
                or    eax,eax
                jnz    @f
                invoke    _ratate,-9,0,9,-2
                mov    rdtop,4
                @@:
            .else
                mov    al,byte ptr[esi]
                sub    al,10
                movzx    eax,al
                invoke    _testzero,eax,2,-1
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+2]
                add    al,10
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                invoke    _ratate,-11,0,11,20
                mov    rdtop,1
                @@:
            .endif
        .elseif random2 == 5
            .if    rdtop == 1
                mov    al,byte ptr[esi]
                inc    al
                movzx    eax,al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi]
                dec    al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+1]
                add    al,10
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                invoke    _ratate,9,11,0,-11
                mov    rdtop,2
                @@:
            .elseif    rdtop == 2
                mov    al,byte ptr[esi+1]
                mov    ah,0
                mov    bl,10
                div    bl
                cmp    ah,8
                ja    @f
                mov    al,byte ptr[esi]
                sub    al,10
                movzx    eax,al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi]
                add    al,10
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+2]
                inc    al
                invoke    _testzero,eax,2,10
                or    eax,eax
                jnz    @f
                invoke    _ratate,11,-9,0,9
                mov    rdtop,3
                @@:
            .elseif rdtop == 3
                mov    al,byte ptr[esi]
                inc    al
                movzx    eax,al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi]
                dec    al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+1]
                sub    al,10
                invoke    _testzero,eax,2,-10
                or    eax,eax
                jnz    @f
                invoke    _ratate,-9,-11,0,11
                mov    rdtop,4
                @@:
            .else
                mov    al,byte ptr[esi+1]
                mov    ah,0
                mov    bl,10
                div    bl
                cmp    ah,1
                jb    @f
                mov    al,byte ptr[esi]
                sub    al,10
                movzx    eax,al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+3]
                inc    al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+1]
                dec    al
                invoke    _testzero,eax,2,10
                or    eax,eax
                jnz    @f
                invoke    _ratate,-11,9,0,-9
                mov    rdtop,1
                @@:
            .endif
        .elseif    random2 == 6
            .if    rdtop == 1
                mov    al,byte ptr[esi]
                add    al,10
                movzx    eax,al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+1]
                inc    al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                invoke    _ratate,20,9,0,-11
                mov    rdtop,2
                @@:
            .elseif    rdtop == 2
                mov    al,byte ptr[esi]
                mov    ah,0
                mov    bl,10
                div    bl
                cmp    ah,7
                ja    @f
                mov    al,byte ptr[esi+3]
                dec    al
                movzx    eax,al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+3]
                inc    al
                invoke    _testzero,eax,2,10
                or    eax,eax
                jnz    @f
                invoke    _ratate,-20,-9,0,11
                mov    rdtop,1
                @@:
            .endif
        .elseif    random2 == 7
            .if    rdtop == 1
                mov    al,byte ptr[esi]
                dec    al
                movzx    eax,al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+2]
                add    al,10
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                invoke    _ratate,9,-2,11,0
                mov    rdtop,2
                @@:
            .elseif    rdtop == 2
                mov    al,byte ptr[esi]
                mov    ah,0
                mov    bl,10
                div    bl
                cmp    ah,7
                ja    @f
                mov    al,byte ptr[esi+1]
                inc    al
                movzx    eax,al
                invoke    _testzero,eax,2,1
                or    eax,eax
                jnz    @f
                mov    al,byte ptr[esi+2]
                dec    al
                invoke    _testzero,eax,1,0
                or    eax,eax
                jnz    @f
                invoke    _ratate,-9,2,-11,0
                mov    rdtop,1
                @@:
            .endif
        .endif
        exit2:
        cmp    diacia,1
        jne    @f
        inc    cirjh
        @@:
        invoke    _scanplot,hdc
        invoke    DeleteObject,hdc
        popad
        ret

_cir         endp

_ProcWinMain    proc    uses ebx edi esi hWnd,uMsg,wParam,lParam
        local    @stPs:PAINTSTRUCT
        local    @stRect:RECT
        local    hdc
        mov    eax,uMsg
;********************************************************************
        
        .if    eax ==    WM_KEYDOWN
            mov    eax,wParam
            movzx    eax,ax
            .if    eax == 28h        ;快速下移
                .if    quickdiadown == 0
                invoke    KillTimer,hWnd,timergame
                invoke    SetTimer,hWnd,0,20,addr _game
                mov    timergame,eax
                mov    quickdiadown,1
                .endif
            .elseif    eax == 25h        ;左移
                .if    dialeft == 0
                invoke    KillTimer,hWnd,timergame
                invoke    SetTimer,hWnd,0,40,addr _cir
                mov    timerleft,eax
                mov    dialeft,1
                .endif
            .elseif    eax == 27h        ;右移
                .if    diaright == 0
                invoke    KillTimer,hWnd,timergame
                invoke    SetTimer,hWnd,0,40,addr _cir
                mov    timerright,eax
                mov    diaright,1
                .endif
            .elseif    eax == 26h        ;旋转
                .if    diacia == 0
                invoke    KillTimer,hWnd,timergame
                invoke    SetTimer,hWnd,0,50,addr _cir
                mov    timercir,eax
                mov    diacia,1
                .endif
            .endif
        .elseif    eax ==    WM_KEYUP
            mov    eax,wParam
            movzx    eax,ax
            .if    eax == 28h
                mov    quickdiadown,0
                invoke    KillTimer,hWnd,timergame
                invoke    SetTimer,hWnd,0,500,addr _game
                mov    timergame,eax
            .elseif    eax == 25h
                mov    dialeft,0
                invoke    KillTimer,hWnd,timerleft
                invoke    SetTimer,hWnd,0,500,addr _game
                mov    timergame,eax
            .elseif    eax == 27h
                mov    diaright,0
                invoke    KillTimer,hWnd,timerright
                invoke    SetTimer,hWnd,0,500,addr _game
                mov    timergame,eax
            .elseif    eax == 26h
                mov    diacia,0
                mov    cirjh,0
                invoke    KillTimer,hWnd,timercir
                invoke    SetTimer,hWnd,0,500,addr _game
                mov    timergame,eax
                
            .endif
            
;********************************************************************
        .elseif    eax ==    WM_PAINT
            invoke    BeginPaint,hWnd,addr @stPs
            jnz    @f
            mov    ebx,eax
            invoke    CreatePen,PS_SOLID,1,0
            push    eax
            invoke    SelectObject,ebx,eax
            invoke    MoveToEx,ebx,70,0,0
            invoke    LineTo,ebx,70,140
            invoke    MoveToEx,ebx,0,140,0
            invoke    LineTo,ebx,106,140
            mov    @stRect.left,0
            mov    @stRect.top,142
            mov    @stRect.right,106
            mov    @stRect.bottom,160
            invoke    DrawText,ebx,addr explain,-1,addr @stRect,DT_SINGLELINE or DT_CENTER or DT_VCENTER
            invoke    _printach,ebx
            invoke    _scanplot,ebx
            pop    eax
            invoke    DeleteObject,eax            
            invoke    _next,random1,ebx
            invoke    EndPaint,hWnd,addr @stPs
        .elseif    eax ==    WM_CREATE
            lea    esi,rdbuff
            add    esi,200
            mov    ecx,10
            @@:
            mov    byte ptr[esi],1
            inc    esi
            loop    @b
            invoke    SetTimer,hWnd,0,500,addr _game
            mov    timergame,eax
            invoke    _ran
            mov    random2,eax
            mov    random1,eax
            lea    esi,achbuff
            mov    word ptr[esi],30h
            invoke    _init
        .elseif    eax ==    WM_CLOSE
            invoke    KillTimer,hWnd,timergame
            invoke    DestroyWindow,hWinMain
            invoke    PostQuitMessage,NULL
;********************************************************************
        .else
            invoke    DefWindowProc,hWnd,uMsg,wParam,lParam
            ret
        .endif
;********************************************************************
        xor    eax,eax
        ret

_ProcWinMain    endp
;-------------------------------------------------------------------------
_WinMain    proc
        local    @stWndClass:WNDCLASSEX
        local    @stMsg:MSG

        invoke    GetModuleHandle,NULL
        mov    hInstance,eax
        invoke    RtlZeroMemory,addr @stWndClass,sizeof @stWndClass
        
        invoke    LoadCursor,0,IDC_ARROW
        mov    @stWndClass.hCursor,eax
        push    hInstance
        pop    @stWndClass.hInstance
        mov    @stWndClass.cbSize,sizeof WNDCLASSEX
        mov    @stWndClass.style,CS_HREDRAW or CS_VREDRAW
        mov    @stWndClass.lpfnWndProc,offset _ProcWinMain
        mov    @stWndClass.hbrBackground,COLOR_WINDOW + 1
        mov    @stWndClass.lpszClassName,offset szClassName
        invoke    RegisterClassEx,addr @stWndClass
        
        invoke    CreateWindowEx,WS_EX_CLIENTEDGE,offset szClassName,offset szCaptionMain,\
            WS_MINIMIZEBOX or WS_SYSMENU,\
            450,100,114,197,\
            NULL,NULL,hInstance,NULL
        mov    hWinMain,eax
        invoke    ShowWindow,hWinMain,SW_SHOWNORMAL
        invoke    UpdateWindow,hWinMain
        
        .while    TRUE
            invoke    GetMessage,addr @stMsg,NULL,0,0
            .break    .if eax    == 0
            invoke    TranslateMessage,addr @stMsg
            invoke    DispatchMessage,addr @stMsg
        .endw
        ret

_WinMain    endp

start:
        call    _WinMain
        invoke    ExitProcess,NULL
        
        end    start

