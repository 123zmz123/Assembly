	.386
	.model	flat,stdcall
	option	casemap:none


include		windows.inc
include		user32.inc
includelib	user32.lib
include		kernel32.inc
includelib	kernel32.lib
include		gdi32.inc
includelib	gdi32.lib

ID_ICO	equ	1
DLG_MAIN equ	1000
IDB_1	 equ	1001
ID_TIMER equ	1002
ID_TIMER1 equ	1003
ID_TIMER2 equ	1004
ID_TIMER3 equ	1005
ID_TIMER4 equ	1006
_HEIGHT	  equ	10h*20			;每个小方块边长为10h，垂直方向有20个方块
_WIDTH	  equ	10h*12			;水平方向有12个方块
ID_START  equ	1007
ID_BUTTON equ	1008
ID_	   equ	10000
ID1_1	   equ	10001
ID_2	  equ	10002
ID1_2	equ	10004
ID2_1	equ	10005
ID1_3	equ	10006
ID1_4	equ	10007
ID1_5	equ	10008
ORIG	struct
	x	dd	?
	y	dd	?
ORIG ends

		.DATA                    
ClassName db "SimpleWinClass",0       
AppName db "俄罗斯方块",0        
_lpScore   db "得分：",0
lpStart		db "开始游戏",0
lpGameOver	db "游戏结束！！！",0
szCapHelp	db	"帮助！！！",0
szGuanshu	db	"关数：",0
szHelp		db	"按->和<- 键控制左右走",0dh,0ah,\
			"按“向下”键往下落   ",0dh,0ah,\
			"按“向上”键变形     ",0dh,0ah,\
			"按“空格”键加速下落 ",0
		.data?
hInstance	dd	?
dwLength	dd	?
hWinMain	dd	?
hwndButton	dd	?
CommandLine	dd	?
PlayFlag	dd	?	;初始化标志，==1表示刚开始游戏，不应在显示窗口画图
Score		dd	?	;存现在分数
Copy_Score	dd	?	;背份分数，与现在分数比较，用来判断分数是否达到下一级需要加速
Color		dd	?	;随机产生的方块颜色
InitColor	dd	?
Velocity	dd	?	;方块下落的间隔时间,既下落速度
Stop		dd	?	;Stop==1为暂停，==0开始
hMenu		dd	?
orig1		ORIG	<>
orig2		ORIG	<>
orig3		ORIG	<>
orig4		ORIG	<>	;每种积木类型由四个小方块组成，orig1~orig4为每种积木类型中四个小方块的位置坐标
typerect	ORIG	<>	;typerect.x为积木类型，typerect.y为某种类型的其中一旋转种状态
_orig1		ORIG	<>
_orig2		ORIG	<>
_orig3		ORIG	<>
_orig4		ORIG	<>	;_orig1~_orig4指定了下一个将出现的提示中各个方块的位置

_typerect	ORIG	<>	;与typerect这个变量的意义一样，这是提示方块的状态
buf		db	240 dup(?)	;存12*20个方格的背景状态,1代表这个位置有方块
lpScore 	db	10 dup(?)	;分数

		.code
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;将_orig1～_orig4的值传给orig1~orig4
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_To		proc
	mov	eax,_orig1.x
	mov	orig1.x,eax
	mov	eax,_orig1.y
	mov	orig1.y,eax
	mov	eax,_orig2.x
	mov	orig2.x,eax
	mov	eax,_orig2.y
	mov	orig2.y,eax
	mov	eax,_orig3.x
	mov	orig3.x,eax
	mov	eax,_orig3.y
	mov	orig3.y,eax
	mov	eax,_orig4.x
	mov	orig4.x,eax
	mov	eax,_orig4.y
	mov	orig4.y,eax
	mov	eax,_typerect.x
	mov	typerect.x,eax
	mov	eax,_typerect.y
	mov	typerect.y,eax	
	mov	eax,InitColor
	mov	Color,eax
	ret

_To endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;判断是否消行
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_Distroy	proc
	LOCAL	@row
	LOCAL	@hWnd
	
	mov	@row,0
	xor	ebx,ebx
	.while	1
		xor	eax,eax
		mov	cl,20
		push	ebx
		.while	1
			mov	edx,eax
			mul	cl
			add	eax,ebx
			.if	byte ptr buf[eax]==0
				.break
			.endif
			mov	eax,edx
			inc	eax
			push	eax
			.if	eax==12
				inc	@row
				.while	1
					xor	eax,eax
					dec	ebx
					.while	1
						push	eax
						mul	cl
						add	eax,ebx
						mov	dl,byte ptr buf[eax]
						mov	byte ptr buf[eax],0
						mov	byte ptr buf[eax+1],dl
						pop	eax
						inc	eax
						.if	eax==12
							.break
						.endif
					.endw
					.if	ebx==0
						.break
					.endif
				.endw
			.endif
			pop	eax
		.endw
		pop	ebx
		inc	ebx
		.if	ebx==20
			.break
		.endif
	.endw
	.if	@row==1
		add	Score,1
	.elseif	@row==2
		add	Score,3
	.elseif	@row==3
		add	Score,6
	.elseif	@row==4
		add	Score,10
	.endif
	mov	eax,Copy_Score
	mov	cl,30
	mul	cl
	.if	eax<Score
		inc	Copy_Score
		invoke	FindWindow,offset ClassName,offset AppName
		mov	@hWnd,eax
		invoke	KillTimer,@hWnd,ID_TIMER1
		sub	Velocity,50
		invoke	SetTimer,@hWnd,ID_TIMER1,Velocity,NULL
	.endif
	ret

_Distroy endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;判断是否可以移动，返回值eax==1表示可以，eax==0表示不可以
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_IsMove		proc	
	
	.if	orig1.x<0||orig2.x<0||orig3.x<0||orig4.x<0||orig1.x>11||orig2.x>11||orig3.x>11||orig4.x>11
		xor	eax,eax
		ret
	.endif
	mov	cl,20
	mov	eax,orig1.x
	mul	cl
	add	eax,orig1.y
	mov	ebx,eax
	mov	eax,orig2.x
	mul	cl
	add	eax,orig2.y
	mov	edx,eax
	mov	eax,orig3.x
	mul	cl
	add	eax,orig3.y
	mov	esi,eax
	mov	eax,orig4.x
	mul	cl
	add	eax,orig4.y
	mov	ecx,eax
	.if	orig1.y>19||orig2.y>19||orig3.y>19||orig4.y>19
		xor	eax,eax
		ret
	.endif
	.if	byte ptr buf[ebx]||byte ptr buf[edx]||byte ptr buf[esi]||byte ptr buf[ecx]
		xor	eax,eax
	.else	
		mov	eax,1
	.endif
	ret

_IsMove endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;产生随机数
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_Radom		proc
	
	invoke	GetTickCount
	and	eax,0ffh
	mov	cl,7
	div	cl
	movzx	ebx,ah		;产生0~6的一个随机数；代表6种积木类型
	invoke	GetTickCount
	and	eax,0ffh
	mov	cl,4
	div	cl
	movzx	ecx,ah		
	mov	InitColor,ecx	;产生1~4的一个随机数
	inc	InitColor	;用1~4代表4种颜色
	ret

_Radom endp
_InitRotate	proc
	
	.if	_typerect.x==0
		.if	_typerect.y==0
			add	_orig1.y,2
			sub	_orig4.x,2
			mov	_typerect.y,1
		.else
			sub	_orig1.y,2
			add	_orig4.x,2
			mov	_typerect.y,0
		.endif
	.elseif	_typerect.x==1
		.if	_typerect.y==0
			add	_orig1.y,2
			add	_orig4.x,2
			mov	_typerect.y,1
		.elseif	_typerect.y==1
			sub	_orig1.y,2
			sub	_orig4.x,2
			mov	_typerect.y,0
		.endif
	.elseif	_typerect.x==2
		.if	_typerect.y==0
			add	_orig1.y,1
			sub	_orig4.x,1
			add	_orig2.x,1
			add	_orig2.y,1
			mov	_typerect.y,1
		.elseif	_typerect.y==1
			sub	_orig3.x,1
			sub	_orig3.y,1
			sub	_orig2.x,1
			add	_orig2.y,1
			mov	_typerect.y,2
		.elseif	_typerect.y==2
			add	_orig1.x,2
			add	_orig3.x,2
			add	_orig3.y,2
			mov	_typerect.y,3
		.elseif	_typerect.y==3
			sub	_orig1.x,2
			sub	_orig1.y,1
			sub	_orig2.y,2
			sub	_orig3.x,1
			sub	_orig3.y,1
			add	_orig4.x,1
			mov	_typerect.y,0
		.endif
	.elseif	_typerect.x==3
		.if	_typerect.y==0
			add	_orig2.y,2
			add	_orig1.y,2
			add	_orig1.x,2
			mov	_typerect.y,1
		.elseif	_typerect.y==1
			add	_orig3.x,2
			add	_orig4.x,2
			sub	_orig4.y,2
			mov	_typerect.y,2
		.elseif	_typerect.y==2
			sub	_orig2.y,1
			sub	_orig4.x,2
			add	_orig4.y,1
			mov	_typerect.y,3
		.elseif	_typerect.y==3
			sub	_orig1.x,2
			sub	_orig1.y,2
			sub	_orig2.y,1
			sub	_orig3.x,2
			add	_orig4.y,1
			mov	_typerect.y,0
		.endif
	.elseif	_typerect.x==4
		.if	_typerect.y==0
			add	_orig4.y,1
			sub	_orig4.x,1
			mov	_typerect.y,1
		.elseif	_typerect.y==1
			add	_orig1.x,1
			add	_orig1.y,1
			mov	_typerect.y,2
		.elseif	_typerect.y==2
			add	_orig3.x,1
			sub	_orig3.y,1
			mov	_typerect.y,3
		.elseif	_typerect.y==3
			sub	_orig1.x,1
			sub	_orig1.y,1
			sub	_orig3.x,1
			add	_orig3.y,1
			add	_orig4.x,1
			sub	_orig4.y,1
			mov	_typerect.y,0
		.endif
	.elseif	_typerect.x==6
		.if	_typerect.y==0
			sub	_orig1.y,1
			add	_orig1.x,2
			add	_orig2.x,1
			add	_orig2.y,1
			sub	_orig4.x,1
			add	_orig4.y,2
			mov	_typerect.y,1
		.else
			add	_orig1.y,1
			sub	_orig1.x,2
			sub	_orig2.x,1
			sub	_orig2.y,1
			add	_orig4.x,1
			sub	_orig4.y,2
			mov	_typerect.y,0
		.endif
		
	.endif
	ret

_InitRotate endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;旋转
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_rotate	proc	
	LOCAL	@orig1:ORIG
	LOCAL	@orig2:ORIG
	LOCAL	@orig3:ORIG
	LOCAL	@orig4:ORIG
	LOCAL	@typerect
	
	mov	eax,orig1.x
	mov	@orig1.x,eax
	mov	eax,orig1.y
	mov	@orig1.y,eax
	mov	eax,orig2.x
	mov	@orig2.x,eax
	mov	eax,orig2.y
	mov	@orig2.y,eax
	mov	eax,orig3.x
	mov	@orig3.x,eax
	mov	eax,orig3.y
	mov	@orig3.y,eax
	mov	eax,orig4.x
	mov	@orig4.x,eax
	mov	eax,orig4.y
	mov	@orig4.y,eax
	mov	eax,typerect.y
	mov	@typerect,eax
	.if	typerect.x==0
		.if	typerect.y==0
			add	orig1.y,2
			sub	orig4.x,2
			mov	typerect.y,1
		.else
			sub	orig1.y,2
			add	orig4.x,2
			mov	typerect.y,0
		.endif
	.elseif	typerect.x==1
		.if	typerect.y==0
			add	orig1.y,2
			add	orig4.x,2
			mov	typerect.y,1
		.elseif	typerect.y==1
			sub	orig1.y,2
			sub	orig4.x,2
			mov	typerect.y,0
		.endif
	.elseif	typerect.x==2
		.if	typerect.y==0
			add	orig1.y,1
			sub	orig4.x,1
			add	orig2.x,1
			add	orig2.y,1
			mov	typerect.y,1
		.elseif	typerect.y==1
			sub	orig3.x,1
			sub	orig3.y,1
			sub	orig2.x,1
			add	orig2.y,1
			mov	typerect.y,2
		.elseif	typerect.y==2
			add	orig1.x,2
			add	orig3.x,2
			add	orig3.y,2
			mov	typerect.y,3
		.elseif	typerect.y==3
			sub	orig1.x,2
			sub	orig1.y,1
			sub	orig2.y,2
			sub	orig3.x,1
			sub	orig3.y,1
			add	orig4.x,1
			mov	typerect.y,0
		.endif
	.elseif	typerect.x==3
		.if	typerect.y==0
			add	orig2.y,2
			add	orig1.y,2
			add	orig1.x,2
			mov	typerect.y,1
		.elseif	typerect.y==1
			add	orig3.x,2
			add	orig4.x,2
			sub	orig4.y,2
			mov	typerect.y,2
		.elseif	typerect.y==2
			sub	orig2.y,1
			sub	orig4.x,2
			add	orig4.y,1
			mov	typerect.y,3
		.elseif	typerect.y==3
			sub	orig1.x,2
			sub	orig1.y,2
			sub	orig2.y,1
			sub	orig3.x,2
			add	orig4.y,1
			mov	typerect.y,0
		.endif
	.elseif	typerect.x==4
		.if	typerect.y==0
			add	orig4.y,1
			sub	orig4.x,1
			mov	typerect.y,1
		.elseif	typerect.y==1
			add	orig1.x,1
			add	orig1.y,1
			mov	typerect.y,2
		.elseif	typerect.y==2
			add	orig3.x,1
			sub	orig3.y,1
			mov	typerect.y,3
		.elseif	typerect.y==3
			sub	orig1.x,1
			sub	orig1.y,1
			sub	orig3.x,1
			add	orig3.y,1
			add	orig4.x,1
			sub	orig4.y,1
			mov	typerect.y,0
		.endif
	.elseif	typerect.x==6
		.if	typerect.y==0
			sub	orig1.y,1
			add	orig1.x,2
			add	orig2.x,1
			add	orig2.y,1
			sub	orig4.x,1
			add	orig4.y,2
			mov	typerect.y,1
		.else
			add	orig1.y,1
			sub	orig1.x,2
			sub	orig2.x,1
			sub	orig2.y,1
			add	orig4.x,1
			sub	orig4.y,2
			mov	typerect.y,0
		.endif
		
	.endif
	invoke	_IsMove
	.if	eax==0
		mov	eax,@orig1.x
		mov	orig1.x,eax
		mov	eax,@orig1.y
		mov	orig1.y,eax
		mov	eax,@orig2.x
		mov	orig2.x,eax
		mov	eax,@orig2.y
		mov	orig2.y,eax
		mov	eax,@orig3.x
		mov	orig3.x,eax
		mov	eax,@orig3.y
		mov	orig3.y,eax
		mov	eax,@orig4.x
		mov	orig4.x,eax
		mov	eax,@orig4.y
		mov	orig4.y,eax
		mov	eax,@typerect
		mov	typerect.y,eax
	.endif
	ret

_rotate endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;初始化方块,_type为积木的类型，_frame为某一类型积木的其中一种状态
;x坐标为0～12，y坐标为0～20，其中y坐标轴正方向向下，x坐标轴正方向向右
;初始化时积木出就是给积木的每个小方块x,y坐标赋初值
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_Initial	proc	_type,_frame
	
	mov	eax,_type
	.if	eax==0
		mov	_orig1.x,5
		mov	_orig1.y,0
		mov	_orig2.x,5
		mov	_orig2.y,1
		mov	_orig3.x,6
		mov	_orig3.y,1
		mov	_orig4.x,6
		mov	_orig4.y,2
		mov	_typerect.x,0
		mov	_typerect.y,0
		mov	eax,_frame
		mov	cl,2
		div	cl
		.if	ah==1
			invoke	_InitRotate
			dec	_orig1.y
			dec	_orig2.y
			dec	_orig3.y
			dec	_orig4.y
		.endif
	.elseif	eax==1
		mov	_typerect.x,1
		mov	_typerect.y,0
		mov	_orig1.x,6
		mov	_orig1.y,0
		mov	_orig2.x,6
		mov	_orig2.y,1
		mov	_orig3.x,5
		mov	_orig3.y,1
		mov	_orig4.x,5
		mov	_orig4.y,2
		mov	eax,_frame
		mov	cl,2
		div	cl
		.if	ah==1
			invoke	_InitRotate
			dec	_orig1.y
			dec	_orig2.y
			dec	_orig3.y
			dec	_orig4.y
		.endif
	.elseif	eax==2
		mov	_typerect.x,2
		mov	_typerect.y,0
		mov	_orig1.x,5
		mov	_orig1.y,0
		mov	_orig2.x,6
		mov	_orig2.y,0
		mov	_orig3.x,6
		mov	_orig3.y,1
		mov	_orig4.x,6
		mov	_orig4.y,2
		.if	_frame==1
			invoke	_InitRotate
			dec	_orig1.y
			dec	_orig2.y
			dec	_orig3.y
			dec	_orig4.y
		.elseif	_frame==2
			invoke	_InitRotate
			invoke	_InitRotate
		.elseif	_frame==3
			invoke	_InitRotate
			invoke	_InitRotate
			invoke	_InitRotate
			dec	_orig1.y
			dec	_orig2.y
			dec	_orig3.y
			dec	_orig4.y
		.endif
	.elseif	eax==3
		mov	_typerect.x,3
		mov	_typerect.y,0
		mov	_orig1.x,5
		mov	_orig1.y,0
		mov	_orig2.x,6
		mov	_orig2.y,0
		mov	_orig3.x,5
		mov	_orig3.y,1
		mov	_orig4.x,5
		mov	_orig4.y,2
		.if	_frame==1
			invoke	_InitRotate
			dec	_orig1.y
			dec	_orig2.y
			dec	_orig3.y
			dec	_orig4.y
		.elseif	_frame==2
			invoke	_InitRotate
			invoke	_InitRotate
		.elseif	_frame==3
			invoke	_InitRotate
			invoke	_InitRotate
			invoke	_InitRotate
			dec	_orig1.y
			dec	_orig2.y
			dec	_orig3.y
			dec	_orig4.y
		.endif
	.elseif	eax==4
		mov	_typerect.x,4
		mov	_typerect.y,0
		mov	_orig1.x,6
		mov	_orig1.y,0
		mov	_orig2.x,6
		mov	_orig2.y,1
		mov	_orig3.x,5
		mov	_orig3.y,1
		mov	_orig4.x,7
		mov	_orig4.y,1
		.if	_frame==1
			invoke	_InitRotate
		.elseif	_frame==2
			invoke	_InitRotate
			invoke	_InitRotate
			dec	_orig1.y
			dec	_orig2.y
			dec	_orig3.y
			dec	_orig4.y
		.elseif	_frame==3
			invoke	_InitRotate
			invoke	_InitRotate
			invoke	_InitRotate
		.endif
	.elseif	eax==5
		mov	_typerect.x,5
		mov	_typerect.y,0
		mov	_orig1.x,5
		mov	_orig1.y,0
		mov	_orig2.x,6
		mov	_orig2.y,0
		mov	_orig3.x,5
		mov	_orig3.y,1
		mov	_orig4.x,6
		mov	_orig4.y,1
	.elseif	eax==6
		mov	_typerect.x,6
		mov	_typerect.y,0
		mov	_orig1.x,4
		mov	_orig1.y,0
		mov	_orig2.x,5
		mov	_orig2.y,0
		mov	_orig3.x,6
		mov	_orig3.y,0
		mov	_orig4.x,7
		mov	_orig4.y,0
		mov	eax,_frame
		mov	cl,2
		div	cl
		.if	ah==1
			invoke	_InitRotate
			inc	_orig1.y
			inc	_orig2.y
			inc	_orig3.y
			inc	_orig4.y
		.endif
	.endif
	ret

_Initial endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;游戏结束
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_GameOver	proc
	LOCAL	@hWnd
	
	mov	Stop,1
	invoke	MessageBox,NULL,offset lpGameOver,offset AppName,MB_OK
	.while	1
		mov	buf[eax],0
		inc	eax
		.if	eax==240
			.break
		.endif		
	.endw
	invoke	EnableMenuItem,hMenu,ID1_1,MF_ENABLED
	invoke	EnableMenuItem,hMenu,ID1_2,MF_GRAYED
	invoke	EnableMenuItem,hMenu,ID1_4,MF_GRAYED
	invoke	EnableMenuItem,hMenu,ID1_5,MF_GRAYED
	ret

_GameOver endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;开始游戏
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_Replay		proc
	
	mov	PlayFlag,0			;开始游戏置零标志位
	invoke	_Radom
	invoke	_Initial,ebx,ecx
	xor	eax,eax
	.while	1
		mov	buf[eax],0
		inc	eax
		.if	eax==240
			.break
		.endif		
	.endw
	invoke	_To
	invoke	_Radom
	invoke	_Initial,ebx,ecx
	mov	Stop,0
	mov	Copy_Score,1
	ret

_Replay endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;画每一个小方块，一个积木由4个方块组成,_x,_y为左上角的坐标，_Color为方块颜色
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_DrawRect	proc	_hWnd,_hDc,_x,_y,_Color
		
	inc	_x
	inc	_y			;为使相邻的方块不相连在一起,让左上角的x,y值加一
	invoke	CreateSolidBrush,_Color
	invoke	SelectObject,_hDc,eax
	invoke	DeleteObject,eax
	mov	eax,_x
	add	eax,0eh
	mov	ebx,_y
	add	ebx,0eh
	invoke	RoundRect,_hDc,_x,_y,eax,ebx,2,2
	mov	eax,_hDc
	ret

_DrawRect endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;画网格线
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_DrawLine	proc	_hWnd,_hDc
	LOCAL	@stRect:RECT
	
	push	eax
	invoke	CreatePen,PS_SOLID,1,0ffffffh
	invoke	SelectObject,_hDc,eax
	invoke	DeleteObject,eax
	invoke	GetClientRect,_hWnd,addr @stRect
	mov	eax,@stRect.right
	sub	eax,@stRect.left
	mov	ecx,0ch
	div	cl
	and	ax,0ffh
	mov	dwLength,eax
	mov	ebx,@stRect.bottom
	.while	1
		sub	ebx,dwLength
		invoke	MoveToEx,_hDc,@stRect.left,ebx,NULL
		invoke	LineTo,_hDc,@stRect.right,ebx
		.if	ebx<dwLength
			.break
		.endif
	.endw
	mov	ebx,dwLength
	.while	1
		invoke	MoveToEx,_hDc,ebx,@stRect.bottom,NULL
		invoke	LineTo,_hDc,ebx,@stRect.top
		add	ebx,dwLength
		.if	ebx>@stRect.right
			.break
		.endif
	.endw
	pop	eax
	ret

_DrawLine endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;画背景
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_DrawBack	proc	_hWnd,_hDc
	LOCAL	@hDc
	LOCAL	@Color
	
	mov	eax,_hDc
	mov	@hDc,eax
	xor	eax,eax
	.while	1
		push	eax
		.if	byte ptr buf[eax]
			.if	byte ptr buf[eax]==1
				mov	@Color,090c6h
			.elseif	byte ptr buf[eax]==2
				mov	@Color,0ffbb00h
			.elseif	byte ptr buf[eax]==3
				mov	@Color,033ff33h
			.elseif	byte ptr buf[eax]==4
				mov	@Color,0ffffh
			.endif
			mov	cl,20
			div	cl
			movzx	ebx,ah
			movzx	eax,al
			mov	cl,10h
			mul	cl
			mov	edx,eax
			mov	eax,ebx
			mul	cl
			invoke	_DrawRect,_hWnd,@hDc,edx,eax,@Color
			mov	@hDc,eax
		.endif
		pop	eax
		inc	eax
		.if	eax==240
			.break
		.endif
	.endw
	ret

_DrawBack endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_DrawText	proc	_hDc
	LOCAL	@Rect:RECT
	LOCAL	@lpScore[6]:BYTE

	
	xor	esi,esi
	mov	eax,Score				;将分数转成ASCII码输出
	mov	cl,0ah
	.while	1
		div	cl
		add	ah,30h
		mov	byte ptr @lpScore[esi],ah
		mov	ah,0
		inc	esi
		.if	al==0
			.break
		.endif	
	.endw
	dec	esi
	xor	ebx,ebx
	.while	1
		mov	al,byte ptr @lpScore[esi]
		mov	byte ptr lpScore[ebx],al
		inc	ebx
		.if	esi==0
			.break
		.endif
		dec	esi
	.endw
	.if	byte ptr lpScore[ebx-1]!=30h
		mov	byte ptr lpScore[ebx],30h
	.endif
	mov	byte ptr lpScore[ebx+1],0
	mov	@Rect.left,_WIDTH+70
	mov	@Rect.top,150
	mov	@Rect.right,_WIDTH+120
	mov	@Rect.bottom,175
	invoke	DrawText,_hDc,addr lpScore,-1,addr @Rect,DT_SINGLELINE
	mov	@Rect.left,_WIDTH+25
	invoke	DrawText,_hDc,addr _lpScore,-1,addr @Rect,DT_SINGLELINE		;显示分数
	
	mov	@Rect.left,_WIDTH+25
	mov	@Rect.top,180
	mov	@Rect.right,_WIDTH+120
	mov	@Rect.bottom,205
	invoke	DrawText,_hDc,addr szGuanshu,-1,addr @Rect,DT_SINGLELINE
	mov	eax,Copy_Score
	add	eax,30h
	mov	byte ptr [lpScore],al
	mov	byte ptr lpScore[1],0
	mov	@Rect.left,_WIDTH+70
	invoke	DrawText,_hDc,addr lpScore,-1,addr @Rect,DT_SINGLELINE
	ret

_DrawText endp

;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;根据方块位置画积木,先在内存中画图，再一次性复制到屏幕上
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_DrawItem	proc	_hWnd,_hDc
	LOCAL	@hDc
	LOCAL	@MemBitmap
	LOCAL	@stRect:RECT
	LOCAL	@hBrush
	LOCAL	@Color
	
	invoke	GetClientRect,_hWnd,addr @stRect
	invoke	CreateCompatibleDC,_hDc
	mov	@hDc,eax
	invoke	CreateCompatibleBitmap,_hDc,_WIDTH+70h,_HEIGHT
	mov	@MemBitmap,eax
	invoke	SelectObject,@hDc,@MemBitmap
	invoke	CreateSolidBrush,0ffffffh
	mov	@hBrush,eax
	invoke	FillRect,@hDc,addr @stRect,@hBrush
	invoke	DeleteObject,@hBrush
	invoke	CreateSolidBrush,07f4eh
	mov	@hBrush,eax
	mov	@stRect.left,_WIDTH
	mov	@stRect.top,0
	mov	@stRect.right,_WIDTH+70h
	mov	@stRect.bottom,_HEIGHT
	invoke	FillRect,@hDc,addr @stRect,@hBrush
	invoke	DeleteObject,@hBrush
	invoke	_DrawText,@hDc				;画文字
	.if	PlayFlag==1
		jmp	@f
	.endif
;***************************************************************画移动的方块
	.if	Color==1
		mov	@Color,090c6h
	.elseif	Color==2
		mov	@Color,0ffbb00h
	.elseif	Color==3
		mov	@Color,033ff33h
	.elseif	Color==4
		mov	@Color,0ffffh
	.endif
	
	mov	eax,orig1.x
	mov	cl,10h
	mul	cl
	mov	ebx,eax
	mov	eax,orig1.y
	mul	cl
	invoke	_DrawRect,_hWnd,@hDc,ebx,eax,@Color
	mov	@hDc,eax
	mov	eax,orig2.x
	mov	cl,10h
	mul	cl
	mov	ebx,eax
	mov	eax,orig2.y
	mul	cl
	invoke	_DrawRect,_hWnd,@hDc,ebx,eax,@Color
	mov	@hDc,eax
	mov	eax,orig3.x
	mov	cl,10h
	mul	cl
	mov	ebx,eax
	mov	eax,orig3.y
	mul	cl
	invoke	_DrawRect,_hWnd,@hDc,ebx,eax,@Color
	mov	@hDc,eax
	mov	eax,orig4.x
	mov	cl,10h
	mul	cl
	mov	ebx,eax
	mov	eax,orig4.y
	mul	cl
	invoke	_DrawRect,_hWnd,@hDc,ebx,eax,@Color
	mov	@hDc,eax
	
;*****************************************************画下一块将会出现的方块
	.if	InitColor==1
		mov	@Color,090c6h
	.elseif	InitColor==2
		mov	@Color,0ffbb00h
	.elseif	InitColor==3
		mov	@Color,033ff33h
	.elseif	InitColor==4
		mov	@Color,0ffffh
	.endif	
	mov	eax,_orig1.x
	add	eax,0ah
	mov	cl,10h
	mul	cl
	mov	ebx,eax
	mov	eax,_orig1.y
	add	eax,2
	mul	cl
	invoke	_DrawRect,_hWnd,@hDc,ebx,eax,@Color
	mov	@hDc,eax
	mov	eax,_orig2.x
	add	eax,0ah
	mov	cl,10h
	mul	cl
	mov	ebx,eax
	mov	eax,_orig2.y
	add	eax,2
	mul	cl
	invoke	_DrawRect,_hWnd,@hDc,ebx,eax,@Color
	mov	@hDc,eax
	mov	eax,_orig3.x
	add	eax,0ah
	mov	cl,10h
	mul	cl
	mov	ebx,eax
	mov	eax,_orig3.y
	add	eax,2
	mul	cl
	invoke	_DrawRect,_hWnd,@hDc,ebx,eax,@Color
	mov	@hDc,eax
	mov	eax,_orig4.x
	add	eax,0ah
	mov	cl,10h
	mul	cl
	mov	ebx,eax
	mov	eax,_orig4.y
	add	eax,2
	mul	cl
	invoke	_DrawRect,_hWnd,@hDc,ebx,eax,@Color
	mov	@hDc,eax
;************************************************画背景，既已经落下的方块
@@:	invoke	_DrawBack,_hWnd,@hDc		
;************************************************把图象拷贝到屏幕	
	invoke	BitBlt,_hDc,0,0,_WIDTH+70h,_HEIGHT,@hDc,0,0,SRCCOPY
	invoke	DeleteObject,@MemBitmap
	invoke	DeleteDC,@hDc
	ret

_DrawItem endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;方块下落，将y左标加一
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_Down		proc
	
	
	inc	orig1.y
	inc	orig2.y
	inc	orig3.y
	inc	orig4.y
	invoke	_IsMove			;判断是否可以移动
	.if	eax==0			;若不能移动的话将坐标还原
		dec	ebx
		dec	ecx
		dec	edx
		dec	esi
		mov	eax,Color
		mov	byte ptr buf[ebx],al
		mov	byte ptr buf[ecx],al
		mov	byte ptr buf[edx],al
		mov	byte ptr buf[esi],al
		invoke	_Distroy
		.if	orig1.y<=1||orig2.y<=1||orig3.y<=1||orig4.y<=1
			invoke	_GameOver
		.else
			invoke	_To
			invoke	_Radom
			invoke	_Initial,ebx,ecx
		.endif
		xor	eax,eax
	.else
		mov	eax,1
	.endif
	ret

_Down endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;右移方块，将各个小方块的x坐标加一
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_right	proc
	
	inc	orig1.x
	inc	orig2.x
	inc	orig3.x
	inc	orig4.x
	invoke	_IsMove			;判断是否可以移动
	.if	eax==0			;若不能移动的话将坐标还原
		dec	orig1.x
		dec	orig2.x
		dec	orig3.x
		dec	orig4.x
	.endif
	ret

_right endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;左移方块，将各个小方块的x坐标减一
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_left	proc

	
	
	dec	orig1.x
	dec	orig2.x
	dec	orig3.x
	dec	orig4.x
	invoke	_IsMove			;判断是否可以移动
	.if	eax==0			;若不能移动的话将坐标还原
		inc	orig1.x
		inc	orig2.x
		inc	orig3.x
		inc	orig4.x
	.endif
	ret

_left endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
_ProcWinMain	proc	uses ebx esi edi hWnd,wMsg,wParam,lParam
		LOCAL	@stPs:PAINTSTRUCT
		LOCAL	@hDc

	
		mov	eax,wMsg
		.if	eax==WM_PAINT
			invoke	BeginPaint,hWnd,addr @stPs			
			invoke	_DrawItem,hWnd,eax					
			invoke	EndPaint,hWnd,addr @stPs
		.elseif	eax==WM_DESTROY
			invoke PostQuitMessage,NULL
			invoke	KillTimer,hWnd,ID_TIMER
			invoke	KillTimer,hWnd,ID_TIMER1			
		.elseif	eax==WM_COMMAND
			mov	eax,wParam
			.if	ax==ID1_1					;开始游戏
				invoke	_Replay
				invoke	SetTimer,hWnd,ID_TIMER1,400,NULL	;设定方块定时下落的速度
				invoke	SetTimer,hWnd,ID_TIMER,100,NULL		;设定定时屏幕刷新的频率
			.elseif	ax==ID1_2					;暂停
				mov	Stop,1
			.elseif	ax==ID1_3					;退出
				invoke PostQuitMessage,NULL
				invoke	KillTimer,hWnd,ID_TIMER
				invoke	KillTimer,hWnd,ID_TIMER1
			.elseif	ax==ID1_4					;恢复
				mov	Stop,0
			.elseif	ax==ID1_5					;重新开始
				invoke	_Replay
				mov	Velocity,400
			.elseif	ax==ID2_1
				invoke	MessageBox,hWnd,offset szHelp,offset szCapHelp,MB_OK
			.endif
		.elseif	Stop==1							;如果暂停的话屏蔽以下所有消息
			invoke DefWindowProc,hWnd,wMsg,wParam,lParam
			ret
;******************************************************************************
;处理定时器消息
;******************************************************************************
		.elseif	eax==WM_TIMER
			mov	eax,wParam
		;**********************************
		;这个定时器消息定时刷新屏幕
		;**********************************
			.if	ax==ID_TIMER
				invoke	InvalidateRect,hWnd,NULL,NULL
		;**********************************
		;这个定时器消息实现方块自动下落
		;**********************************
			.elseif	ax==ID_TIMER1
				invoke	_Down	
		;**********************************
		;这几个定时器消息为按键按下时设定的
		;**********************************				
			.elseif	ax==ID_TIMER2
				invoke	_Down					;收到定时器消息时表示按键是长按不放
			.elseif	ax==ID_TIMER3
				invoke	_left					;收到定时器消息时表示按键是长按不放
			.elseif	ax==ID_TIMER4
				invoke	_right					;收到定时器消息时表示按键是长按不放
			.endif
		.elseif	eax==WM_KEYDOWN
;******************************************************************************
;有键按下时，分别处理不同的按键。在处理VK_KEYDOWN时，分别设定了几个100ms的定时器，
;并在VK_KEYUP中删除这些定时器，这样的话在有键按下但还没抬起之前定时器会发送消息,
;WM_TIME消息中将根据定时器ID号分别处理这些消息，这种做法可以加速方块的移动。
;******************************************************************************
			mov	eax,wParam
			.if	ax==VK_DOWN
				invoke	_Down
				invoke	SetTimer,hWnd,ID_TIMER2,100,NULL	;建立定时器延时100ms
			.elseif	ax==VK_LEFT
				invoke	_left
				invoke	SetTimer,hWnd,ID_TIMER3,100,NULL	;建立定时器延时100ms
			.elseif	ax==VK_RIGHT
				invoke	_right
				invoke	SetTimer,hWnd,ID_TIMER4,100,NULL	;建立定时器延时100ms
			.elseif	ax==VK_UP
				invoke	_rotate
		;****************************
		;按下空格键加速瞬间下落到底
		;****************************
			.elseif	ax==VK_SPACE					
				.while	1
					invoke	_Down
					.if	eax==0
						.break
					.endif
				.endw
			.endif
		.elseif	eax==WM_KEYUP
;******************************************************************************
;删除了按下时设定的定时器
;******************************************************************************
			mov	eax,wParam
			.if	ax==VK_DOWN
				invoke	KillTimer,hWnd,ID_TIMER2		;删除VK_DOWN按下时设定的定时器
			.elseif	ax==VK_LEFT
				invoke	KillTimer,hWnd,ID_TIMER3		;删除VK_LEFT按下时设定的定时器
			.elseif	ax==VK_RIGHT
				invoke	KillTimer,hWnd,ID_TIMER4		;删除VK_RIGHT按下时设定的定时器
			.endif
		.elseif	eax==WM_CREATE
			mov	Score,0	
			mov	PlayFlag,1			;窗口创建时设定开始标志为1
			mov	Velocity,400
			 invoke LoadIcon,hInstance,ID_ICO
			 invoke	SendMessage,hWnd,WM_SETICON,ICON_BIG,eax
		.else
			invoke DefWindowProc,hWnd,wMsg,wParam,lParam     
        		ret 
		.endif
		xor eax,eax 
    		ret 
_ProcWinMain	endp
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
WinMain proc hInst:HINSTANCE,hPrevInst:HINSTANCE,CmdLine:LPSTR,CmdShow:DWORD 
    LOCAL wc:WNDCLASSEX                                            
    LOCAL msg:MSG 
    LOCAL hwnd:HWND	
    
    
    mov   wc.cbSize,SIZEOF WNDCLASSEX                   
    mov   wc.style, CS_HREDRAW or CS_VREDRAW 
    mov   wc.lpfnWndProc, OFFSET _ProcWinMain 
    mov   wc.cbClsExtra,NULL 
    mov   wc.cbWndExtra,NULL 
    push  hInstance 
    pop   wc.hInstance 
    invoke	LoadMenu,hInstance,ID_
    mov	hMenu,eax
    mov   wc.hbrBackground,COLOR_BTNFACE+1
    mov 	wc.lpszMenuName,NULL
    mov   wc.lpszClassName,OFFSET ClassName 
    invoke LoadIcon,hInstance,ID_ICO
    mov   wc.hIcon,eax 
    mov   wc.hIconSm,eax 
    invoke LoadCursor,NULL,IDC_ARROW 
    mov   wc.hCursor,eax 
    invoke RegisterClassEx, addr wc                       
    invoke CreateWindowEx,WS_EX_CLIENTEDGE or WS_EX_WINDOWEDGE,\ 
                ADDR ClassName,\ 
                ADDR AppName,\ 
                WS_MINIMIZEBOX or WS_SYSMENU,\ 
                CW_USEDEFAULT,\ 
                CW_USEDEFAULT,\ 
                132h,\ 
                179h,\ 
                NULL,\ 
                hMenu,\ 
                hInst,\ 
                NULL 
    mov   hwnd,eax 
    invoke ShowWindow, hwnd,CmdShow               
    invoke UpdateWindow, hwnd                                

    .WHILE TRUE                                                       
                invoke GetMessage, ADDR msg,NULL,0,0          
                .BREAK .IF (!eax) 
                invoke TranslateMessage, ADDR msg 
                invoke DispatchMessage, ADDR msg 
   .ENDW 
    mov     eax,msg.wParam                                           
    ret 
WinMain endp 
start:
	invoke GetModuleHandle, NULL          
                                                                      
	mov hInstance,eax 
	invoke WinMain, hInstance,NULL,CommandLine, SW_SHOWDEFAULT       
	invoke ExitProcess, eax
	end start 