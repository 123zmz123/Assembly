矩阵相乘的源程序(包含ASM与C代码) By ninghe(于2003-2-10发表) 

--------------------------------------------------------------------------------
下面是一个C语言写的矩阵相乘的源程序,只要将int a[aX][aY]改成float型的就可以进行32位的实数运算，精度在3.4E-38到3.4E+38。通用性很强。下面时我用汇编语言将这个程序的主要模块实现的源代码，我没有上机尝试过，所以请大家看看实现方法和语法上有没有漏洞。





/*========================C语言源程序==========================================*/

#include

#include

#define aX 1

#define aY 4

#define bX 1

#define bY 4

#define cX 4

#define cY 4



int a[aX][aY];

int b[bX][bY];

int c[cX][cY];



void matrix(int b[][bY],int c[cX][]);

main()

{

int i,j,temp;

clrscr();

printf("Please input int matrix b[%d][%d]\n",bX,bY);

for(i=0;i
for(j=0;j
{

  scanf("%d",&temp);

  b[i][j]=temp;

}

printf("Please input int matrix c[%d][%d]\n",cX,cY);

for(i=0;i
for(j=0;j
{

  scanf("%d",&temp);

  c[i][j]=temp;

}

matrix(b,c);

printf("Now print resource matrix b[%d][%d]=",bX,bY);

for(i=0;i
{

  printf("\n");

  for(j=0;j
  printf("%d ",b[i][j]);

}

printf("\n");

printf("Now print resource matrix c[%d][%d]=",cX,cY);

for(i=0;i
{

  printf("\n");

  for(j=0;j
  printf("%d ",c[i][j]);

}

printf("\n");

printf("Now printm multiply results matrix a[%d][%d]=B*C:",aX,aY);

for(i=0;i
{

  printf("\n");

  for(j=0;j
  printf("%d ",a[i][j]);

}

getch();

return 0;

}

/********************************************************************/

void matrix(int b[][bY],int c[][cY])

{

int i,j,k,temp;

for(i=0;i
for(j=0;j
for(k=0;k 
a[i][j]+=b[i][k]*c[k][j];

}

}

/*========================================================================*/



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

for语句的实现：

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



C语言： 

---------例子-------------

for(i=0;i
for(j=0;j
{

  scanf("%d",&temp);

  c[i][j]=temp;

}

---------------------------





汇编语言：

----------例子-------------

;32位的循环位的for循环：可以循环4294967296次。(2^32＝4294967296、2^16＝65536、2^8=256)



_for    proc

   pushad

   mov   edx,i

d1:   cmp   edx,X

   jc   @F      ;第一个分支i和X比较

   jmp   _wan      ;跳出 

@@:   push   edx

   mov   edx,j

d2:   cmp   edx,Y

   jc   @F      ;第二个分支j和Y比较

   pop   edx 

   inc   edx

   jmp   d1      ;返回第一层比较

@@:   push   edx      ;现在dd ptr [esp+4]=列坐标，dd ptr [esp+8]=行坐标 

   call    _fuzhi      ;这个_fuzhi程序就是C语言当中的scanf("%d",&temp);b[i][j]=temp;

   pop   edx

   inc   edx

   jmp   d2      ;调用子程序后返回第二层比较



_wan:   popad

   ret

_for   endp 

----------------------------



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

二维数组的实现

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



C语言：

------------例子------------

#define aX 1

#define aY 4

#define bX 1

#define bY 4

#define cX 4

#define cY 4



int a[aX][aY];

int b[bX][bY];

int c[cX][cY];

-----------------------------



汇编语言：

-----------------------------

汇编中用一维数组表示，假设4行5列的a[2][1]=5：



         1-----   * * * * *

         2-----   * * * * *

         3-----   * 5 * * *

         4-----   * * * * *

            | | | | |

            1 2 3 4 5

其中5的一维序号为[(3-1)*5+2]-1  ,如果矩阵是按照像C那样的格式排列即以0行0列为头的，可以简写为：元素的行坐标×矩阵的列数＋元素的列坐标；[ebx+esi*4+X*Y]=i*Y+j    这里的XY要带上脚标。（只要知道矩阵的列数就能知道矩阵的行数：X*Y/Y）



比如矩阵a[4][6]－－－－－－[ebx+esi*4+0]==i*aY+j

中的a[2][4]化为一维数组就应为：2×6＋4＝16，即是17号元素。

中的a[1][0]化为一维数组就应为：1×6＋0＝6， 即是7号元素。

比如矩阵b[4][5]－－－－－－[ebx+esi*4+aX*aY]==i*bY+j   ;因为ebx和esi的值没有改动所以+aX*aY

中的b[2][3]化为一维数组就应为：2×5＋3＝13，即是14号元素。

比如矩阵c[5][6]－－－－－－[ebx+esi*4+(aX*aY+bX*bY)]==i*cY+j

中的c[4][1]化为一维数组就应为：4×4＋1＝17，即是18号元素。



---------------------------



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

矩阵求和模块

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



C语言：

----------------------------------

void matrix(int b[][bY],int c[][cY])

{

int i,j,k,temp;

for(i=0;i
for(j=0;j
for(k=0;k 
a[i][j]+=b[i][k]*c[k][j];

}



-----------------------------------

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;汇编语言源程序：;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

      .386

      .modle   flat,stdcall

      option   casemap:none

;=================================================================

      .data



a   dd   24 dup(?)   ;要表示32位的数相乘所以用dd，4行6列的矩阵所以用24个。

b   dd   20 dup(?)   ;b[4][5]

c   dd   30 dup(?)   ;c[5][6]

aX   dd   4      ;矩阵a的行数和列数 

aY   dd   6

bX   dd   4      ;矩阵b的行数和列数

bY   dd   5

cX   dd   5      ;矩阵c的行数和列数 

cY   dd   6



i   dd   0      ;可以不要这3个变量，使用它们是为了和C语言相比较

j   dd   0      ;在本例中不要，在其他程序中可能会用到。

k   dd   0





yuansu   dd   0

;===================================================================== 

      .code

;------------------------------------------

_matrix      proc 

      pushad 

      mov    ebp,esp

      mov   edx,i      ;第一个for循环

   d1:   cmp   edx,aX

      jc   @f

      jmp   _wan

   @@:   push   edx

      mov   edx,j      ;第二个for循环

   d2:   cmp   edx,aY

      jc   @F

      pop   edx

      inc   edx

      jmp   d1

   @@:   push   edx

      mov   edx,k      ;第三个for循环

   d3:   cmp   edx,bY      ;k 
      jc   _&

      jmp   _&&

   _&:   cmp   edx,cX

      jc   @F

   _&&:   pop   edx

      inc   edx

      jmp   d2

   @@:   push   edx      ;   至此3个参数已经分别是：i=dd ptr [esp+12]、(十进制)

               ;   j=dd ptr [esp+8] 、k=dd ptr [esp+4]

      call   _multiplication

      pop   edx

      inc   edx

      jmp   d3



_wan:      popad

      ret 

_matrix      endp

;----------------------------------------------



;_multiplication的主要功能：a[i][j]+=b[i][k]*c[k][j]



_multiplication      proc



         push    ebp      ;注意：i=dd ptr [esp+16]、(十进制)

                  ;   j=dd ptr [esp+12] 、k=dd ptr [esp+8]

                  ; [esp+4]是刚才push进去的堆栈指针值

                  ;只要在子程序中用了push，pop等就要考虑

                  ;堆栈中参数的位置

         mov   ebp,esp



;c[k][j]=k*cY+j

         mov   ebx,offset c

         mov   eax,[ebp+8]

         mul   cY      ;k*cY===eax,edx中的值忽略，

         add   eax,[ebp+12]   ;eax中就装的是：c[k][j]的一维脚标



         mov   eax,[ebx+eax*4]   ;经查表，eax中是：c[k][j]



         mov   yuansu,eax   ;yuansu中是c[k][j]

;b[i][k]=i*bY+k 

         mov   ebx,offset b

         mov   eax,[ebp+16] 

         mul   bY      ;edx的可能值又改变了

         add   eax,[ebp+8]   ;此刻eax＝b[i][k]的一维脚标,强调是‘低位’



         mov   eax,[ebx+eax*4]   ;经查表，eax中是：b[i][k]



;b[i][k]*c[k][j] 

         mul   yuansu      ;eax为b[i][k]*c[k][j]的低位，edx为高位，忽略

                  ;因为其低位不会超过4294967296

                  ;如果有比较大乘积可以安排一个jc判断分支

                  ;还可以考虑用imul，这样矩阵中可以使用负数元素

                  ;但要麻烦些，要考虑edx中的符号问题。





         mov   yuansu,eax   ;yuansu中是：b[i][k]*c[k][j]的低位，高位忽略



;a[i][j]=i*aY+j

         mov   ebx,offset a

         mov   eax,[ebp+16]

         mul   aY

         add   eax,[ebp+12]   ;eax=a[i][j]一维脚标

         mov   edi,eax      ;先保存到edi，回放数据时用



         mov   eax,[ebx+eax*4]   ;经查表，eax中是：a[i][j]



;a[i][j]+积 

         add   eax,yuansu   ;eax=a[i][j]+b[i][k]*c[k][j]

;将eax中的值放回数据段

         mov   [ebx+edi*4],eax



         mov    esp,ebp

         pop   ebp      ;还原堆栈指针





         ret

_multiplication      endp






并不是所有的贴子都是原创,此时作者均指发表的人而不是文章的作者,作者会说明是否是转贴 