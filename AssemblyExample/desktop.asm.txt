;该程序功能为创建一个虚拟桌面，可以按CTRL + 1 和 CTRL + 2 在原先的桌面和  ;
;新建桌面之间切换，按CTRL + 3关闭程序；你可以在不同的桌面做不同的事情。   ;
;本代码根据网络上流传的C++代码改编(作者无从考证)，非我独创。              ;
;你可以任意修改，使用此代码。此代码由http://www.aogosoft.com/提供下载     ;
;Author: xiep                                                             ;
;Email : bottlexx@163.com                                                 ;
;Wwb   : http://hi.baidu.com/xiep_                                        ;

            .386
            .model flat,stdcall 
            option casemap:none 
include     windows.inc 
include     kernel32.inc 
include     user32.inc
includelib  kernel32.lib 
includelib  user32.lib 

            .data 
hInstance		dd	0
hWinMain		dd	0
hNewDesktop  	dd	0
hCurrentDesktop dd	0
szNewDesktop   	db  "NewDeskTop",0
szExplorer		db	"explorer",0
szClassName 	db 	"MyClass",0
CTRL1			EQU	0	;0 - 0BFFFh
CTRL2			EQU	1
CTRL3			EQU	2

            .code 
StartExplore proc  
    LOCAL   @stStartInfo :STARTUPINFO
    LOCAL   @stProcessInfo :PROCESS_INFORMATION

    mov     @stStartInfo.cb, SIZEOF STARTUPINFO
    mov     @stStartInfo.lpDesktop, offset szNewDesktop
    invoke  CreateProcess,NULL, addr szExplorer, NULL, NULL, \
    		TRUE, NULL, NULL, NULL, addr @stStartInfo, addr @stProcessInfo
    ret
StartExplore endp

SetDesktop proc         
    invoke  GetCurrentThreadId
    invoke  GetThreadDesktop, eax   
    mov     hCurrentDesktop, eax
    mov     hNewDesktop, 0
    invoke  OpenDesktop, addr szNewDesktop, 0, FALSE, 0   ;检查桌面是否已经存在
    .if     !eax
            invoke CloseDesktop, eax	;存在则先关闭
    .endif
    invoke  CreateDesktop, addr szNewDesktop, NULL, NULL, 0, MAXIMUM_ALLOWED, NULL 
    mov     hNewDesktop, eax   
    .if     eax
        invoke	SetThreadDesktop, hNewDesktop
        invoke  SwitchDesktop, hNewDesktop
        invoke  StartExplore
    .endif    
    ret
SetDesktop endp 

_ProcWinMain proc hWnd, uMsg, wParam, lParam
	mov		eax, uMsg
    .if         eax == WM_CLOSE         
        invoke  SwitchDesktop, hCurrentDesktop
        invoke  CloseDesktop, hNewDesktop
        invoke	UnregisterHotKey, hWnd, CTRL1      
        invoke  UnregisterHotKey, hWnd, CTRL2
        invoke  UnregisterHotKey, hWnd, CTRL3
		invoke	DestroyWindow, hWinMain
		invoke	PostQuitMessage, NULL
    .elseif     eax == WM_CREATE
        invoke	SetWindowPos, hWnd, HWND_TOPMOST, \
        		0, 0, 0, 0, SWP_NOMOVE or SWP_NOSIZE ;窗口置顶
        invoke  RegisterHotKey, hWnd, CTRL1, MOD_CONTROL, 31h ;CTRL + 1
        invoke  RegisterHotKey, hWnd, CTRL2, MOD_CONTROL, 32h ;CTRL + 2
        invoke  RegisterHotKey, hWnd, CTRL3, MOD_CONTROL, 33h ;CTRL + 3
        invoke  SetDesktop
    .elseif     eax == WM_HOTKEY
        .if         wParam == CTRL1
            invoke  SwitchDesktop, hCurrentDesktop    
        .elseif     wParam == CTRL2  
            invoke  SwitchDesktop, hNewDesktop
        .elseif     wParam == CTRL3  
            invoke  SwitchDesktop, hCurrentDesktop
            invoke  PostQuitMessage, NULL         
        .endif
    .else 
        invoke	DefWindowProc, hWnd, uMsg, wParam, lParam
		ret
    .endif  
    xor		eax, eax
    ret
_ProcWinMain endp 

_WinMain 	proc
    local 	@stWndClass:WNDCLASSEX
    local	@stMsg:MSG
    
    invoke	GetModuleHandle, NULL
    mov		hInstance, eax
    invoke	RtlZeroMemory, addr @stWndClass, sizeof @stWndClass
    
    invoke	LoadCursor, 0, IDC_ARROW
    mov		@stWndClass.hCursor, eax
    mov		eax, hInstance
    mov		@stWndClass.hInstance, eax
    mov		@stWndClass.cbSize, sizeof WNDCLASSEX
    mov		@stWndClass.lpfnWndProc, offset _ProcWinMain
    mov		@stWndClass.hbrBackground, COLOR_WINDOW + 1
    mov		@stWndClass.lpszClassName, offset szClassName
    invoke	RegisterClassEx, addr @stWndClass
    invoke	CreateWindowEx, WS_EX_TOOLWINDOW, addr szClassName,\
    		NULL, WS_POPUP or WS_SYSMENU, 0, 0, 0, 0,\
    		NULL, NULL, hInstance, NULL		;创建无标题栏的窗口，这样就不会在任务栏显示了
    mov		hWinMain, eax
    invoke	ShowWindow, hWinMain, SW_SHOWNORMAL
    invoke	UpdateWindow, hWinMain
    .while	TRUE
    		invoke	GetMessage, addr @stMsg, NULL, 0, 0
    		.break	.if	eax == 0
    		invoke	TranslateMessage, addr @stMsg
    		invoke	DispatchMessage, addr @stMsg
    .endw    		
    ret    
_WinMain 	endp

start:
    call	_WinMain
    invoke  ExitProcess, NULL
end        start