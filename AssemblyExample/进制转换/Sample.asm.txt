.586p
.xmm
.model flat,stdcall
option casemap:none

include windows.inc
include user32.inc
include kernel32.inc
include masm32.inc

includelib masm32.lib
includelib user32.lib
includelib kernel32.lib

;FPU有三个舍入模式:最近近似,小近似,大近似,截断尾数.
;分别是模式0,1,2,3
fpuRNDmode macro mode
push eax
push WORD ptr 0
fstcw ss:[esp]
and ss:[esp],WORD ptr 0f3ffh
mov eax,mode
and ax,3
shl ax,10
or ss:[esp],ax
fldcw ss:[esp]
add esp,2
pop eax
endm

fistreg macro reg
push reg
push eax
push DWORD ptr 7FFFFFFFh
ficom DWORD ptr ss:[esp]
fstsw ax
sahf
jb f
fisub DWORD ptr ss:[esp]
fist DWORD ptr ss:[esp+8]
add ss:[esp+8],DWORD ptr 7FFFFFFFh
jmp f1
f:
fist DWORD ptr ss:[esp+8]
f1:
add esp,4
pop eax
pop reg
endm

zeroinit proto :DWORD,:DWORD,:DWORD
memcpyXMM proto :DWORD,:DWORD,:DWORD
HEXtoDEC proto :DWORD,:DWORD,:DWORD,:DWORD
DECtoHEX proto :DWORD,:DWORD,:DWORD,:DWORD
fHEXtoDEC proto :DWORD,:DWORD,:DWORD,:DWORD
fDECtoHEX proto :DWORD,:DWORD,:DWORD,:DWORD
byteHEXdiv proto :DWORD,:DWORD,:DWORD,:DWORD
dwordHEXdiv proto :DWORD,:DWORD,:DWORD,:DWORD
pbyteBCDdiv proto :DWORD,:DWORD,:DWORD,:DWORD
longBCDdiv proto :DWORD,:DWORD,:DWORD,:DWORD
reverse proto :DWORD,:DWORD,:DWORD
datalength proto :DWORD
isZERO proto :DWORD,:DWORD
creadfile proto :DWORD,:DWORD
cwritefile proto :DWORD,:DWORD
new proto C :DWORD,:DWORD
del proto C :DWORD
Frror proto 
GetChar proto :DWORD,:DWORD
stringtohex proto :DWORD,:DWORD,:DWORD
hextostring proto :DWORD,:DWORD,:DWORD
BINsize proto :DWORD,:DWORD

memory struc
start dd 0
handle dd 0
totalsize dd 0
memory ends

.data
request1 db "请输入包含要转换的数据的文件的路径和名称:",0dh,0ah,0
request2 db "请输入输出文件的路经和名称:",0dh,0ah,0
request3 db "请选择要进行哪种转换:1 16->10 ; 2 10->16",0dh,0ah,0
request4 db "请等待...",0dh,0ah,0
hint db "完毕.是否退出?(Y/N)",0dh,0ah,0
error db "文件读写出错,请输入该文件的绝对路径.",0
readfileerr db "读文件错.",0
filewriteerr db "写文件错.",0
file1 db 300 dup(0)
file2 db 300 dup(0)
ans2 db 300 dup(0)
ans3 db 300 dup(0)
conv1 REAL8 1.204119982655 ; log16
conv2 REAL8 0.830482023721 ; 1/log16
asci db 2000 dup (0),0
align 10h
rbcdtf1 db 10h dup(0)
half REAL8 1000000000.0
divisor db 96h,72h,96h,94h,42h,0,0,0,0,0
HEXtoD1 dd 0
HEXtoD2 dd 0
HEXtoD3 dd 0
memo1 memory <>
memo2 memory <>
memo3 memory <>

.code
start:
invoke StdOut,addr request1
invoke GetChar,addr file1,300
invoke StdOut,addr request2
invoke GetChar,addr file2,300
invoke StdOut,addr request3
invoke GetChar,addr ans3,300
invoke StdOut,addr request4

;将数据文件读进内存.
invoke creadfile,addr file1,addr memo1
mov eax,memo1.totalsize
shr eax,1
add eax,1
;将数据文件转换成HEX数据.
invoke new,addr memo2,eax
invoke stringtohex,memo1.start,memo2.start,memo1.totalsize

;进行转换.
cmp ans3,'1'
jnz ish
invoke fHEXtoDEC,memo2.start,0,ecx,0
jmp ish1
ish:
invoke fDECtoHEX,memo2.start,0,ecx,0

;将数据转换成可识别的ASCII字符串并保存.
ish1:
lea ebx,[ecx*2]
invoke new,addr memo3,ebx
invoke hextostring,esi,memo3.start,ecx
invoke cwritefile,addr file2,addr memo3

;释放内存.
invoke GlobalFree,eax
invoke del,addr memo3
invoke del,addr memo2
invoke del,addr memo1
invoke StdOut,addr hint
invoke StdIn,addr ans2,300
cmp ans2,'y'
jz ex
cmp ans2,'Y'
jz ex
jmp start
ex:
invoke ExitProcess,0

;LPHEX:16进制数的地址.LPDEC:输出的10进制数的地址,BLENGTH:16进制数的长度.RLENGTH:你实际需要的输出的10进制
;数的长度.返回值ECX是输出数的长度.
;LPDEC 可以为0,这时候,返回值中,ESI是10进制数的地址.如果数特别长,函数会申请内存,如果LPDEC又为0,那么,返回值
;中EAX就是这块内存的句柄,EDI是这块内存的地址,请用GLOBALFREE,GLOBALFREE将其释放掉.一般情况下,返回的EAX都是0.
;RLENGTH 可以为0,为0时表示你需要全部的结果而不是将它伸缩成RLENGTH的长度.一般情况下,建议将其设成0.
HEXtoDEC proc lpHEX,lpDEC,Blength,Rlength
pushad
mov [esp+28],DWORD ptr 0
mov ecx,Blength
or ecx,ecx
jz HTD1
;计算需要的辅助内存的大小.
;totalsize=sizeofNUM+sizeofNUM*log16+2.
finit
push ecx
fild DWORD ptr [esp]
fmul conv1
fiadd DWORD ptr [esp]
fistp DWORD ptr [esp]
add [esp],DWORD ptr 2
pop ecx
cmp ecx,2000
jb HTD2
;如果RLEGNTH比计算出来的需要的辅助内存的长度还大,就用RLENGTH长度申请辅助内存.
mov edx,Rlength
add edx,Blength
cmp ecx,edx
ja HTD12
mov ecx,edx
HTD12:
mov HEXtoD1,DWORD ptr 1
invoke GlobalAlloc,GMEM_ZEROINIT,ecx
mov HEXtoD2,eax
invoke GlobalLock,eax
mov HEXtoD3,eax
jmp HTD3
HTD2:
mov HEXtoD1,DWORD ptr 0
mov eax,offset asci
mov HEXtoD3,eax
HTD3:
;到这,如果申请了内存,那么,HEXTOD2,HEXTOD3分别是这块内存的句柄和地址.HEXTOD1设为1.
;如果没有申请内存,HEXTOD1是0,HEXTOD3是ASCI缓冲的地址.

;将源数复制进缓冲中(这么做的目的是由于计算过程中要改变数据,复制进来避免改动原始数据).
invoke memcpyXMM,HEXtoD3,lpHEX,Blength
mov edi,HEXtoD3
mov ecx,Blength
mov esi,edi
add edi,ecx
xor edx,edx
;每次将数除以10.当然,有更快的方法,比如,在32位机中,可以一次除以1000000000.
HTD5:
invoke byteHEXdiv,esi,10,esi,ecx
inc edx
invoke BINsize,esi,ecx
jnz HTD8
mov [edi],ah
jmp HTD9
HTD8:
mov bl,ah
invoke byteHEXdiv,esi,10,esi,ecx
inc edx
shl ah,4
add ah,bl
mov [edi],ah
inc edi
invoke BINsize,esi,ecx
jnz HTD5
HTD9:
add esi,Blength
;现在ESI是10进制数的地址.
mov ecx,edx
shr edx,1
and ecx,1
add edx,ecx
mov [esp+24],edx
mov edi,lpDEC
or edi,edi
jnz HTD10
;到这,表明无须转移结果.
mov eax,HEXtoD1
or eax,eax
jz HTD11
;到这,表明缓冲是一块申请的内存.
mov eax,HEXtoD2
mov [esp+28],eax
mov edi,HEXtoD3
mov [esp],edi
HTD11:
;到这,表明缓冲是数据段的ASCI缓冲.
mov [esp+4],esi
jmp HTD1
HTD10:
mov ecx,Rlength
or ecx,ecx
jnz HTD6
mov ecx,edx
HTD6:
cmp ecx,edx
jna HTD7
mov ecx,edx
HTD7:
invoke memcpyXMM,lpDEC,esi,ecx
mov esi,lpDEC
add esi,edx
mov ecx,Rlength
sub ecx,edx
jna HTD4
invoke zeroinit,esi,ecx,1
HTD4:
;将申请的辅助内存释放掉.
cmp HEXtoD1,DWORD ptr 0
jz HTD1
invoke GlobalUnlock,HEXtoD2
invoke GlobalFree,HEXtoD3
HTD1:
finit
popad
ret
HEXtoDEC endp

;使用方法和HEXTODEC一样.
DECtoHEX proc lpDEC,lpHEX,Blength,Rlength
pushad
mov [esp+28],DWORD ptr 0
mov ecx,Blength
or ecx,ecx
jz DTH1
finit
push ecx
fild DWORD ptr [esp]
fmul conv2
fiadd DWORD ptr [esp]
fistp DWORD ptr [esp]
add [esp],DWORD ptr 2
pop ecx
cmp ecx,2000
jb DTH2
mov edx,Rlength
add edx,Blength
cmp ecx,edx
ja DTH12
mov ecx,edx
DTH12:
mov HEXtoD1,DWORD ptr 1
invoke GlobalAlloc,GMEM_ZEROINIT,ecx
mov HEXtoD2,eax
invoke GlobalLock,eax
mov HEXtoD3,eax
jmp DTH3
DTH2:
mov HEXtoD1,DWORD ptr 0
mov eax,offset asci
mov HEXtoD3,eax
DTH3:
invoke memcpyXMM,HEXtoD3,lpDEC,Blength
mov edi,HEXtoD3
mov ecx,Blength
mov esi,edi
add edi,ecx
xor edx,edx
DTH5:
invoke pbyteBCDdiv,esi,10h,esi,ecx
inc edx
invoke BINsize,esi,ecx
jnz DTH8
mov [edi],ah
jmp DTH9
DTH8:
mov bl,ah
invoke pbyteBCDdiv,esi,10h,esi,ecx
inc edx
shl ah,4
add ah,bl
mov [edi],ah
inc edi
invoke BINsize,esi,ecx
jnz DTH5
DTH9:
add esi,Blength
mov ecx,edx
shr edx,1
shl edx,1
sub ecx,edx
shr edx,1
add edx,ecx
mov [esp+24],edx
mov edi,lpHEX
or edi,edi
jnz DTH10
mov eax,HEXtoD1
or eax,eax
jz DTH11
mov eax,HEXtoD2
mov [esp+28],eax
mov edi,HEXtoD3
mov [esp],edi
DTH11:
mov [esp+4],esi
jmp DTH1
DTH10:
mov ecx,Rlength
or ecx,ecx
jnz DTH6
mov ecx,edx
DTH6:
cmp ecx,edx
jna DTH7
mov ecx,edx
DTH7:
invoke memcpyXMM,lpHEX,esi,ecx
mov esi,lpHEX
add esi,edx
mov ecx,Rlength
sub ecx,edx
jna DTH4
invoke zeroinit,esi,ecx,1
DTH4:
cmp HEXtoD1,DWORD ptr 0
jz DTH1
invoke GlobalUnlock,HEXtoD2
invoke GlobalFree,HEXtoD3
DTH1:
finit
popad
ret
DECtoHEX endp

;这个函数是一个HEXTODEC的快速算法,一次将数除以10 00 00 00 00(3B 9A CA 00).
;同时使用了FPU的FBSTP指令.
fHEXtoDEC proc lpHEX,lpDEC,Blength,Rlength
pushad
mov ss:[esp+28],DWORD ptr 0
mov ecx,Blength
or ecx,ecx
jz HTD1
;we will calc the totoal length of memory needed.
finit
push ecx
fild DWORD ptr ss:[esp]
fmul conv1
fiadd DWORD ptr ss:[esp]
fistp DWORD ptr ss:[esp]
add ss:[esp],DWORD ptr 6
pop ecx
cmp ecx,2000
jb HTD2
;if Rlength is larger than ecx,we use Rlength to allocate.
mov edx,Rlength
add edx,Blength
cmp ecx,edx
ja HTD12
mov ecx,edx
HTD12:
mov HEXtoD1,DWORD ptr 1
invoke GlobalAlloc,GMEM_ZEROINIT,ecx
mov HEXtoD2,eax
invoke GlobalLock,eax
mov HEXtoD3,eax
jmp HTD3
HTD2:
mov HEXtoD1,DWORD ptr 0
mov eax,offset asci
mov HEXtoD3,eax
HTD3:
invoke memcpyXMM,HEXtoD3,lpHEX,Blength
mov edi,HEXtoD3
mov ecx,Blength
mov esi,edi
add edi,ecx
xor edx,edx
;每次将HEX数除以10 00 00 00 00,这将产生一个DD型的余数,这个余数从
;十进制上讲应该是四个半BYTE长,所以每次将这个余数用FBSTP转换成BCD的
;时候,要取其中的4.5个BYTE,由于有半个BYTE,我们可以在一次循环中做
;两次除法,这样总的余数长就是9个BYTE了.另外FBSTP将把结果存在RTBCDF1中.
mov ebx,offset rbcdtf1
push DWORD ptr 0
finit
HTD5:
invoke dwordHEXdiv,esi,1000000000,esi,ecx
mov ss:[esp],eax
fild DWORD ptr ss:[esp]
fbstp [ebx]
mov eax,[ebx]
mov [edi],eax
mov al,[ebx+4]
mov [edi+4],al
invoke dwordHEXdiv,esi,1000000000,esi,ecx
mov ss:[esp],eax
fild DWORD ptr ss:[esp]
fbstp [ebx]
mov al,[ebx]
shl al,4
or [edi+4],al
mov eax,[ebx]
and al,0f0h
or al,[ebx+4]
ror eax,4
mov [edi+5],eax
add edi,9
add edx,9
invoke BINsize,esi,ecx
jnz HTD5
;如果在这里结束了循环,那么我们并不能保证这最后出的BCD码的最高位不为零,
;所以,仍须将BCD码压缩下,使最高位是零.
dec edi
HTD14:
cmp [edi],BYTE ptr 0
jnz HTD9
dec edi
dec edx
jmp HTD14
HTD9:
add esp,4
add esi,Blength
mov ss:[esp+24],edx
mov edi,lpDEC
or edi,edi
jnz HTD10
mov eax,HEXtoD1
or eax,eax
jz HTD11
mov eax,HEXtoD2
mov ss:[esp+28],eax
mov edi,HEXtoD3
mov ss:[esp],edi
HTD11:
mov ss:[esp+4],esi
jmp HTD1
HTD10:
mov ecx,Rlength
or ecx,ecx
jnz HTD6
mov ecx,edx
HTD6:
cmp ecx,edx
jna HTD7
mov ecx,edx
HTD7:
invoke memcpyXMM,lpDEC,esi,ecx
mov esi,lpDEC
add esi,edx
mov ecx,Rlength
sub ecx,edx
jna HTD4
invoke zeroinit,esi,ecx,1
HTD4:
cmp HEXtoD1,DWORD ptr 0
jz HTD1
invoke GlobalUnlock,HEXtoD2
invoke GlobalFree,HEXtoD3
HTD1:
finit
popad
ret
fHEXtoDEC endp

fDECtoHEX proc lpDEC,lpHEX,Blength,Rlength
pushad
mov ss:[esp+28],DWORD ptr 0
mov ecx,Blength
or ecx,ecx
jz DTH1
finit
push ecx
fild DWORD ptr ss:[esp]
fmul conv2
fiadd DWORD ptr ss:[esp]
fistp DWORD ptr ss:[esp]
add ss:[esp],DWORD ptr 1
pop ecx
cmp ecx,2000
jb DTH2
mov edx,Rlength
add edx,Blength
cmp ecx,edx
ja DTH12
mov ecx,edx
DTH12:
mov HEXtoD1,DWORD ptr 1
invoke GlobalAlloc,GMEM_ZEROINIT,ecx
mov HEXtoD2,eax
invoke GlobalLock,eax
mov HEXtoD3,eax
jmp DTH3
DTH2:
mov HEXtoD1,DWORD ptr 0
mov eax,offset asci
mov HEXtoD3,eax
DTH3:
invoke memcpyXMM,HEXtoD3,lpDEC,Blength
mov edi,HEXtoD3
mov ecx,Blength
mov esi,edi
add edi,ecx
xor edx,edx
DTH5:
invoke longBCDdiv,esi,addr divisor,esi,ecx
mov [edi],eax
add edi,4
add edx,4
invoke BINsize,esi,ecx
jnz DTH5
DTH9:
cmp [edi-1],BYTE ptr 0
jnz DTH13
dec edx
dec edi
jmp DTH9
DTH13:
add esi,Blength
mov ss:[esp+24],edx
mov edi,lpHEX
or edi,edi
jnz DTH10
mov eax,HEXtoD1
or eax,eax
jz DTH11
mov eax,HEXtoD2
mov ss:[esp+28],eax
mov edi,HEXtoD3
mov ss:[esp],edi
DTH11:
mov ss:[esp+4],esi
jmp DTH1
DTH10:
mov ecx,Rlength
or ecx,ecx
jnz DTH6
mov ecx,edx
DTH6:
cmp ecx,edx
jna DTH7
mov ecx,edx
DTH7:
invoke memcpyXMM,lpHEX,esi,ecx
mov esi,lpHEX
add esi,edx
mov ecx,Rlength
sub ecx,edx
jna DTH4
invoke zeroinit,esi,ecx,1
DTH4:
cmp HEXtoD1,DWORD ptr 0
jz DTH1
invoke GlobalUnlock,HEXtoD2
invoke GlobalFree,HEXtoD3
DTH1:
finit
popad
ret
fDECtoHEX endp

;it uses fbld to do the bcd load and divide.
;the DIFFERENCE from dwordHEXdiv is that lpDivisor
;is a pointer of a 10 bytes packed bcd data.
;return remainder to eax.
;so the packed bcd data in lpDivisor should not be too large,
;and at most it can be 1 00 00 00 00 h,or the ans in
;eax would overflow.
;13:22 2008-2-24 first edited.
;the FPU mode should be set to chop mode.PAT ATTENTION.!!!.
longBCDdiv proc lpDividend,lpDivisor,lpQuotient,Blength
pushfd
pushad
;set fpu to chop mode.
finit
fpuRNDmode 3
mov eax,Blength
or eax,eax
jz l1
mov esi,lpDividend
mov ebx,lpDivisor
mov edi,lpQuotient
;zeroinit rtbcdf1.
fldz
fstp tbyte ptr rbcdtf1
;load divisor(a 10 bytes long packed bcd).
fbld [ebx]
;set pointer to the end of the data(the high bits).
add esi,eax
add edi,eax
mov ebx,9
xor edx,edx
div ebx
mov eax,edx
mov edx,offset rbcdtf1
or eax,eax
jz l2
;cut div1 to be 9 bytes aligned.
;we move the digits to rbcdtf1 for fpu to load.
push eax
sub esi,eax
sub edi,eax
invoke memcpyXMM,edx,esi,eax
;now load the dividend.
fbld [edx]
fst st(2)
fdiv st(0),st(1)
;quotient
fbstp [edx]
;now mov the ecx BYTE quotient to edi.
invoke memcpyXMM,edi,edx,eax
;now calc remainder.
fld st(1)
fprem
pop eax
mov ecx,Blength
sub ecx,eax
jna l1
fldz
fstp tbyte ptr [edx]
jmp l3
l2:
mov ecx,Blength
fldz
;in this kernel loop,we load 4.5 BYTE pbcd each time,
;before loading,st(0) is the remainder left in last time 
;calculation,st(1) is the divisor.
l3:
fmul half
;each time we load 4.5 BYTE pbcd for twice.
sub esi,9
sub edi,9
mov al,[esi+4]
mov bl,[esi+5]
shr al,4
shl bl,4
mov [edx],al
or [edx],bl
mov eax,[esi+5]
shr eax,4
mov [edx+1],eax
fbld [edx]
faddp st(1),st(0)
fst st(2)
fdiv st(0),st(1)
fbstp [edx]
fld st(1)
fprem
;now move the 4.5 BYTE qoutient at edx to edi+4.5.
mov al,[edx]
mov ebx,[edx+1]
and [edi+4],BYTE ptr 0fh
shl al,4
shl ebx,4
shr BYTE ptr [edx],4
or bl,[edx]
or [edi+4],al
mov [edi+5],ebx
;now start to load the next 4.5 byte.
fmul half
mov eax,[esi]
mov bl,[esi+4]
mov [edx],eax
and bl,0fh
mov [edx+4],bl
fbld [edx]
faddp st(1),st(0)
fst st(2)
fdiv st(0),st(1)
fbstp [edx]
fld st(1)
fprem
;now move the 4.5 BYTE qoutient at edx to edi.
mov eax,[edx]
mov bl,[edx+4]
mov [edi],eax
and [edi+4],BYTE ptr 0f0h
or [edi+4],bl
sub ecx,9
ja l3
l1:
;now save the remaider as a 4 BYTE integar to eax.
fistreg eax
mov ss:[esp+28],eax
finit
popad
popfd
ret
longBCDdiv endp

;DIV1/DIV2 -> lpAns,DWORD[Div1-Round(Div1/Div2)]->eax
dwordHEXdiv proc lpDiv1,Div2,lpAns,Blength
pushfd
pushad
xor edx,edx
mov ecx,Blength
or ecx,ecx
jz D1
mov ebx,Div2
or ebx,ebx
jz D1
mov esi,lpDiv1
mov edi,lpAns
add esi,Blength
add edi,Blength
and ecx,3
jz D5
xor eax,eax
push ecx
D4:
mov al,[esi-1]
shl eax,8
dec esi
loop D4
shr eax,8
div ebx
mov ecx,ss:[esp]
sub edi,ecx
D6:
mov [edi],al
shr eax,8
inc edi
loop D6
pop ecx
sub edi,ecx
D5:
sub esi,4
sub edi,4
mov ecx,Blength
shr ecx,2
jz D1
D2:
mov eax,[esi]
sub esi,4
div ebx
mov [edi],eax
sub edi,4
loop D2
D1:
mov ss:[esp+28],edx
popad
popfd
ret
dwordHEXdiv endp

;it Alloc a new memory.
;lpMem POINTS to the memory structer.
new proc C lpMem,nsize
pushfd
pushad
mov esi,lpMem
mov ebx,nsize
or ebx,ebx
jnz n
mov [esi].memory.handle,0
mov [esi].memory.start,0
mov [esi].memory.totalsize,0
jmp e
n:
add ebx,10h
invoke GlobalAlloc,GMEM_ZEROINIT,ebx
mov [esi].memory.handle,eax
invoke GlobalLock,eax
add eax,10h
and eax,0fffffff0h
mov [esi].memory.start,eax
mov eax,nsize
mov [esi].memory.totalsize,eax
invoke zeroinit,[esi].memory.start,[esi].memory.totalsize,1
e:
popad
popfd
ret
new endp

;it frees the memory created by new.
del proc C lpMem
pushfd
pushad
mov esi,lpMem
mov eax,[esi].memory.handle
invoke GlobalFree,eax
mov [esi].memory.handle,0
mov [esi].memory.start,0
mov [esi].memory.totalsize,0
popad
popfd
ret
del endp

cwritefile proc lpFileName,lpMem
local hFile,anum
pushfd
pushad
invoke CreateFile,lpFileName,GENERIC_WRITE,FILE_SHARE_WRITE,NULL,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL
cmp eax,-1
jnz d
invoke Frror
d:
mov hFile,eax
mov esi,lpMem
invoke WriteFile,hFile,[esi].memory.start,[esi].memory.totalsize,addr anum,NULL
invoke CloseHandle,hFile
popad
popfd
ret
cwritefile endp

creadfile proc lpFileName,lpMem
local hFile,anum,fsize
pushfd
pushad
invoke CreateFile,lpFileName,GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL
cmp eax,-1
jnz d
invoke Frror
d:
mov hFile,eax
invoke GetFileSize,hFile,NULL
or eax,eax
jnz d1
invoke Frror
d1:
mov fsize,eax
invoke new,lpMem,fsize
mov esi,lpMem
invoke ReadFile,hFile,[esi].memory.start,fsize,addr anum,NULL
invoke CloseHandle,hFile
popad
popfd
ret
creadfile endp

;it counts the actual length of the binary string in memory.
;return ecx is the length.
;return ZR means the length is 0,NZ,not 0.
BINsize proc lpBIN,Blength
pushad
mov esi,lpBIN
mov edx,Blength
mov ecx,edx
shr ecx,2
jz B5
B1:
cmp [esi+edx-4],DWORD PTR 0
jnz B5
sub edx,4
loop B1
B5:
or edx,edx
jz B3
cmp [esi+edx-1],BYTE ptr 0
jnz B3
dec edx
jmp B5
B3:
mov ss:[esp+24],edx
popad
ret
BINsize endp

;performing the BYTE division of HEX number.Div2 is a DWORD value which is used with its lowest byte.
;return ah is the remainder.
byteHEXdiv proc lpDiv1,Div2,lpAns,Blength
pushfd
pushad
mov ecx,Blength
or ecx,ecx
jz bHEXd1
mov ebx,Div2
or bl,bl
jz bHEXd1
dec ecx
mov esi,lpDiv1
mov edi,lpAns
add esi,ecx
add edi,ecx
inc ecx
xor ah,ah
bHEXd2:
mov al,[esi]
div bl
mov [edi],al
dec esi
dec edi
loop bHEXd2
mov [esp+29],ah
bHEXd1:
popad
popfd
ret
byteHEXdiv endp

;performing the BYTE division of packed_BCD number.Div2 is a DWORD value which is used with only its lowest byte.
;余数保存在AH里.
pbyteBCDdiv proc lpDiv1,Div2,lpAns,Blength
pushfd
pushad
mov ecx,Blength
or ecx,ecx
jz pbBCDd1
mov ebx,Div2
or bl,bl
jz pbBCDd1
dec ecx
mov esi,lpDiv1
mov edi,lpAns
add esi,ecx
add edi,ecx
xor ah,ah
inc ecx
pbBCDd2:
mov al,[esi]
and al,0f0h
shr al,4
aad
xor ah,ah
div bl
shl al,4
mov dl,al

mov al,[esi]
and al,0fh
aad
xor ah,ah
div bl
add al,dl
mov [edi],al
dec esi
dec edi
loop pbBCDd2
mov [esp+29],ah
pbBCDd1:
popad
popfd
ret
pbyteBCDdiv endp

zeroinit proc lpOffset,count,ItemSize
pushfd
pushad
mov ecx,count
or ecx,ecx
jz e
mov eax,ItemSize
mul ecx
or eax,eax
jz e
mov edi,lpOffset
mov ecx,edi
neg ecx
mov edx,eax
xor eax,eax
and ecx,0fh
jz a0
sub edx,ecx
jnb a1
add edx,ecx
mov ecx,edx
xor edx,edx
a1:
rep stosb
or edx,edx
jz e
a0:
mov ecx,edx
shr ecx,7
or ecx,ecx
jz a2
xorps XMM0,XMM0
xorps XMM1,XMM1
xorps XMM2,XMM2
xorps XMM3,XMM3
xorps XMM4,XMM4
xorps XMM5,XMM5
xorps XMM6,XMM6
xorps XMM7,XMM7
a3:
movaps [edi],XMM0
add edi,10h
movaps [edi],XMM1
add edi,10h
movaps [edi],XMM2
add edi,10h
movaps [edi],XMM3
add edi,10h
movaps [edi],XMM4
add edi,10h
movaps [edi],XMM5
add edi,10h
movaps [edi],XMM6
add edi,10h
movaps [edi],XMM7
add edi,10h
loop a3
a2:
mov ecx,edx
and ecx,7fh
jz e
rep stosb
e:
popad
popfd
ret
zeroinit endp

memcpyXMM proc dest,src,nSize
pushfd
pushad
mov ecx,nSize
mov ebx,ecx
and ebx,7fh
shr ecx,7
mov edi,dest
mov esi,src
cmp edi,esi
jz xm1
jb xm2
mov eax,nSize
add esi,eax
add edi,eax
std
xm3:
cmp ecx,1
jb xm4
ja xm31
add ebx,80h
jmp xm4
xm31:
;first mov some bytes to make the memcpy block 10h aligned.
mov eax,esi
and eax,0fh
jz xm5
sub ebx,eax
jnb xm32
add ebx,80h
dec ecx
xm32:
dec esi
dec edi
xchg eax,ecx
rep movsb
inc esi
inc edi
mov ecx,eax
xm5:
movaps XMM0,[esi-10h]
movaps XMM1,[esi-20h]
movaps XMM2,[esi-30h]
movaps XMM3,[esi-40h]
movaps XMM4,[esi-50h]
movaps XMM5,[esi-60h]
movaps XMM6,[esi-70h]
movaps XMM7,[esi-80h]
movups [edi-80h],XMM7
movups [edi-70h],XMM6
movups [edi-60h],XMM5
movups [edi-50h],XMM4
movups [edi-40h],XMM3
movups [edi-30h],XMM2
movups [edi-20h],XMM1
movups [edi-10h],XMM0
sub edi,80h
sub esi,80h
loop xm5
xm4:
or ebx,ebx
jz xm1
mov ecx,ebx
dec esi
dec edi
rep movsb
jmp xm1

xm2:
cmp ecx,1
jb xm6
ja xm34
add ebx,80h
jmp xm6
xm34:
mov eax,esi
and eax,0fh
jz xm7
neg eax
add eax,10h
sub ebx,eax
jnb xm33
add ebx,80h
dec ecx
xm33:
xchg eax,ecx
cld
rep movsb
mov ecx,eax
xm7:
movaps XMM0,[esi]
movaps XMM1,[esi+10h]
movaps XMM2,[esi+20h]
movaps XMM3,[esi+30h]
movaps XMM4,[esi+40h]
movaps XMM5,[esi+50h]
movaps XMM6,[esi+60h]
movaps XMM7,[esi+70h]
movups [edi+70h],XMM7
movups [edi+60h],XMM6
movups [edi+50h],XMM5
movups [edi+40h],XMM4
movups [edi+30h],XMM3
movups [edi+20h],XMM2
movups [edi+10h],XMM1
movups [edi],XMM0
add esi,80h
add edi,80h
loop xm7
xm6:
or ebx,ebx
jz xm1
mov ecx,ebx
rep movsb
xm1:
popad
popfd
ret
memcpyXMM endp

;将一个由ASCII码组成的HEX数(如 '12345FF')转换成HEX数.
;LPHEX是转换后HEX数的地址,LPSTRING是ASCII码数的地址.
;BLEGNTH是ASCII码数的长度.
stringtohex proc lpString,lpHEX,Blength
pushfd
pushad
mov esi,lpString
mov edi,lpHEX
hsgtb0:
mov al,[esi]
call ifdata
jz hsgtb3
cmp al,"+"
jnz hsgtb4
inc esi
jmp hsgtb3
hsgtb4:
cmp al,"-"
jz hsgtb2
mov ecx,0
jmp hsgtbe
hsgtb2:
inc esi
hsgtb3:
mov ecx,Blength
or ecx,ecx
jnz hsgtb8
invoke datalength,esi
hsgtb8:
lea edx,[ecx+1]
shr edx,1
invoke zeroinit,lpHEX,edx,1
add esi,ecx
xor edx,edx
hsgtb5:
sub ecx,2
jb hsgtb6
sub esi,2
mov ax,[esi]
call unascii
push cx
mov cl,4
shl al,cl
pop cx
mov bl,al
mov al,ah
call unascii
add al,bl
mov [edi],al
inc edi
inc edx
jmp hsgtb5
hsgtb6:
add ecx,2
jz hsgtb7
mov al,[esi-1]
call unascii
mov [edi],al
inc edx
hsgtb7:
mov [esp+24],edx
hsgtbe:
popad
popfd
ret
stringtohex endp

;用法可HEXTOSTRING相反.
hextostring proc lpHEX,lpString,Blength
pushfd
pushad
mov ecx,Blength
or ecx,ecx
jz hts1
mov esi,lpHEX
mov edi,lpString
hts2:
mov al,[esi]
call ascii
mov [edi],al
mov [edi+1],bl
add edi,2
inc esi
loop hts2
mov ecx,Blength
shl ecx,1
invoke reverse,lpString,lpString,ecx
hts1:
mov [esp+24],ecx
popad
popfd
ret
hextostring endp

ascii:      ;change digits into ASCII data,bl is ahead of al
push ecx
push ebx
mov bl,al
and bl,0f0h
mov cl,4
shr bl,cl
and al,0fh
cmp al,9
ja H
add al,30h
jmp I
H:
add al,37h
I:
cmp bl,9
ja J
add bl,30h
jmp K
J:
add bl,37h
K:
pop ecx
mov cl,bl
mov bx,cx
pop ecx
ret

unascii:   ;change ascii digits into data,regiser al is used
cmp al,30h
jb P
cmp al,39h
ja Q
sub al,30h
jmp L
Q:
cmp al,41h
jb P
cmp al,46h
ja O
sub al,37h
jmp L
O:
cmp al,61h
jb P
cmp al,66h
ja P
sub al,57h
jmp L
P:
mov al,0ffh
L:
ret

;lpData points to the start of the data.
;return ecx is the length of the data(sign byte not included).
;if it is not a data,return ecx=0.
datalength proc lpData
pushad
xor ecx,ecx
mov esi,lpData
mov al,[esi]
call ifdata
jz dtlne1
cmp al,"+"
jz dtlne2
cmp al,"-"
jz dtlne2
jmp dtlnee
dtlne2:
inc esi
dtlne1:
mov al,[esi]
call ifdata
jnz dtlnee
inc esi
inc ecx
jmp dtlne1
dtlnee:
mov [esp+24],ecx
popad
ret
datalength endp

;It can tell whether al is digits(ASCII,HEX)
;it changes eflages,you can use jz or jnz.
ifdata:
cmp al,30h
jb IDNOT
cmp al,39h
ja IFD1
jmp IDYE
IFD1:
cmp al,41h
jb IDNOT
cmp al,47h
jb IDYE
cmp al,61h
jb IDNOT
cmp al,66h
ja IDNOT
IDYE:
cmp al,al
IDNOT:
ret

;esi POINTS to the source data,edi is the destination to store the reversed data.
;ecx is the length of the data.
reverse proc lpSRC,lpDES,Blength
pushad
mov ecx,Blength
or ecx,ecx
jz ree1
mov esi,lpSRC
mov edx,esi
add edx,ecx
dec edx

mov edi,lpDES
mov ebx,edi
add ebx,ecx
dec ebx

shr ecx,1
mov al,[esi+ecx]
mov [edi+ecx],al
or ecx,ecx
jz ree1
ree:
mov al,[esi]
mov ah,[edx]
mov [ebx],al
mov [edi],ah
inc esi
inc edi
dec ebx
dec edx
loop ree
ree1:
popad
ret
reverse endp

Frror proc
invoke MessageBox,NULL,addr error,NULL,MB_OK
invoke ExitProcess,0
Frror endp

GetChar proc lpChar,Max
pushfd
pushad
invoke StdIn,lpChar,Max
mov ecx,Max
or ecx,ecx
jz e
mov edi,lpChar
mov al,0dh
repnz scasb
mov [edi-1],BYTE ptr 0
e:
popad
popfd
ret
GetChar endp

end start