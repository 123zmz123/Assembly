comment *
    作者：combojiang
    时间：2008-04-01
    用途：在IDT表中找一个空闲位置，添加一个中断门，然后通过DeviceIoControl通知ring3程序。
          在中断门中简单打印输出一句话。本程序仅仅作为演示程序
    联系作者: (QQ)391136515
    网址： http://edu.teamsourcing.com.cn
*

.386
.model flat, stdcall
option casemap:none

include myIntGate.inc
.const
CCOUNTED_UNICODE_STRING "\\Device\\MyIntGate",g_usDeviceName,4
CCOUNTED_UNICODE_STRING "\\??\\MyIntGate",g_usSymbolicLinkName,4
IDT_LIMIT = 256 * 8
GATE_TYPE = 0eeh

.data?
g_myInt dd ?
g_myIntoffset dd ?
g_IsAddMyGate dd ?

.code
;添加中断门
MyIntGateFunction proc
   invoke DbgPrint,$CTA0("MyIntGate calling...\n")
   iretd
MyIntGateFunction endp

;返回中断号
AddMyIntGate proc FuncAddr:DWORD
    push ebx
	push ecx
	sidt [esp-2]
	pop ecx
	
	mov eax,0
	.while eax < IDT_LIMIT
	     lea edx,[ecx+eax]
	     assume edx:ptr GATE
	     test [edx].GTYPE,80h
	    .if ZERO?
	       cli
	       mov ebx,FuncAddr
	       mov [edx].OFFSETL,bx
	       mov [edx].SELECTOR,08h
	       mov [edx].DCOUNT,0
	       mov [edx].GTYPE,GATE_TYPE
	       shr ebx,16
	       mov [edx].OFFSETH,bx   
	       sti  
          .break
	   .endif   
	    assume edx:nothing
	   add eax,8
	.endw
	pop ebx
	mov g_myInt,eax
	ret
AddMyIntGate endp

RemoveMyIntGate proc
	push ebx
	push ecx
	sidt [esp-2]
	pop ecx
	mov eax,g_myIntoffset
	lea edx,[ecx+eax]
	assume edx:ptr GATE
	cli
	mov [edx].OFFSETL,0
	mov [edx].SELECTOR,08h
	mov [edx].DCOUNT,0
	mov [edx].GTYPE,0
	mov [edx].OFFSETH,0 
	sti 
	assume edx:nothing
	pop ebx
	ret

RemoveMyIntGate endp

DispatchControl proc uses esi edi pDeviceObject:PDEVICE_OBJECT,pIrp:PIRP
	mov esi,pIrp
	assume esi:ptr _IRP
	mov [esi].IoStatus.Status,STATUS_UNSUCCESSFUL
	and [esi].IoStatus.Information,0
	
	IoGetCurrentIrpStackLocation esi
	mov edi,eax
	assume edi:ptr IO_STACK_LOCATION
	.if [edi].Parameters.DeviceIoControl.IoControlCode == IOCTL_MYINTGATE && !g_IsAddMyGate
		invoke AddMyIntGate,offset MyIntGateFunction
		mov g_myIntoffset,eax
		xor edx,edx
		cdq
		mov ecx,8
		div ecx
		mov g_myInt,eax
		mov edx,[esi].AssociatedIrp.SystemBuffer
		mov [edx],eax
		
		mov [esi].IoStatus.Status, STATUS_SUCCESS
		mov [esi].IoStatus.Information,4
		mov g_IsAddMyGate,1
	.else
		mov [esi].IoStatus.Status,STATUS_INVALID_DEVICE_REQUEST
	.endif
	
	push [esi].IoStatus.Status
	assume edi:nothing
	assume esi:nothing
	invoke IoCompleteRequest,esi,IO_NO_INCREMENT
	pop eax
	
	ret

DispatchControl endp
DispatchCreateClose proc pDeviceObject:PDEVICE_OBJECT,pIrp:PIRP
   mov eax,pIrp
   assume eax:ptr _IRP
   mov [eax].IoStatus.Status,STATUS_SUCCESS
   and [eax].IoStatus.Information,0
   fastcall IofCompleteRequest,pIrp,IO_NO_INCREMENT
   assume eax:nothing
   mov eax,STATUS_SUCCESS
   ret
DispatchCreateClose endp
DriverUnload proc pDriverObject:PDRIVER_OBJECT
    .if g_IsAddMyGate
	   invoke RemoveMyIntGate
	.endif
	invoke IoDeleteSymbolicLink,addr g_usSymbolicLinkName
	mov eax,pDriverObject
	invoke IoDeleteDevice,(DRIVER_OBJECT PTR[eax]).DeviceObject
	ret

DriverUnload endp


DriverEntry proc pDriverObject:PDRIVER_OBJECT,pusRegistryPath:PUNICODE_STRING
    LOCAL pDeviceObject:PDEVICE_OBJECT
    LOCAL status:NTSTATUS
    
    mov status,STATUS_DEVICE_CONFIGURATION_ERROR
    invoke IoCreateDevice,pDriverObject,0,addr g_usDeviceName,FILE_DEVICE_UNKNOWN,0,FALSE,addr pDeviceObject
    .if eax == STATUS_SUCCESS
        invoke IoCreateSymbolicLink,addr g_usSymbolicLinkName,addr g_usDeviceName
        .if eax == STATUS_SUCCESS
            mov eax,pDriverObject
            assume eax:ptr DRIVER_OBJECT
            mov [eax].MajorFunction[IRP_MJ_CREATE * (sizeof PVOID)],offset DispatchCreateClose
            mov [eax].MajorFunction[IRP_MJ_CLOSE * (sizeof PVOID)],offset DispatchCreateClose
            mov [eax].MajorFunction[IRP_MJ_DEVICE_CONTROL *(sizeof PVOID)],offset DispatchControl
            mov [eax].DriverUnload,offset DriverUnload
            assume eax:nothing
            mov g_IsAddMyGate,0
            mov status,STATUS_SUCCESS
        .else
        	invoke IoDeleteDevice,pDeviceObject
        .endif
    .endif
    mov eax,status
    ret

DriverEntry endp

end DriverEntry
