;********************************************
;Target:
;不同文件间数据实时共享之消息传递法,
;本程序为接收端.
;Author: Lonkil lonkil_at_Gmail.com
;Date: 2008-6-11
;********************************************
.386
.model flat,stdcall
option casemap:none

include windows.inc
include user32.inc
include gdi32.inc
include kernel32.inc
include common.inc

includelib gdi32.lib
includelib user32.lib
includelib kernel32.lib

.data
szTitleName	db  "我是接收端",0
szClassName	db  "Receive dialog",0
szEditClass	db  "EDIT",0
.data?
hInstance	dd  ?
hEditWnd	HWND ?
.const
IDEDIT	equ	1000
.code

;设定指控件字体
_SetFont proc hWnd:HWND
	local lf:LOGFONT
	invoke RtlZeroMemory,addr lf, sizeof LOGFONT
	mov lf.lfHeight,15
	invoke CreateFontIndirect,addr lf
	invoke SendMessage,hWnd,WM_SETFONT,eax,0
	ret
_SetFont endp

;窗口回调函数
_WndProc proc hwnd:HWND,msg:UINT, wParam:WPARAM, lParam:LPARAM
	;local	RecCDS:COPYDATASTRUCT
	mov eax,msg
	.if eax == WM_CREATE
		invoke	CreateWindowEx,0,offset szEditClass, 0,WS_CHILD or WS_VISIBLE or WS_VSCROLL or ES_LEFT or ES_MULTILINE or ES_AUTOVSCROLL, 0, 0, 0, 0, hwnd, IDEDIT, hInstance, 0
		mov	hEditWnd,eax
		invoke _SetFont,eax
	.elseif eax == WM_SETTEXT
		invoke	SendMessage, hEditWnd, EM_SETSEL, -1, -1
		invoke	SendMessage, hEditWnd, EM_REPLACESEL, 0, lParam
	.elseif eax == WM_COPYDATA
		mov	ebx,lParam
		invoke	SendMessage, hEditWnd, EM_SETSEL, -1, -1

		;invoke	SendMessage, hEditWnd, EM_REPLACESEL, 0, [ ebx + COPYDATASTRUCT.lpData ] ; 可有用这种方式定位结构体

		;也可以用这种方式定位结构体
		assume ebx:ptr COPYDATASTRUCT
		invoke	SendMessage, hEditWnd, EM_REPLACESEL, 0, [ ebx ].lpData
		assume ebx:nothing

	.elseif eax == WM_CLOSE
		invoke DestroyWindow,hwnd
		invoke PostQuitMessage,0
	.elseif eax == WM_SIZE
		mov	eax,lParam
		mov	bx,ax
		shr	eax,16
		invoke	MoveWindow, hEditWnd, 1, 1, ebx, eax, TRUE
	.else
		invoke	DefWindowProc,hwnd,msg,wParam,lParam
		ret
	.endif
	xor	eax,eax
	ret
_WndProc endp

;建立窗口包括注册窗口类、建立窗口以及消息传递
_CreateWindow proc
	local wc:WNDCLASS
	local	hWnd:HWND
	local msg:MSG
	
	invoke RtlZeroMemory,addr wc,sizeof wc
	mov wc.style, CS_HREDRAW or CS_VREDRAW
	mov	wc.lpfnWndProc, offset _WndProc
	push hInstance
	pop	wc.hInstance
	mov wc.lpszClassName,offset szClassName
	invoke LoadCursor,0,IDC_ARROW
	mov wc.hCursor,eax
	mov wc.hbrBackground , COLOR_WINDOW	
	
	invoke RegisterClass,addr wc
	invoke GetLastError
	invoke CreateWindowEx,0,offset szClassName,offset szTitleName,WS_OVERLAPPEDWINDOW,0,0,400,300,0,0,hInstance,0
	mov hWnd,eax
	
	invoke ShowWindow,hWnd,SW_SHOWNORMAL
	invoke UpdateWindow,hWnd
	.while TRUE
		invoke GetMessage,addr msg,0,0,0
		.break .if eax == 0
		invoke TranslateMessage,addr msg
		invoke DispatchMessage,addr msg
	.endw
	
	ret	
_CreateWindow endp

start:
  invoke GetModuleHandle,NULL
  mov hInstance,eax;得到应用程序模块句柄
  invoke _CreateWindow
  invoke ExitProcess,NULL
end start