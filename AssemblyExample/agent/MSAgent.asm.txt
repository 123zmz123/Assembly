IFNDEF _MSAgent_
_MSAgent_ 	equ 1

include Agtsvr.inc       ; MS AGENT COM HEADERS...

; CLASS METHOD PROTOS
MSAgent_Init    		PROTO  :DWORD

; --=====================================================================================--
; FUNCTION POINTER PROTOS
; --=====================================================================================--
MSAg_destructorPto	TYPEDEF  PROTO  :DWORD 
MSAg_getAgentPto  	TYPEDEF  PROTO  :DWORD
MSAg_HidePto    	TYPEDEF  PROTO  :DWORD
MSAg_ShowPto    	TYPEDEF  PROTO  :DWORD
MSAg_GesturePto    	TYPEDEF  PROTO  :DWORD, :DWORD
MSAg_SpeakPto    	TYPEDEF  PROTO  :DWORD, :DWORD
MSAg_ReadClipboardPto   TYPEDEF  PROTO  :DWORD, :DWORD

; --=====================================================================================--
; CLASS STRUCTURE
; --=====================================================================================--
CLASS MSAgent, MSAg
      CMETHOD destructor
      CMETHOD getAgent
      CMETHOD Hide
      CMETHOD Show
      CMETHOD Speak
      CMETHOD Gesture
      CMETHOD ReadClipboard
      hAgentObject     dd    ?
      hAgentChar       dd    ?
      hBuf             dd    ?
MSAgent ENDS

		.data
BEGIN_INIT 
      dd offset MSAg_destructor_Funct
      dd offset MSAg_getAgent_Funct
      dd offset MSAg_Hide_Funct
      dd offset MSAg_Show_Funct
      dd offset MSAg_Speak_Funct
      dd offset MSAg_Gesture_Funct
      dd offset MSAg_ReadClipboard_Funct
      dd NULL
      dd NULL
      dd NULL
END_INIT

; MS Agent Com stuff...
CLSID_AgentServer   GUID      sCLSID_AgentServer
IID_IAgentEx        GUID      sIID_IAgentEx
IID_IAgent          GUID      sIID_IAgent
IID_IAgentBalloon   GUID      sIID_IAgentBalloon
IID_IAgentCommands  GUID      sIID_IAgentCommands
     
MSAg_szAcknowledge 				WCHAR	 L(<Acknowledge\0>)
MSAg_szAlert 					WCHAR    L(<Alert\0>)
MSAg_szAnnounce 				WCHAR    L(<Announce\0>)
MSAg_szBlink 					WCHAR    L(<Blink\0>)
MSAg_szConfused 				WCHAR    L(<Confused\0>)
MSAg_szCongratulate 			WCHAR    L(<Congratulate\0>)
MSAg_szCongratulate_2 			WCHAR    L(<Congratulate_2\0>)
MSAg_szDecline 					WCHAR    L(<Decline\0>)
MSAg_szDoMagic1 				WCHAR    L(<DoMagic1\0>)
MSAg_szDoMagic2 				WCHAR    L(<DoMagic2\0>)
MSAg_szDontRecognize 			WCHAR    L(<DontRecognize\0>)
MSAg_szDown     				WCHAR    L(<GestureDown\0>)
MSAg_szExplain 					WCHAR    L(<Explain\0>)
MSAg_szGetAttention 			WCHAR    L(<GetAttention\0>)
MSAg_szGetAttentionContinued 	WCHAR    L(<GetAttentionContinued\0>)
MSAg_szGetAttentionReturn 		WCHAR    L(<GetAttentionReturn\0>)
MSAg_szGreet    				WCHAR    L(<Greet\0>)
MSAg_szHearing_1    			WCHAR    L(<Hearing_1\0>)
MSAg_szHearing_2    			WCHAR    L(<Hearing_2\0>)
MSAg_szHearing_3    			WCHAR    L(<Hearing_3\0>)
MSAg_szHearing_4   				WCHAR    L(<Hearing_4\0>)
MSAg_szHide   					WCHAR    L(<Hide\0>)
MSAg_szIdle1_1   				WCHAR    L(<Idle1_1\0>)
MSAg_szIdle1_2   				WCHAR    L(<Idle1_2\0>)
MSAg_szIdle1_3   				WCHAR    L(<Idle1_3\0>)
MSAg_szIdle1_4   				WCHAR    L(<Idle1_4\0>)
MSAg_szIdle2_1   				WCHAR    L(<Idle2_1\0>)
MSAg_szIdle2_2   				WCHAR    L(<Idle2_2\0>)
MSAg_szIdle3_1   				WCHAR    L(<Idle3_1\0>)
MSAg_szIdle3_2   				WCHAR    L(<Idle3_2\0>)
MSAg_szLeft     				WCHAR    L(<GestureLeft\0>)
MSAg_szLookDown 				WCHAR    L(<LookDown\0>)
MSAg_szLookDownBlink 			WCHAR    L(<LookDownBlink\0>)
MSAg_szLookDownReturn 			WCHAR    L(<LookDownReturn\0>)
MSAg_szLookLeft 				WCHAR    L(<LookLeft\0>)
MSAg_szLookLeftBlink 			WCHAR    L(<LookLeftBlink\0>)
MSAg_szLookLeftReturn 			WCHAR    L(<LookLeftReturn\0>)
MSAg_szLookRight 				WCHAR    L(<LookRight\0>)
MSAg_szLookRightBlink 			WCHAR    L(<LookRightBlink\0>)
MSAg_szLookRightReturn 			WCHAR    L(<LookRightReturn\0>)
MSAg_szLookUp 					WCHAR    L(<LookUp\0>)
MSAg_szLookUpBlink 				WCHAR    L(<LookUpBlink\0>)
MSAg_szLookUpReturn 			WCHAR    L(<LookUpReturn\0>)
MSAg_szMoveDown 				WCHAR    L(<MoveDown\0>)
MSAg_szMoveLeft 				WCHAR    L(<MoveLeft\0>)
MSAg_szMoveRight 				WCHAR    L(<MoveRight\0>)
MSAg_szMoveUp 					WCHAR    L(<MoveUp\0>)
MSAg_szPleased 					WCHAR    L(<Pleased\0>)
MSAg_szProcess 					WCHAR    L(<Process\0>)
MSAg_szProcessing 				WCHAR    L(<Processing\0>)
MSAg_szRead 					WCHAR    L(<Read\0>)
MSAg_szReadContinued 			WCHAR    L(<ReadContinued\0>)
MSAg_szReadReturn 				WCHAR    L(<ReadReturn\0>)
MSAg_szReading 					WCHAR    L(<Reading\0>)
MSAg_szRest     				WCHAR    L(<Restpose\0>)
MSAg_szRestPose 				WCHAR    L(<RestPose\0>)
MSAg_szRight    				WCHAR    L(<GestureRight\0>)
MSAg_szSad 						WCHAR    L(<Sad\0>)
MSAg_szSearch 					WCHAR    L(<Search\0>)
MSAg_szSearching 				WCHAR    L(<Searching\0>)
MSAg_szShow 					WCHAR    L(<Show\0>)
MSAg_szStartListening 			WCHAR    L(<StartListening\0>)
MSAg_szStopListening 			WCHAR    L(<StopListening\0>)
MSAg_szSuggest 					WCHAR    L(<Suggest\0>)
MSAg_szSurprised 				WCHAR    L(<surprised\0>)
MSAg_szThink 					WCHAR    L(<Think\0>)
MSAg_szThinking					WCHAR    L(<Thinking\0>)
MSAg_szUncertain 				WCHAR    L(<Uncertain\0>)
MSAg_szUp       				WCHAR    L(<GestureUp\0>)
MSAg_szWave 					WCHAR    L(<Wave\0>)
MSAg_szWrite 					WCHAR    L(<Write\0>)
MSAg_szWriteContinued			WCHAR    L(<WriteContinued\0>)
MSAg_szWriteReturn 				WCHAR    L(<WriteReturn\0>)
MSAg_szWritting 				WCHAR    L(<Writting\0>)


POS_ACKNOWLEDGE				equ 0
POS_ALERT						equ 1
POS_ANNOUNCE					equ 2
POS_BLINK						equ 3
POS_CONFUSED					equ 4
POS_CONGRATULATE				equ 5
POS_CONGRATULATE_2			equ 6
POS_DECLINE					equ 7
POS_DOMAGIC1					equ 8
POS_DOMAGIC2					equ 9
POS_DONTRECOGNIZE				equ 10
POS_DOWN      				equ 11
POS_EXPLAIN					equ 12
POS_GETATTENTION				equ 13
POS_GETATTENTION_CONTINUED	equ 14
POS_GETATTENTION_RETURN		equ 15
POS_GREET     				equ 16
POS_HEARING1					equ 17
POS_HEARING2					equ 18
POS_HEARING3					equ 19
POS_HEARING4					equ 20
POS_HIDE						equ 21
POS_IDLE1_1					equ 22
POS_IDLE1_2					equ 23
POS_IDLE1_3					equ 24
POS_IDLE1_4					equ 25
POS_IDLE2_1					equ 26
POS_IDLE2_2					equ 27
POS_IDLE3_1					equ 28
POS_IDLE3_2					equ 29
POS_LEFT      				equ 30
POS_LOOKDOWN					equ 31
POS_LOOKDOWNBLINK				equ 32
POS_LOOKDOWNRETURN			equ 33
POS_LOOKLEFT					equ 34
POS_LOOKLEFTBLINK				equ 35
POS_LOOKLEFTRETURN			equ 36
POS_LOOKRIGHT					equ 37
POS_LOOKRIGHTBLINK			equ 38
POS_LOOKRIGHTRETURN			equ 39
POS_LOOKUP					equ 40
POS_LOOKUPBLINK				equ 41
POS_LOOKUPRETURN				equ 42
POS_MOVEDOWN					equ 43
POS_MOVELEFT					equ 44
POS_MOVERIGHT					equ 45
POS_MOVEUP					equ 46
POS_PLEASED					equ 47
POS_PROCESS					equ 48
POS_PROCESSING				equ 49
POS_READ						equ 50
POS_READ_CONTINUED			equ 51
POS_READ_RETURN				equ 52
POS_READING					equ 53
POS_REST      				equ 54
POS_RESTPOSE					equ 55
POS_RIGHT     				equ 56
POS_SAD						equ 57
POS_SEARCH					equ 58
POS_SEARCHING					equ 59
POS_SHOW						equ 60
POS_STARTLISTENING			equ 61
POS_STOPLISTENING				equ 62
POS_SUGGEST					equ 63
POS_SURPRISED 				equ 64
POS_THINK						equ 65
POS_THINKING					equ 66
POS_UNCERTAIN					equ 67
POS_UP        				equ 68
POS_WAVE						equ 69  
POS_WRITE						equ 70
POS_WRITE_CONTINUED			equ 71
POS_WRITE_RETURN				equ 72
POS_WRITTING					equ 73

vPath          VARIANT     <?>

szSpeak	db	"I love you very much",0
szDoMagic2	db	"domagic2",0
		.code
; --=====================================================================================--
; #METHOD:      CONSTRUCTOR (NONE)
;
; #DESCRIPTION: Creates an Agent Instance.  It uses the Default Character (Genie) on
;               your system.  Future versions will suport other characters.  When created
;               the character is NOT shown.  You have to instruct it to be shown before
;               sending any text to speak..
;
;
; #RETURN:      Handle to MSAgent Object (not COM, but MASM32 OOP object)..
; --=====================================================================================--
MSAgent_Init  PROC uses edi esi lpTHIS:DWORD
   LOCAL     IReqID         :DWORD
   LOCAL     IChrID         :DWORD

   SET_CLASS MSAgent
   SetObject edi, MSAgent

     invoke CoInitialize, NULL
     invoke CoCreateInstance, ADDR CLSID_AgentServer, NULL, CLSCTX_SERVER,\
                              addr IID_IAgentEx, addr [edi].hAgentObject
     .IF_SUCCEEDED

        ; Load the Agent Server
        invoke VariantInit, addr vPath
        mov vPath.vt, VT_EMPTY
        coinvoke [edi].hAgentObject, IAgentEx, Load, vPath, addr IChrID, addr IReqID
        .IF_SUCCEEDED
           ; Get the Agent Character
           coinvoke [edi].hAgentObject, IAgentEx, GetCharacter, IChrID, addr [edi].hAgentChar
     
           .IF_SUCCEEDED
               ;LOW BYTE MAJOR LANGUAGE, HIGH BYTE SUB LANGUAGE
      	     coinvoke [edi].hAgentChar, IAgentCharacterEx, SetLanguageID, 0409H ; Canadian English
           .ENDIF
           
           .IF_SUCCEEDED
               ; Make a gmem buffer..
               invoke GlobalAlloc, GMEM_MOVEABLE OR GMEM_DDESHARE, 4096
               mov [edi].hBuf, eax
           .ENDIF
           
        .ENDIF
        
     .ENDIF


   ReleaseObject edi
   ret
MSAgent_Init ENDP

; --=====================================================================================--
; #METHOD:      destructor 
;
; #DESCRIPTION: Destroys the COM instance.  As well as the Global memory allocated with
;               this instance (used for BSTRING conversions)..
;
; #RETURN:      Nothing..
; --=====================================================================================--
MSAg_destructor_Funct  PROC uses edi lpTHIS:DWORD 
   LOCAL  ICharID         :DWORD
   
   SetObject edi, MSAgent
     
     METHOD edi, MSAgent, Hide
     
     .if([edi].hAgentObject)        
        coinvoke [edi].hAgentObject, IAgentEx, Unload, addr ICharID
        invoke CoUninitialize
        
        invoke VariantClear, addr vPath
     .endif
     
     .if([edi].hBuf)
        invoke GlobalFree, [edi].hBuf
     .endif
 
   ReleaseObject edi
   ret
MSAg_destructor_Funct  ENDP

; --=====================================================================================--
; #METHOD:      getAgent (NONE)
;
; #DESCRIPTION: Returns the pIAgentCharacter COM pointer..
;
; #RETURN:      pIAgentCharacter (COM)..
; --=====================================================================================--
MSAg_getAgent_Funct  PROC uses edi lpTHIS:DWORD
   SetObject edi, MSAgent

   mov eax, [edi].hAgentChar

   ReleaseObject edi
   ret
MSAg_getAgent_Funct  ENDP

; --=====================================================================================--
; #METHOD:      Hide ()
;
; #DESCRIPTION: Hides the Character, doing its Hide animation..
;
; #RETURN:      Nothing..
; --=====================================================================================--
MSAg_Hide_Funct  PROC uses edi lpTHIS:DWORD
   LOCAL  IReqID  :DWORD
   SetObject edi, MSAgent
     
     .if( [edi].hAgentChar )
       coinvoke [edi].hAgentChar, IAgentCharacterEx, Hide, FALSE, addr IReqID
     .endif

   ReleaseObject edi
   ret
MSAg_Hide_Funct  ENDP

; --=====================================================================================--
; #METHOD:      Show ()
;
; #DESCRIPTION: Shows the Agent Character, doing its show animation..
;
; #RETURN:      Nothing..
; --=====================================================================================--
MSAg_Show_Funct  PROC uses edi lpTHIS:DWORD
   LOCAL  IReqID  :DWORD
   SetObject edi, MSAgent
     
     .if( [edi].hAgentChar )
       coinvoke [edi].hAgentChar, IAgentCharacterEx, Show, FALSE, addr IReqID
     .endif
     
   ReleaseObject edi
   ret
MSAg_Show_Funct  ENDP

; --=====================================================================================--
; #METHOD:      Gesture(GCODE)
;
; #DESCRIPTION: MultiLine Description.  <b>HTML TAGS ALLOWED</b>.
;               End with double period..
;
; #PARAM:       GCODE      This is the Gesture type.  There currently is the following
;                          gestures animations to choose from:
;<pre><h6>
;</h6></pre>
;
;                          You should return the Agent to the Rest positon or the character
;                          will speak in its last position..
;
; #RETURN:      Nothing..
; --=====================================================================================--
MSAg_Gesture_Funct  PROC uses edi lpTHIS:DWORD, GCODE:DWORD
   LOCAL  IReqID  :DWORD
   LOCAL  TEMP    :DWORD
   LOCAL  TEMP2   :DWORD
   SetObject edi, MSAgent
     
   	.if( [edi].hAgentChar )
        .if (GCODE == POS_ACKNOWLEDGE )
			lea eax, MSAg_szAcknowledge
		.elseif (GCODE == POS_ALERT )
			lea eax, MSAg_szAlert
		.elseif (GCODE == POS_ANNOUNCE )
			lea eax, MSAg_szAnnounce
		.elseif (GCODE == POS_BLINK )
			lea eax, MSAg_szBlink
		.elseif (GCODE == POS_CONFUSED )
			lea eax, MSAg_szConfused
		.elseif (GCODE == POS_CONGRATULATE )
			lea eax, MSAg_szCongratulate
		.elseif (GCODE == POS_CONGRATULATE_2 )
			lea eax, MSAg_szCongratulate_2
		.elseif (GCODE == POS_DECLINE )
			lea eax, MSAg_szDecline
		.elseif (GCODE == POS_DOMAGIC1 )
			lea eax, MSAg_szDoMagic1
		.elseif (GCODE == POS_DOMAGIC2 )
			lea eax, MSAg_szDoMagic2
		.elseif (GCODE == POS_DONTRECOGNIZE )
			lea eax, MSAg_szDontRecognize
		.elseif (GCODE == POS_DOWN )
			lea eax, MSAg_szDown
		.elseif (GCODE == POS_EXPLAIN )
			lea eax, MSAg_szExplain
		.elseif (GCODE == POS_GETATTENTION )
			lea eax, MSAg_szGetAttention
		.elseif (GCODE == POS_GETATTENTION_CONTINUED )
			lea eax, MSAg_szGetAttentionContinued
		.elseif (GCODE == POS_GETATTENTION_RETURN )
			lea eax, MSAg_szGetAttentionReturn
		.elseif (GCODE == POS_GREET )
			lea eax, MSAg_szGreet
		.elseif (GCODE == POS_HEARING1 )
			lea eax, MSAg_szHearing_1
		.elseif (GCODE == POS_HEARING2 )
			lea eax, MSAg_szHearing_2
		.elseif (GCODE == POS_HEARING3 )
			lea eax, MSAg_szHearing_3
		.elseif (GCODE == POS_HEARING4 )
			lea eax, MSAg_szHearing_4
		.elseif (GCODE == POS_HIDE )
			lea eax, MSAg_szHide
		.elseif (GCODE == POS_IDLE1_1 )
			lea eax, MSAg_szIdle1_1
		.elseif (GCODE == POS_IDLE1_2 )
			lea eax, MSAg_szIdle1_2
		.elseif (GCODE == POS_IDLE1_3 )
			lea eax, MSAg_szIdle1_3
		.elseif (GCODE == POS_IDLE1_4 )
			lea eax, MSAg_szIdle1_4
		.elseif (GCODE == POS_IDLE2_1 )
			lea eax, MSAg_szIdle2_1
		.elseif (GCODE == POS_IDLE2_2 )
			lea eax, MSAg_szIdle2_2
		.elseif (GCODE == POS_IDLE3_1 )
			lea eax, MSAg_szIdle3_1
		.elseif (GCODE == POS_IDLE3_2 )
			lea eax, MSAg_szIdle3_2
		.elseif (GCODE == POS_LEFT )
			lea eax, MSAg_szLeft
		.elseif (GCODE == POS_LOOKDOWN )
			lea eax, MSAg_szLookDown
		.elseif (GCODE == POS_LOOKDOWNBLINK )
			lea eax, MSAg_szLookDownBlink
		.elseif (GCODE == POS_LOOKDOWNRETURN )
			lea eax, MSAg_szLookDownReturn
		.elseif (GCODE == POS_LOOKLEFT )
			lea eax, MSAg_szLookLeft
		.elseif (GCODE == POS_LOOKLEFTBLINK )
			lea eax, MSAg_szLookLeftBlink
		.elseif (GCODE == POS_LOOKLEFTRETURN )
			lea eax, MSAg_szLookLeftReturn
		.elseif (GCODE == POS_LOOKRIGHT )
			lea eax, MSAg_szLookRight
		.elseif (GCODE == POS_LOOKRIGHTBLINK )
			lea eax, MSAg_szLookRightBlink
		.elseif (GCODE == POS_LOOKRIGHTRETURN )
			lea eax, MSAg_szLookRightReturn
		.elseif (GCODE == POS_LOOKUP )
			lea eax, MSAg_szLookUp
		.elseif (GCODE == POS_LOOKUPBLINK )
			lea eax, MSAg_szLookUpBlink
		.elseif (GCODE == POS_LOOKUPRETURN )
			lea eax, MSAg_szLookUpReturn
		.elseif (GCODE == POS_MOVEDOWN )
			lea eax, MSAg_szMoveDown
		.elseif (GCODE == POS_MOVELEFT )
			lea eax, MSAg_szMoveLeft
		.elseif (GCODE == POS_MOVERIGHT )
			lea eax, MSAg_szMoveRight
		.elseif (GCODE == POS_MOVEUP )
			lea eax, MSAg_szMoveUp
		.elseif (GCODE == POS_PLEASED )
			lea eax, MSAg_szPleased
		.elseif (GCODE == POS_PROCESS )
			lea eax, MSAg_szProcess
		.elseif (GCODE == POS_PROCESSING )
			lea eax, MSAg_szProcessing
		.elseif (GCODE == POS_READ )
			lea eax, MSAg_szRead
		.elseif (GCODE == POS_READ_CONTINUED )
			lea eax, MSAg_szReadContinued
		.elseif (GCODE == POS_READ_RETURN )
			lea eax, MSAg_szReadReturn
		.elseif (GCODE == POS_READING )
			lea eax, MSAg_szReading
		.elseif (GCODE == POS_REST )
			lea eax, MSAg_szRest
		.elseif (GCODE == POS_RESTPOSE )
			lea eax, MSAg_szRestPose
		.elseif (GCODE == POS_RIGHT )
			lea eax, MSAg_szRight
		.elseif (GCODE == POS_SAD )
			lea eax, MSAg_szSad
		.elseif (GCODE == POS_SEARCH )
			lea eax, MSAg_szSearch
		.elseif (GCODE == POS_SEARCHING )
			lea eax, MSAg_szSearching
		.elseif (GCODE == POS_SHOW )
			lea eax, MSAg_szShow
		.elseif (GCODE == POS_STARTLISTENING )
			lea eax, MSAg_szStartListening
		.elseif (GCODE == POS_STOPLISTENING )
			lea eax, MSAg_szStopListening
		.elseif (GCODE == POS_SUGGEST )
			lea eax, MSAg_szSuggest
		.elseif (GCODE == POS_SURPRISED )
			lea eax, MSAg_szSurprised
		.elseif (GCODE == POS_THINK )
			lea eax, MSAg_szThink
		.elseif (GCODE == POS_THINKING )
			lea eax, MSAg_szThinking
		.elseif (GCODE == POS_UNCERTAIN )
			lea eax, MSAg_szUncertain
		.elseif (GCODE == POS_UP )
			lea eax, MSAg_szUp
		.elseif (GCODE == POS_WAVE )
			lea eax, MSAg_szWave
		.elseif (GCODE == POS_WRITE )
			lea eax, MSAg_szWrite
		.elseif (GCODE == POS_WRITE_CONTINUED )
			lea eax, MSAg_szWriteContinued
		.elseif (GCODE == POS_WRITE_RETURN )
			lea eax, MSAg_szWriteReturn
		.elseif (GCODE == POS_WRITTING )
			lea eax, MSAg_szWritting
        	.endif
        	mov TEMP, eax
        
        	invoke SysAllocString, TEMP
        	mov TEMP2, eax
        	coinvoke [edi].hAgentChar, IAgentCharacterEx, Play, TEMP2,  addr IReqID 
        	invoke SysFreeString, TEMP2    
     	.endif
     
	ReleaseObject edi
   	ret
MSAg_Gesture_Funct  ENDP

; --=====================================================================================--
; #METHOD:      Speak (lpText)
;
; #DESCRIPTION: Speaks the ASCII text found in the lpText parameter.  Up to 2Kb is reserved
;               in any one speaking session. 4Kb for UNICODE -> 2Kb of ASCII. NOTE: The
;               character must be shown before speaking or nothing will happen..
;
; #PARAM:       lpText     This is the pointer to the text to be said..
;
; #RETURN:      Nothing..
; --=====================================================================================--
MSAg_Speak_Funct  PROC uses edi lpTHIS:DWORD, lpAsciiText:DWORD
   LOCAL TEMP    :DWORD
   LOCAL TEMP2   :DWORD
   LOCAL IReqID  :DWORD
   SetObject edi, MSAgent
        
     .if( [edi].hBuf )
                        
        ; Lock the buffer memory (4Kb)
        invoke GlobalLock, [edi].hBuf
        mov TEMP, eax
        
        Ascii2Unicode TEMP, lpAsciiText, 4096
        invoke SysAllocString, TEMP
        mov TEMP2, eax
        coinvoke [edi].hAgentChar, IAgentCharacterEx, Speak, TEMP2, NULL, addr IReqID 
        invoke SysFreeString, TEMP2    
        invoke GlobalUnlock, TEMP
     .endif

   ReleaseObject edi
   ret
MSAg_Speak_Funct  ENDP

; --=====================================================================================--
; #METHOD:      ReadClipboard(hWin)
;
; #DESCRIPTION: Reads the contents of the clipboard. NOTE: The
;               character must be shown before speaking or nothing will happen..
;
; #PARAM:       hWin    The handle of the owner window the clipboard should be opended to.
;
; #RETURN:      True if Read.  Flase if not..
; --=====================================================================================--
MSAg_ReadClipboard_Funct  PROC uses edi lpTHIS:DWORD, hWind:DWORD
   LOCAL TEMP    :DWORD
   LOCAL TEMP2   :DWORD
   LOCAL IReqID  :DWORD
   SetObject edi, MSAgent
        
   invoke OpenClipboard, hWind
   .if( eax )
        invoke Beep, NULL, NULL
        invoke GetClipboardData, CF_TEXT
        METHOD edi, MSAgent, Speak, eax
        invoke CloseClipboard
        invoke EmptyClipboard
        mov eax, TRUE
   .endif

   ReleaseObject edi
   ret
MSAg_ReadClipboard_Funct  ENDP

ENDIF