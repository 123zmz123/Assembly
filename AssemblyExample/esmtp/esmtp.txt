			.386
			.model flat, stdcall
			option casemap:none
include			windows.inc
include			kernel32.inc
include			user32.inc
include			wsock32.inc
include			masm32.inc
include			macros.asm
includelib		kernel32.lib
includelib		user32.lib
includelib		wsock32.lib
includelib		masm32.lib

IDC_STATIC		equ	-1
DLG_MAIN		equ	101
IDC_EDIT_SRV		equ	1002
IDC_EDIT_USER		equ	1003
IDC_EDIT_PWD		equ	1004
IDC_EDIT_FROM		equ	1005
IDC_BUTTON_SEND		equ	1006
IDC_EDIT_TO		equ	1007
IDC_EDIT_SUBJ		equ	1008
IDC_EDIT_CONT		equ	1009

			.data
hInstance		dd	?
hWinMain		dd	?
hSocket			dd	?
wsadata			WSADATA		<>
sin			sockaddr_in	<>
szRcvBuffer		db	200 dup(0)
szSend			db	10240 dup(0)
szBuffer1		db	10240 dup(0)
szBuffer2		db	10240 dup(0)
szHelo			db	"EHLO Local",13,10,0
szAuth			db	"AUTH LOGIN",13,10,0
szUsername		db	"%s",13,10,0
szPassword		db	"%s",13,10,0
szMailFrom		db	"MAIL FROM:<%s>",13,10,0
szRcptTo		db	"RCPT TO:<%s>",13,10,0
szData			db	"DATA",13,10,0
szFrom			db	"From:%s",13,10,0
szTo			db	"TO:%s",13,10,0
szSubject		db	"SUBJECT:%s",13,10,0
szReplyTo		db	"Reply-TO:%s",13,10,0
szNull			db	13,10,0
szContent		db	"%s",13,10,0
szDot			db	".",13,10,0
szQuit			db	"QUIT",13,10,0

szSer			db	"smtp.163.com",0
szT			db	"bottlexx@163.com",0
szSub			db	"你好",0
;;Base64字符表
base64_alphabet		db	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="

			.code
;**********************************************************
;函数功能：进行Base64编码，引自老罗的缤纷天地《用汇编语言编写ESMTP邮件发送程序》
;入口参数：
;	source			=	传入的字符串
;	sourcelen		=	传入的字符串的长度
;出口参数：
;	destination		=	返回的编码
;**********************************************************
Base64Encode	proc	uses ebx edi esi source, destination, sourcelen
	mov  esi, source
	mov  edi, destination
@@base64loop:
	xor eax, eax
	.if sourcelen == 1
		lodsb			;source ptr + 1
		mov ecx, 2		;bytes to output = 2
		mov edx, 03D3Dh		;padding = 2 byte
		dec sourcelen		;length - 1
	.elseif sourcelen == 2
		lodsw			;source ptr + 2
		mov ecx, 3		;bytes to output = 3
		mov edx, 03Dh		;padding = 1 byte
		sub sourcelen, 2	;length - 2
	.else
		lodsd
		mov ecx, 4		;bytes to output = 4
		xor edx, edx		;padding = 0 byte
		dec esi			;source ptr + 3 (+4-1)
		sub sourcelen, 3	;length - 3 
	.endif

	xchg al,ah			;flip eax completely
	rol  eax, 16			;can this be done faster
	xchg al,ah

	@@:
	push  eax
	and   eax, 0FC000000h		;get the last 6 high bits
	rol   eax, 6			;rotate them into al

					;get encode character
	mov   al,  byte ptr [offset base64_alphabet + eax]	
	stosb				;write to destination
	pop   eax
	shl   eax, 6			;shift left 6 bits
	dec   ecx
	jnz   @B			;loop

	cmp   sourcelen, 0
	jnz   @@base64loop		;main loop

	mov   eax, edx			;add padding and null terminate
	stosd

	ret
Base64Encode	endp


_ProcDlgMain	proc	hWnd,wMsg,wParam,lParam
	mov	eax,wMsg
	.if	eax == WM_COMMAND
		mov	eax, wParam
		.if	ax == IDC_BUTTON_SEND			
			invoke	WSAStartup, 101h, addr wsadata
			invoke	socket, AF_INET, SOCK_STREAM, 0				
			mov	hSocket, eax
			invoke  RtlZeroMemory,addr sin,sizeof sin
			mov	sin.sin_family, AF_INET
			invoke	htons, 25
			mov	sin.sin_port, ax
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_SRV,addr szSend,sizeof szSend
			invoke	gethostbyname, addr szSend
			.if	eax
				mov	eax, [eax + hostent.h_list]
				mov	eax, [eax]
				mov	eax, [eax]
				mov	sin.sin_addr, eax
			.endif
			;;	建立连接
			invoke	connect, hSocket, addr sin, sizeof sin
			;;	发送“ehlo local”
			invoke	lstrlen,addr szHelo			
			invoke	send, hSocket, addr szHelo, eax, 0
			;;	发送“auth login”
			invoke	lstrlen,addr szAuth			
			invoke	send, hSocket, addr szAuth, eax, 0
			;;	发送用户名
			invoke  RtlZeroMemory,addr szSend,sizeof szSend
			invoke  RtlZeroMemory,addr szBuffer1,sizeof szBuffer1
			invoke  RtlZeroMemory,addr szBuffer2,sizeof szBuffer2
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_USER,addr szBuffer1,sizeof szBuffer1
			invoke	lstrlen,addr szBuffer1
			invoke	Base64Encode,addr szBuffer1,addr szBuffer2,eax
			invoke  wsprintf,addr szSend,addr szUsername,addr szBuffer2
			invoke	lstrlen,addr szSend
			invoke	send, hSocket, addr szSend, eax, 0
			;;	发送密码
			invoke  RtlZeroMemory,addr szSend,sizeof szSend
			invoke  RtlZeroMemory,addr szBuffer1,sizeof szBuffer1
			invoke  RtlZeroMemory,addr szBuffer2,sizeof szBuffer2
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_PWD,addr szBuffer1,sizeof szBuffer1
			invoke	lstrlen,addr szBuffer1
			invoke	Base64Encode,addr szBuffer1,addr szBuffer2,eax
			invoke  wsprintf,addr szSend,addr szPassword,addr szBuffer2
			invoke	lstrlen,addr szSend
			invoke	send, hSocket, addr szSend, eax, 0
			;;	发送“mail from”
			invoke  RtlZeroMemory,addr szSend,sizeof szSend
			invoke  RtlZeroMemory,addr szBuffer1,sizeof szBuffer1
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_FROM,addr szBuffer1,sizeof szBuffer1
			invoke  wsprintf,addr szSend,addr szMailFrom,addr szBuffer1
			invoke	lstrlen,addr szSend
			invoke	send, hSocket, addr szSend,eax, 0
			;;	发送“rcpt to”
			invoke  RtlZeroMemory,addr szSend,sizeof szSend
			invoke  RtlZeroMemory,addr szBuffer1,sizeof szBuffer1
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_TO,addr szBuffer1,sizeof szBuffer1
			invoke  wsprintf,addr szSend,addr szRcptTo,addr szBuffer1
			invoke	lstrlen,addr szSend
			invoke	send, hSocket, addr szSend,eax, 0
			;;	发送“data”
			invoke	lstrlen,addr szData
			invoke	send, hSocket, addr szData, eax, 0
			;;	发送“from”
			invoke  RtlZeroMemory,addr szSend,sizeof szSend
			invoke  RtlZeroMemory,addr szBuffer1,sizeof szBuffer1
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_FROM,addr szBuffer1,sizeof szBuffer1
			invoke  wsprintf,addr szSend,addr szFrom,addr szBuffer1
			invoke	lstrlen,addr szSend
			invoke	send, hSocket, addr szSend,eax, 0
			;;	发送“to”
			invoke  RtlZeroMemory,addr szSend,sizeof szSend
			invoke  RtlZeroMemory,addr szBuffer1,sizeof szBuffer1
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_TO,addr szBuffer1,sizeof szBuffer1
			invoke  wsprintf,addr szSend,addr szTo,addr szBuffer1
			invoke	lstrlen,addr szSend
			invoke	send, hSocket, addr szSend,eax, 0
			;;	发送主题
			invoke  RtlZeroMemory,addr szSend,sizeof szSend
			invoke  RtlZeroMemory,addr szBuffer1,sizeof szBuffer1
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_SUBJ,addr szBuffer1,sizeof szBuffer1
			invoke  wsprintf,addr szSend,addr szSubject,addr szBuffer1
			invoke	lstrlen,addr szSend
			invoke	send, hSocket, addr szSend,eax, 0
			;;	发送"Reply-TO"
			invoke  RtlZeroMemory,addr szSend,sizeof szSend
			invoke  RtlZeroMemory,addr szBuffer1,sizeof szBuffer1
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_FROM,addr szBuffer1,sizeof szBuffer1
			invoke  wsprintf,addr szSend,addr szReplyTo,addr szBuffer1
			invoke	lstrlen,addr szSend
			invoke	send, hSocket, addr szSend,eax, 0			
			;;	发送空行
			invoke	lstrlen,addr szNull
			invoke	send, hSocket, addr szNull,eax, 0
			;;	发送邮件正文
			invoke  RtlZeroMemory,addr szSend,sizeof szSend
			invoke  RtlZeroMemory,addr szBuffer1,sizeof szBuffer1
			invoke	GetDlgItemText,hWinMain,IDC_EDIT_CONT,addr szBuffer1,sizeof szBuffer1
			invoke  wsprintf,addr szSend,addr szContent,addr szBuffer1
			invoke	lstrlen,addr szSend
			invoke	send, hSocket, addr szSend,eax, 0
			;;	发送“.”
			invoke	lstrlen,addr szDot
			invoke	send, hSocket, addr szDot, eax, 0
			;;	发送“quit”
			invoke	lstrlen,addr szQuit
			invoke	send, hSocket, addr szQuit, eax, 0	
			;;	断开连接
			invoke	closesocket, hSocket
			invoke	WSACleanup
			invoke	MessageBox,hWinMain,CTXT("发送成功！"),CTXT("提示"),0
		.endif		
	.elseif	eax == WM_INITDIALOG
		push	hWnd
		pop	hWinMain
		invoke	SetDlgItemText,hWinMain,IDC_EDIT_SRV,addr szSer
		invoke	SetDlgItemText,hWinMain,IDC_EDIT_TO,addr szT
		invoke	SetDlgItemText,hWinMain,IDC_EDIT_SUBJ,addr szSub
		invoke	SetDlgItemText,hWinMain,IDC_EDIT_CONT,addr szSub
		invoke  SendDlgItemMessage,hWinMain,IDC_EDIT_CONT,EM_LIMITTEXT,10200,NULL
	.elseif	eax ==	WM_CLOSE
		invoke	EndDialog,hWnd,NULL
	.else
		mov	eax,FALSE
		ret
	.endif
	mov	eax,TRUE
	ret
_ProcDlgMain endp

start:
	invoke	GetModuleHandle, NULL
	mov	hInstance, eax
	invoke	DialogBoxParam,hInstance,DLG_MAIN,0,offset _ProcDlgMain,0
	invoke	ExitProcess, eax
end	start