;----------------
;编译模式="EXE"
;----------------
.386
.Model Flat, StdCall
Option Casemap :None
;---------------------------------------------------------------------------
;引用INC与LIB请不要包含路径
Include windows.inc
Include user32.inc
Include kernel32.inc

IncludeLib user32.lib
IncludeLib kernel32.lib
include gdi32.inc
includelib gdi32.lib


include libc.inc
includelib msvcrt.lib
;---------------------------------------------------------------------------
include macro.asm

;使用INVOKE方式调用过程需要声明
WinMain PROTO :DWORD,:DWORD,:DWORD,:DWORD
WndProc PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnCreate PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnClose PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnCommand PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnCancel PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnOk PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnDblclk PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnFileopen PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnFileexit PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnDestroy PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnSyscommand PROTO :DWORD,:DWORD,:DWORD,:DWORD
Test_OnMinimize PROTO :DWORD,:DWORD,:DWORD,:DWORD
.const  ;数据段

	msg_main dd WM_CREATE,Test_OnCreate
				dd WM_CLOSE,Test_OnClose
				dd WM_COMMAND,Test_OnCommand
				dd WM_SYSCOMMAND,Test_OnSyscommand
				dd WM_DESTROY,Test_OnDestroy
	msg_main_count=($-msg_main)/8

	msg_command dd IDOK,Test_OnOk
					dd IDCANCEL,Test_OnCancel
					dd LBN_DBLCLK shl 16 or 1000,Test_OnDblclk  ;在列表框上的双击通知命令
					dd 40001,Test_OnFileopen               ;菜单命令
					dd 40001 or 1 shl 16,Test_OnFileopen   ;按下菜单快捷键(如Ctrl+O),高字为1
					dd 40002,Test_OnFileexit
	msg_command_count=($-msg_command)/8

	msg_syscommand dd SC_MINIMIZE,Test_OnMinimize
	msg_syscommand_count=($-msg_syscommand)/8


;全局变量
.DATA
	szWindowsName DB "http://aogo.yeah.net",0
	szClassName db "WinASM_Class",0



.data?
	hInstance dd ?
;===========================================================================

;代码开始
.CODE
START:
	invoke GetModuleHandle,NULL
	mov hInstance, eax
	invoke GetCommandLine
	invoke WinMain,hInstance,NULL,eax,SW_SHOWDEFAULT
	invoke ExitProcess,0
;---------------------------------------------------------------------------

WinMain proc hInst,hPrevInst,CmdLine,CmdShow
; 声明过程变量(局部)
	LOCAL wc   :WNDCLASSEX
	LOCAL msg  :MSG
	local hWnd :HWND,hAc
	;---------------------
	invoke RtlZeroMemory,addr wc.cbSize,sizeof wc
	mov wc.cbSize,sizeof WNDCLASSEX
	mov wc.style,CS_HREDRAW or CS_VREDRAW or CS_BYTEALIGNWINDOW
	mov wc.lpfnWndProc,offset WndProc
	m2m wc.hInstance,hInstance
	mov wc.hbrBackground,COLOR_BTNFACE+1
	mov wc.lpszMenuName,101
	mov wc.lpszClassName,offset szClassName
	invoke LoadIcon,hInst,100					;这一行是在资源文件中加载ID为100的图标做为窗体的图标
	mov wc.hIcon,eax
	invoke LoadCursor,NULL,IDC_ARROW
	mov wc.hCursor,        eax
	invoke LoadAccelerators,hInstance,101
	mov hAc,eax
	invoke RegisterClassEx, ADDR wc
	invoke CreateWindowEx,NULL,addr szClassName,addr szWindowsName,WS_OVERLAPPEDWINDOW,\
		200,200,500,300,\ ;left,top,width,height
		NULL,NULL,hInstance,NULL ;hWndParent,hMenu(or ID),hInstance,lpParam
	mov hWnd,eax
	invoke ShowWindow,hWnd,SW_SHOWNORMAL
	invoke UpdateWindow,hWnd
	.while TRUE 
		invoke GetMessage,addr msg,NULL,0,0
		.break .if eax==0
		invoke TranslateAccelerator,hWnd,hAc,addr msg
		.if eax==0
			invoke TranslateMessage, addr msg
			invoke DispatchMessage, addr msg
		.endif
	.endw
mov eax,msg.wParam
ret
WinMain endp
;=====================================================================

WndProc proc hWnd,uMsg,wParam,lParam
	BEGINMESSAGE msg_main,msg_main_count
	;^---省略第三个参数，默认取dword ptr [ebp+12],所以你不必在乎过程的参数的变量名称
	invoke DefWindowProc,hWnd,uMsg,wParam,lParam
	ret
WndProc endp
;=====================================================================
Test_OnCreate proc hWnd,uMsg,wParam,lParam
	invoke MessageBox,hWnd,ctext("Test_OnCreate"),0,0
	invoke CreateWindowEx,WS_EX_CLIENTEDGE,ctext("ListBox"),NULL,LBS_NOTIFY or WS_VISIBLE or WS_CHILD ,0,0,200,100,hWnd,1000,hInstance,NULL
	invoke SendDlgItemMessage,hWnd,1000,LB_ADDSTRING ,0,ctext("双击这里测试1")
	invoke SendDlgItemMessage,hWnd,1000,LB_ADDSTRING ,0,ctext("双击这里测试2")
	invoke CreateWindowEx,NULL,ctext("Button"),ctext("OK"),WS_VISIBLE or WS_CHILD,0,150,100,20,hWnd,IDOK ,hInstance,NULL 
	invoke CreateWindowEx,NULL,ctext("Button"),ctext("Cancel"),WS_VISIBLE or WS_CHILD,	110,150,100,20,hWnd,IDCANCEL ,hInstance,NULL
	return FALSE 
Test_OnCreate endp
;=====================================================================
Test_OnClose proc hWnd,uMsg,wParam,lParam
	invoke MessageBox,hWnd,ctext("Test_OnClose\n确定要退出吗?"),0,MB_YESNO 
	.if eax==IDYES 
		invoke DestroyWindow,hWnd
	.endif
	return FALSE
Test_OnClose endp
;=====================================================================
Test_OnCommand proc hWnd,uMsg,wParam,lParam
	BEGINMESSAGE msg_command,,wParam
	;^--省略第二个参数，宏会自动取一个名为msg_command_count的常量的值
	;你必须确保有msg_command_count这个常量!!
	;在这里，我们要根据wParam中包含的ID值决定处理方向(下面的SysCommand也是一样)
	return FALSE
Test_OnCommand endp
;=====================================================================

Test_OnCancel proc hWnd,uMsg,wParam,lParam
	invoke MessageBox,hWnd,ctext("Test_OnCancel"),0,0
	invoke SendMessage,hWnd,WM_CLOSE ,0,0
	return FALSE
Test_OnCancel endp
;=====================================================================
Test_OnOk proc hWnd,uMsg,wParam,lParam
	invoke MessageBox,hWnd,ctext("Test_OnOk"),0,0
	invoke SendMessage,hWnd,WM_CLOSE ,0,0
	return FALSE
Test_OnOk endp
;=====================================================================
Test_OnDblclk proc hWnd,uMsg,wParam,lParam
local buf[255]:BYTE 
	invoke SendMessage,lParam,LB_GETCURSEL ,0,0 ;根据句柄
	lea edx,buf
	invoke SendDlgItemMessage,hWnd,1000,LB_GETTEXT ,eax,edx ;根据ID
	invoke MessageBox,hWnd,addr buf,0,0
	return FALSE
Test_OnDblclk endp
;=====================================================================
Test_OnFileopen proc hWnd,uMsg,wParam,lParam
	invoke MessageBox,hWnd,ctext("Test_OnFileopen"),0,0
	return FALSE
Test_OnFileopen endp
;=====================================================================
Test_OnFileexit proc hWnd,uMsg,wParam,lParam
	invoke MessageBox,hWnd,ctext("Test_OnFileexit"),0,0
	invoke DestroyWindow,hWnd
	return FALSE
Test_OnFileexit endp
;=====================================================================
Test_OnDestroy proc hWnd,uMsg,wParam,lParam
	invoke PostQuitMessage,NULL
	return FALSE
Test_OnDestroy endp
;=====================================================================
Test_OnSyscommand proc hWnd,uMsg,wParam,lParam
	BEGINMESSAGE msg_syscommand,,wParam
	invoke DefWindowProc,hWnd,uMsg,wParam,lParam 
	;^--WM_SYSCOMMAND中没有处理的消息必须让窗体处理，不可像WM_COMMAND中一样返回0
	ret
Test_OnSyscommand endp
;==================================================================
Test_OnMinimize proc hWnd,uMsg,wParam,lParam
	invoke MessageBox,hWnd,ctext("Test_OnMinimize\n确定要最小化吗？"),0,MB_OKCANCEL 
	.if eax==IDOK 
		invoke DefWindowProc,hWnd,uMsg,wParam,lParam
		ret
	.else
		return FALSE  
	.endif
Test_OnMinimize endp
;=====================================================================
END START