; ###########################################################################
;
;                         Support macros for MASM32
;
; ###########################################################################

;  -----------------------------------------------------
;   Macros for declaring named floating point variables
;  -----------------------------------------------------
@datenow@  textequ <!'20>,@SubStr(<%@Date>,7,2),<年>,@SubStr(<%@Date>,1,2),<月>,@SubStr(<%@Date>,4,2),<日 > ,@Time,<!'>
@homepage@ textequ <!'http://www.kbadboy.com!'>
@email@    textequ <!'k_badboy@hotmail.com!'>
@qq@       textequ <!'178527496!'>
@me@       textequ <!'鬼龙之舞!'>
@filepath@ textequ <!'>,@FileCur,<!'>
@filename@ textequ <!'>,@FileName,<!'>
@line@     textequ <!'>,%@Line,<!'>

Zero macro _var,_size
	ifb <_size>
		_size=sizeof _var
	endif
	invoke RtlZeroMemory,addr _var,_size
	endm

IIF macro c,n1,n2
	.if c
		mov eax,n1
	.else
		mov eax,n2
	.endif
	endm

;===============================================================
;返回
return macro n
	ifb <n>
		ret
	elseif n eq 0
		xor eax,eax
		ret
	elseif n eq 1
		xor eax,eax
		inc eax
		ret
	elseif n eq -1
		xor eax,eax
		dec eax
		ret
	else
		mov eax,n
		ret
	endif
	endm

jeaxz macro _label
	test eax,eax
	jz _label
	endm

jeaxnz macro _label
	test eax,eax
	jnz _label
	endm
;=====================================================================
unicode macro text:VARARG 
local j1,j2,txt,_aa,var,f1
local pos
   .data
      txt SUBSTR <text>,2,@SizeStr(<text>)-2
      f1 SUBSTR <text>,1,1
      var db 0
      pos=1
      :next1
      j1 SUBSTR txt,pos,1
      ifidn j1,<\>
         pos=pos+1
         j2 SUBSTR txt,pos,1
         ifidni j2 ,<n>
            db 13,0,10,0  ;;;
         elseifidni j2,<txt>
            db 9,0  ;;;
         elseifidn j2,<\>
            db '\',0 
         elseifidn j2,<0>
            db 0,0
			else
				tmp textequ %@Line
				%echo  unicode宏:不可识别的转义符 ( 第 tmp 行 )
				.err
				exitm <0>
         endif
      else
         _aa textequ < []!"!'!>!<!!1234567890-=qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM,./\~@#$%^&*()_+{}:?|;>
         if @InStr(1,<%_aa>,<%j1>)
            tmp textequ f1,j1,f1
            db tmp,0
         else
				tmp textequ %@Line
            %echo unicode宏:不支持中文 ( 第 tmp 行 )
            .err 
            db 0,0
            .code
            exitm <0>
            ;tmp textequ <!'>,j1,<!'>
            ;db tmp
            ;pos=pos+1
            ;j1 SUBSTR txt,pos,1
            ;tmp textequ <!'>,j1,<!'>
            ;db tmp
         endif
      endif
      pos=pos+1
      if pos LE @SizeStr(<%txt>)
         goto next1
      endif
      db 0 ,0
      .code
      exitm< offset var+1>
endm
UNICODE equ <unicode>
;================================================================
ctext macro text:VARARG
local tmp,pos,var
local j1,j2,txt,f1
   .data
   ife @InStr(1,<text>,<\>) ;没有用到转义符号，不用任何转换
      var db text,0
      .code
      exitm <offset var>
   else
      f1 SUBSTR <text>,1,1
      txt SUBSTR <text>,2,@SizeStr(<text>)-2
      var db 0
      pos=1
      :next1
      j1 SUBSTR txt,pos,1
      ifidn j1,<\>
         pos=pos+1
         j2 SUBSTR txt,pos,1
         ifidni j2 ,<n> ;\n
            db 13,10 
         elseifidni j2,<txt> ;\t
            db 9 
         elseifidn j2,<\> ;\\
            db '\' 
         elseifidn j2,<0> ;\0
            db 0
			else
				tmp textequ %@Line
				%echo  ctext宏:不可识别的转义符 ( 第 tmp 行 )
				.err
				.code
				exitm <0>
         endif
      else
         tmp textequ f1,j1,f1
         db tmp ;;; 
      endif
      pos=pos+1
      if pos LE @SizeStr(<%txt>)
         goto next1
      endif
      db 0 ;;;
      .code
      exitm< offset var+1>
   endif
   endm

_T equ < ctext >

    ; ----------------------------------------------
    ; This set of macros were written by Greg Falen
    ; ----------------------------------------------
    ; Switch/Case emulation
    ; ----------------------
    $casflg equ <>
    $casvar equ <>
    $casstk equ <>
    
    switch macro _var:req, _reg:=<eax>
        mov _reg, _var
        $casstk catstr <_reg>, <#>, $casflg, <#>, $casstk
        $casvar equ _reg
        $casflg equ <0>         ;; 0 = emit an .if, 1 an .elseif
    endm
    
    case macro _args:vararg     ;; like Pascal: case id1. id4 .. id8, lparam, ...
                                ;; does an or (case1 || case2 || case3...)
      $cas textequ <>
      irp $v, <_args>         ;; for each case
          t@ instr <$v>, <..> ;; range ?
          if t@               ;; yes
              $LB substr <$v>, 1, t@-1                  ;; lbound = left portion
              $LB catstr <(>, $casvar, <!>=>, $LB, <)>  ;; ($casvar >= lbound)
              $UB substr <$v>, t@+2                     ;; ubound = right portion
              $UB catstr <(>, $casvar, <!<=>, $UB, <)>  ;; ($casvar <= ubound)
              $t catstr <(>, $LB, <&&> , $UB,<)>        ;; (($casvar >= $lb) && ($casvar <= $ub))
          else    ;; no, it's a value (var/const)
              $t catstr <(>, $casvar, <==>, <$v>, <)>   ;; ($casvar == value)
          endif
          $cas catstr <|| >, $t, $cas                   ;; or this case w/ others
      endm
      $cas substr $cas, 3 ;; lose the extra "|| " in front
        ifidn $casflg, <0> ;; 0 = 1'st case
            % .if $cas ;; emit ".if"
        else ;; all others
            % .elseif $cas ;; emit ".elseif"
        endif
        $casflg equ <1> ;; NOT 1'st
    endm
    
    default macro _default:vararg
        .else
        _default
    endm
    
    endsw macro _cmd:vararg
        ifidn $casstk, <>
            .err <Endsw w/o Switch>
        else
            t@ instr $casstk, <#>
            $casvar substr $casstk, 1, t@-1
            $casstk substr $casstk, t@+1
            t@ instr $casstk, <#>
            $casflg substr $casstk, 1, t@-1
            ifidn $casstk, <#>
                $casstk equ <>
            else
                $casstk substr $casstk, t@+1
            endif
            .endif
        endif
    endm

  ; ------------------------------------------
  ; equates for case variation in macro names
  ; ------------------------------------------
    Case equ <case>
    CASE equ <case>
    Switch equ <switch>
    SWITCH equ <switch>
    Endsw equ <endsw>
    EndSw equ <endsw>
    ENDSW equ <endsw>

    ; -------------------------------------------------------------------
    ; The following 2 macros are for limiting the size of a window while
    ; it is being resized. They are to be used in the WM_SIZING message.
    ; -------------------------------------------------------------------
    LimitWindowWidth MACRO wdth
        LOCAL label
        mov eax, lParam
        mov ecx, (RECT PTR [eax]).right
        sub ecx, (RECT PTR [eax]).left
        cmp ecx, wdth
        jg label
      .if wParam == WMSZ_RIGHT || wParam == WMSZ_BOTTOMRIGHT || wParam == WMSZ_TOPRIGHT
        mov ecx, (RECT PTR [eax]).left
        add ecx, wdth
        mov (RECT PTR [eax]).right, ecx
      .elseif wParam == WMSZ_LEFT || wParam == WMSZ_BOTTOMLEFT || wParam == WMSZ_TOPLEFT
        mov ecx, (RECT PTR [eax]).right
        sub ecx, wdth
        mov (RECT PTR [eax]).left, ecx
      .endif
      label:
    ENDM

    LimitWindowHeight MACRO whgt
        LOCAL label
        mov eax, lParam
        mov ecx, (RECT PTR [eax]).bottom
        sub ecx, (RECT PTR [eax]).top
        cmp ecx, whgt
        jg label
      .if wParam == WMSZ_TOP || wParam == WMSZ_TOPLEFT || wParam == WMSZ_TOPRIGHT
        mov ecx, (RECT PTR [eax]).bottom
        sub ecx, whgt
        mov (RECT PTR [eax]).top, ecx
      .elseif wParam == WMSZ_BOTTOM || wParam == WMSZ_BOTTOMLEFT || wParam == WMSZ_BOTTOMRIGHT
        mov ecx, (RECT PTR [eax]).top
        add ecx, whgt
        mov (RECT PTR [eax]).bottom, ecx
      .endif
      label:
    ENDM

dsText MACRO Name, Text:VARARG
.data
  Name db Text,0
.code
ENDM

szText MACRO Name, Text:VARARG
local L1
	jmp L1
	Name:
	db Text,0
	L1:
	endm


RGB MACRO red, green, blue
  xor eax, eax
  mov al, blue    ; blue
  rol eax, 8
  mov al, green   ; green
  rol eax, 8
  mov al, red     ; red
ENDM

Pcall MACRO name:REQ,items:VARARG
  LOCAL arg
  FOR arg,<items>
	 push arg
  ENDM
	 call name
ENDM

Ccall MACRO name:REQ,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12, \
                     p13,p14,p15,p16,p17,p18,p19,p20,p21,p22

    FOR arg,<p22,p21,p20,p19,p18,p17,p16,p15,p14,p13,\
             p12,p11,p10,p9,p8,p7,p6,p5,p4,p3,p2,p1>
      IFNB <arg>    ;; If not blank
        push arg    ;; push parameter
      ENDIF
    ENDM

    call name       ;; call the procedure

ENDM


m2m macro n,m
	push m
	pop n
	endm

;========================================================
__alloc macro @size
	invoke GlobalAlloc,GPTR ,@size
	endm
__free macro @lpMem
	ifnb <@lpMem>
		push @lpMem
	endif
	call GlobalFree
	endm
;========================================================
;制作字符串数组
;用法示例:
; StrArray mystring,'ASM|C++|OK'
; invoke MessageBox,0,mystring[0],mystring[4],0
; 对话框的文字及标题分别是 ASM 和 C++

StrArray macro name:REQ,_str:VARARG 
	local p1,p2
	local L,kk
	local quot,text_noquot,i,j
	local a
   quot SUBSTR <_str> ,1,1 ;第一个字符是单引号还是双引号

	text_noquot SUBSTR <_str>,2,@SizeStr(<_str>)-2;a为去掉左右的引号后的内容
	t=0
	p1=1
	.data
		db 0
:next

	p2 INSTR p1,text_noquot,<|>
	if p2 NE 0
		a SUBSTR text_noquot,p1,p2-p1
		p1=p2+1
		a CATSTR quot,a,quot
		j textequ <name>,%t
		t=t+1
		j=$
		db a,0
		goto next
	endif
	a SUBSTR text_noquot,p1
	a CATSTR quot,a,quot
	j textequ <name>,%t
	j=$
	db a,0
	i=1
	j textequ <name>,<0>
	name dd j
	
:next1
	if i LE t
		j textequ <name>,%i
		dd j
		i=i+1
		goto next1
	endif
	.code
	endm

_wsprintf macro p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22
local _addr,_offset
		p=0
		;反向压栈
		FOR arg,<p22,p21,p20,p19,p18,p17,p16,p15,p14,p13, p12,p11,p10,p9,p8,p7,p6,p5,p4,p3,p2,p1>
			IFNB <arg>    ;; If not blank
				if @SizeStr(<arg>) GT 5
					_addr   SUBSTR <arg>,1,5
				else
					_addr textequ <>
				endif
				if @SizeStr(<arg>) GT 7
					_offset SUBSTR <arg>,1,7
				else
					_offset textequ <>
				endif
				ifidni _addr,<addr > ;addr[空格]
					_addr SUBSTR <arg>,6
					lea eax,_addr
					push eax
				elseifidni _addr,<addr	>;addr[TAB]
					_addr SUBSTR <arg>,6
					lea eax,_addr
					push eax
				elseifidni _offset,<offset >
					push arg
				elseifidni _offset,<offset	>
					push arg
				elseif (opattr(arg)) and 00010000y ;寄存器
					if @SizeStr(<arg>) eq 3 ;32位寄存器
						ifidni <arg>,<eax>
							%echo ======你使用了eax这个寄存器，可能会产生附作用!!=====
						endif
						push arg
					else
						movzx eax,arg
						push eax
					endif
				elseif sizeof arg EQ 4 ;32位变量
					push arg
				else
					movzx eax,arg
					push eax 
				endif
				p=p+4
			ENDIF
		ENDM
		call wsprintf
		add esp,p
		endm

BEGINMESSAGE macro __msgtable,__msgcount,_umsg:=<DWORD ptr [ebp+12]>
local _count1
	ifb <__msgcount>
		_count1 textequ <__msgtable>,<_count>
	else
		_count1 = __msgcount
	endif
	xor eax,eax
	.while eax<_count1
		mov edx, _umsg
		.if edx==DWORD ptr __msgtable[eax*8]
			push  DWORD ptr [ebp+20]
			push  DWORD ptr [ebp+16]
			push  DWORD ptr [ebp+12]
			push  DWORD ptr [ebp+08]
			call  DWORD ptr __msgtable[eax*8+4]
			ret
		.endif
		inc eax
	.endw
endm
