;快速排序
;作者:永夜的极光
;时间:2007-11-15

;程序运行结果:
;Please input data(0<data<=255)
;Divide with any char except 0~9:
;15 100 50 105 205 120 30 200
;Befor quick sort:15,100,50,105,205,120,30,200
;After quick sort:15,30,50,100,105,120,200,205
;Press any key to exit...

assume ds:data,cs:code,ss:stack
data segment
    inf0 db 0dh,0ah,'Please input data(0<data<=255)',13,10,'Divide with any char except 0~9:',13,10,'$'
    buf db 250,?,250 dup ('0')    ;保存输入数据字符串的缓冲区
    table db 100 dup (0)                ;分析输入的字符串,分解为数字,保存在这个表中
    buf2 db 250 dup (0)            ;将数组转换成可以显示的字符串,每个数字用逗号分隔,保存在这里,方便显示
    len db ?    ;保存数组长度
    inf1 db 0dh,0ah,'Befor quick sort:$'
    inf2 db 0dh,0ah,'After quick sort:$'
    inf4 db 13,10,'Find another num(Y/N)?$'
    inf_end db 13,10,'Press any key to exit...$'
data ends

stack segment
    dw 80 dup (0)
stack ends

code segment
start:
    mov ax,data
    mov ds,ax
    mov es,ax
    mov ax,stack
    mov ss,ax
    call main    ;调用主函数
    
    lea dx,inf_end    ;提示按任意键结束
    mov ax,0900H
    int 21H
    mov ax,0700H
    int 21H
    mov ax,4c00H
    int 21H

main proc near
    
    lea dx,inf0    ;提示输入字符串,并接受输入,存在buf
    mov ah,09H
    int 21H
    lea dx,buf
    mov ah,0aH
    int 21H
    
    call SaveToArray    ;调用函数,处理输入的字符串,整理为数字数组
    lea dx,[inf1]    ;提示语句
    mov ah,09H
    int 21H
    lea si,[table]    ;传递两个参数,调用函数在屏幕上显示数组
    lea di,[buf2]
    call DisplayArray
    lea di,[table]    ;下面5句使di指向数组的最后一个数字
    mov al,[len]
    mov ah,0
    add di,ax
    dec di
    call QuickSort    ;调用快速排序函数,直接整理数组里面的元素
    lea dx,[inf2]        ;提示语句
    mov ah,09H
    int 21H
    lea si,[table]    ;调用函数,显示数组
    lea di,[buf2]
    call DisplayArray
    ret
main endp

;函数功能:对于si和di范围内的数字进行整理,使左边的所有数都不大于右边的任意一个,返回中间位置的指针
;输入参数:si 指向待整理范围的第一个数字,而且也以这个数字作为分界,比这个数字大的放右边,比他小的放左边
;                    di 指向待整理范围的最后一个数字
;输出参数:dx 指向整理后的中间数字,在他左边的数字都不大于他右边的任意一个数字
Partition proc near
    
    push si
    push di
    push ax
    mov al,[si]    ;保存第一个数字,作为比较大小的标准
    dec si    ;si后移,因为下面循环的第一步是si前移,所以要先后移一位,不然会以后第一个数
    inc di    ;di前移,原因如上
    P_l1:
        P_l2:
            dec di    ;di前移,如果[di]比标准数字大,则继续循环,这个循环结束后,di指向从右边开始第一个比标准数字小的数字(如果存在的话)
            cmp [di],al
        ja P_l2
        P_l3:
            inc si    ;si后移,如果[si]比标准数字小,则继续循环,这个循环结束后,di指向从右边开始第一个比标准数字大的数字(如果存在的话)
            cmp [si],al
        jb P_l3
        cmp si,di    ;如果此时si>=di,那么跳出循环,整理结束
        jnb P_s1
        mov ah,[di]    ;这三句是交换[si]和[di]
        xchg [si],ah
        mov [di],ah
    jmp P_l1    ;如果si还是小于di,那么继续开始循环,知道整理结束
    P_s1:
        mov dx,di    ;现在di指向中间元素,赋值个dx,作为返回值
    pop ax
    pop di
    pop si
    ret

Partition endp

;函数功能:对si和di范围内的数组进行排序
;输入参数:si 指向排序范围的第一个数字
;                    di 指向排序范围的最后一个数字
;输出参数:无
QuickSort proc near
    
    push si    ;寄存器入栈,保护现场
    push di
    push dx
    cmp si,di    ;如果si>=di,则直接返回
    jge return
    call Partition    ;调用函数,整理数组,返回值dx,在dx左边的数字都不大于右边的数字
    push di    ;保存di
    mov di,dx    ;对于si和bx范围内的数组,递归调用本函数
    call QuickSort
    pop di    ;取出di
    mov si,dx    ;对dx+1和di范围内的数组,递归调用本函数
    inc si
    call QuickSort
return:
    pop dx    ;寄存器出栈,恢复现场
    pop di
    pop si
    ret

QuickSort endp

;函数功能:把si指向的数组,转变成一个显示的字符串,并输出
;输入参数:si 指向需要处理的数组
;                    di 保存转换后字符串的位置
;输出参数:无(直接在屏幕上显示字符串)
DisplayArray proc near
    
    push ax    ;寄存器入栈
    push bx
    push cx
    push dx
    push di
    push si
    
    mov cl,[len]    ;设置循环次数等于数组元素个数
    mov ch,0
    push di    ;di指向的是存放转换后字符串的地方,这个地方最后赋值给dx,可以显示
    DA_l1:    ;因为每个数字最多为三位,所以下面直接进行处理,不写通用的转换程序
        mov al,[si]    ;当前处理的数字放入ax
        mov ah,0
        mov bl,100    ;16位除8位的除法
        div bl
        cmp al,0    ;如果商为0,跳转到处理余数的部分
        jz DA_s1
        add al,'0'    ;商不为0,则加上30H,放入di指向的位置,di后移
        mov [di],al    
        inc di
        mov al,ah    ;把余数除10,然后ax加上3030H,在用16位长度放入[di]中
        mov ah,0
        mov bl,10
        div bl
        add ax,3030H
        mov word ptr [di],ax
        add di,2
        mov byte ptr [di],','    ;后面加逗号
        inc di    ;di后移
        inc si    ;已经一个数字处理结束,si后移
        jmp DA_s3    ;跳到loop的地方
    DA_s1:
        mov al,ah    ;数字不是三位数,把余数放入al,再除10
        mov ah,0
        mov bl,10
        div bl
        cmp al,0    ;比较商是否为0,如果为0,说明是一位数,跳转到下面
        jz DA_s2
        add al,'0'    ;如果商不为0,则是两位数,商加30H,放入[di],di后移
        mov [di],al
        inc di
    DA_s2:
        add ah,'0'    ;把余数加上30H,放入[di],di后移
        mov [di],ah
        inc di
        mov byte ptr [di],','    ;放入逗号
        inc di
        inc si    ;一个数字处理完成,si后移
    DA_s3:
    loop DA_l1    ;继续处理下一个数字
    dec di    ;现在字符串最后一位是逗号,把这个逗号换成'$'就好了
    mov byte ptr [di],'$'
    pop dx    ;把指向字符串第一个字符的位置出栈,赋值给bx
    mov ah,09H    ;调用中断输出
    int 21H
    pop si    ;寄存器出栈
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    ret

DisplayArray endp

;函数功能:把输入的字符串整理为数组
;输入参数:无
;输出参数:cx 整理出来的数组长度,数组存放在table里面
SaveToArray proc near
    
    mov cl,[buf+1]    ;输入字符串的长度
    mov ch,0
    lea si,[buf+2]    ;指向输入字符串的起始位置
    lea di,[table]    ;指向存放整理后数字的位置
    mov bh,0        ;bh存放的是数组长度
    SaveToArray_l1:
        cmp byte ptr [si],'0'    ;如果这个字符不在0~9范围内,说明上一个数字输入结束
        jb EndOfANum
        cmp byte ptr [si],'9'
        ja EndOfANum
        mov al,[di]    ;如果这个字符是数字字符,那么把原来的值乘10,加上这个数字,减去30H
        mov bl,10
        mul bl
        mov bl,[si]
        sub bl,'0'
        add al,bl
        mov [di],al    ;保存回去
        jmp short continue    ;继续下一次循环
    EndOfANum:    ;上一个数字输入完毕
        cmp byte ptr [di],0    ;如果现在[di]的值为0,那不进行处理,因为已经规定,数字不为0
        jz continue
        inc di    ;如果[di]不为0,则di后移一位
        inc bh    ;数组长度加1
    continue:
        inc si    ;si后移一位
    loop SaveToArray_l1    ;循环
    inc bh    ;最后找到的一个数字,还没有计算进数组长度,所以这里加了1
    mov [len],bh    ;数组长度保存到[len]
    mov cl,bh    ;数组长度保存到cx
    mov ch,0
    ret

SaveToArray endp

code ends
end start




下面c写的快速排序
程序代码:


/*****************************************
函数功能:快速排序
作者:永夜的极光
调用:QuickSort(a,p,r)
其中 a为待排序数组的数组名,p为排序范围的第一个数字的下标,r为最后一个数字的下标
*****************************************/
int Partition(int a[],int p,int r)
{
    int x=a[p],i=p-1,j=r+1;
    while(1)
    {
        do
        {
            j--;
        }while(a[j]>x);
        do
        {
            i++;
        }while(a[i]<x);
        if(i<j)
        {
            int tmp=a[i];
            a[i]=a[j];
            a[j]=tmp;
        }
        else
            return j;
    }
}

void QuickSort(int a[],int p,int r)
{
    if(p<r)
    {
        int q=Partition(a,p,r);
        QuickSort(a,p,q);
        QuickSort(a,q+1,r);
    }
}


