;这个程序是计算(-π/2~π/2)之间正弦值sin(x)的程序,中间没有使用任何专门浮点运算指令,完全使用80x86指令.
;此程序本来是和寒冰大哥聊QQ时,他叫我写的,我用了几个小时才写好,但运算结果不很精确,所以我就优化了一下.
;这个程序难点在于自己用80x86指令进行加、减、乘、除的浮点运算,而不用任何FPU指令.
;在80x87  FPU指令中有现成的计算sin(x)的指令fsin,写这个程序确实没有实用性,但用来训练浮点数的处理是很好的选择.
;制作人:HAM(100%原创)
        .386
        .model flat,stdcall
        option casemap:none
        
include        windows.inc
include        user32.inc
includelib    user32.lib
include        kernel32.inc
includelib    kernel32.lib

        .data
x        dt    1.3;弧度(-π/2~π/2)扩展精度
Result        db    '结果',0
        
        .data?
Res        dt        ?
buff        db    20 dup(?)
        
        .code
;=====================================================================================
_fadd        proc    uses ebx esi edi lpFloatA,lpFloatB,lpResult
        local    FloatAH
        local    FloatAM
        local    FloatAL
        local    FloatBH
        local    FloatBM
        ;扩展精度浮点数加法
        mov    edi,lpFloatB
        mov    esi,lpFloatA
        mov    eax,dword ptr[esi]
        mov    ebx,dword ptr[esi+4]
        mov    ecx,dword ptr[esi+8]
        mov    edx,dword ptr[edi+8]
        mov    esi,dword ptr[edi+4]
        mov    edi,dword ptr[edi]
        and    ecx,0ffffh
        and    edx,0ffffh
        mov    FloatAH,ecx
        mov    FloatBM,esi
        mov    FloatBH,edx
        and    ecx,7fffh        
        and    edx,7fffh
        sub    ecx,edx
        cmp    ecx,64
        jge    @f
        cmp    ecx,-64
        jg    lp
        mov    esi,lpFloatB
        jmp    exit
        @@:
        mov    esi,lpFloatA
        jmp    exit
        lp:
        mov    esi,FloatBM
        test    ecx,ecx
        jz    lp2
        js    @f
        lp1:
        shr    esi,1
        rcr    edi,1
        dec    ecx
        jnz    lp1
        mov    edx,FloatAH
        jmp    lp2
        @@:
        shr    ebx,1
        rcr    eax,1
        inc    ecx
        jnz    @b
        mov    edx,FloatBH
        lp2:
        mov    ecx,FloatAH
        xor    ecx,FloatBH
        test    ecx,8000h
        jz    lp3
        test    FloatAH,8000h
        jz    @f
        xchg    eax,edi
        xchg    ebx,esi
        @@:
        or    edx,8000h
        sub    eax,edi
        sbb    ebx,esi
        jnc    @f
        xor    edx,8000h
        not    eax
        not    ebx
        add    eax,1
        adc    ebx,0
        @@:
        xor    edx,8000h
        mov    esi,eax
        or    esi,ebx
        jz    @f
        jmp    lp5
        lp4:
        shl    eax,1
        rcl    ebx,1
        dec    edx
        lp5:
        test    ebx,ebx
        jns    lp4
        jmp    @f
        lp3:
        add    eax,edi
        adc    ebx,esi
        jnc    @f
        rcr    ebx,1
        rcr    eax,1
        inc    edx
        @@:
        mov    FloatAL,eax
        mov    FloatAM,ebx
        mov    FloatAH,edx
        lea    esi,FloatAL
        exit:
        mov    edi,lpResult
        mov    ecx,10
        rep    movsb
        ret
_fadd        endp

_fsub        proc    uses esi edi lpFloatA,lpFloatB,lpResult
        local    FloatB[10]:byte
        ;扩展精度浮点数减法
        mov    ecx,10
        mov    esi,lpFloatB
        lea    edi,FloatB
        rep    movsb
        sub    edi,10
        xor    byte ptr[edi+9],80h
        invoke    _fadd,lpFloatA,edi,lpResult
        ret
_fsub        endp

_fmul        proc    uses ebx esi edi lpFloatA,lpFloatB,lpResult
        ;扩展精度浮点数乘法
        mov    esi,lpFloatA
        mov    edi,lpFloatB
        mov    ecx,dword ptr[esi+4]
        mov    ebx,dword ptr[esi]
        mov    esi,dword ptr[edi]
        mov    eax,dword ptr[edi]
        mov    edi,dword ptr[edi+4]
        mul    ebx
        mov    eax,ebx
        mov    ebx,edx
        mul    edi
        push    edi
        xor    edi,edi
        add    ebx,eax
        mov    eax,esi
        mov    esi,edi
        adc    esi,edx
        adc    edi,0
        mul    ecx
        add    ebx,eax
        adc    esi,edx
        adc    edi,0
        pop    eax
        mul    ecx
        add    eax,esi
        adc    edx,edi
        mov    esi,lpFloatA
        mov    edi,lpFloatB
        mov    ecx,dword ptr[esi+8]
        mov    esi,dword ptr[edi+8]
        lea    ecx,[ecx+esi-3ffeh]
        jmp    lp
        @@:
        shl    ebx,1
        rcl    eax,1
        rcl    edx,1
        dec    ecx
        lp:
        test    edx,edx
        jns    @b
        shl    ebx,1
        adc    eax,0
        adc    edx,0
        jnc    @f
        rcr    edx,1
        rcr    eax,1
        inc    ecx
        @@:
        mov    edi,lpResult
        mov    dword ptr[edi],eax
        mov    dword ptr[edi+4],edx
        mov    word ptr[edi+8],cx
        ret
_fmul        endp

_fdiv        proc    uses ebx esi edi lpFloatA,lpFloatB,lpResult
        local    DivisorH
        local    DivisorL
        ;扩展精度浮点数除法
        mov    edi,lpFloatB
        mov    esi,lpFloatA
        mov    eax,dword ptr[edi]
        mov    edx,dword ptr[edi+4]
        mov    edi,dword ptr[esi]
        mov    esi,dword ptr[esi+4]
        mov    DivisorL,eax
        mov    DivisorH,edx
        mov    ecx,64
        xor    eax,eax
        xor    ebx,ebx
        xor    edx,edx
        lp:
        stc
        rcl    eax,1
        rcl    edx,1
        sub    edi,DivisorL
        sbb    esi,DivisorH
        sbb    ebx,0
        jnc    @f
        add    edi,DivisorL
        adc    esi,DivisorH
        xor    ebx,ebx
        dec    eax
        @@:
        shl    edi,1
        rcl    esi,1
        rcl    ebx,1
        dec    ecx
        jnz    lp
        mov    esi,lpFloatA
        mov    edi,lpFloatB
        mov    esi,dword ptr[esi+8]
        mov    edi,dword ptr[edi+8]
        xor    edi,8000h
        neg    edi
        lea    ecx,[esi+edi-4001h]
        jmp    lp1
        @@:
        shl    eax,1
        rcl    edx,1
        dec    ecx
        lp1:
        test    edx,edx
        jns    @b
        mov    edi,lpResult
        mov    dword ptr[edi],eax
        mov    dword ptr[edi+4],edx
        mov    word ptr[edi+8],cx
        ret
_fdiv        endp

_int2ft        proc    uses ebx esi edi lpInt,lpResult
        ;将12字节的无符号整数转换为扩展精度浮点数
        mov    esi,lpInt
        mov    edi,lpResult
        mov    eax,dword ptr[esi]
        mov    ecx,dword ptr[esi]
        mov    ebx,dword ptr[esi+4]
        mov    edx,dword ptr[esi+8]
        or    ecx,ebx
        or    ecx,edx
        jz    @f
        mov    ecx,405eh
        jmp    lp
        lp1:
        shl    eax,1
        rcl    ebx,1
        rcl    edx,1
        dec    ecx
        lp:
        test    edx,edx
        jns    lp1
        jmp    @f
        test    eax,eax
        jns    @f
        add    ebx,1
        adc    edx,0
        jnc    @f
        rcr    edx,1
        rcr    ebx,1
        inc    ecx
        @@:
        mov    dword ptr[edi],ebx
        mov    dword ptr[edi+4],edx
        mov    word ptr[edi+8],cx
        ret
_int2ft        endp

_fsin        proc    uses ebx esi edi lpSin,lpResult
        ;计算sin(x),x∈[-π/2,π/2]
        local    Prog[3]:dword
        local    xx[10]:byte
        local    xxx[10]:byte
        local    Fprog[10]:byte
        mov    esi,lpSin
        mov    edi,lpResult
        mov    eax,dword ptr[esi]
        mov    ebx,dword ptr[esi+4]
        mov    ecx,dword ptr[esi+8]
        mov    dword ptr xxx,eax
        mov    dword ptr xxx+4,ebx
        mov    dword ptr xxx+8,ecx
        mov    dword ptr[edi],eax
        mov    dword ptr[edi+4],ebx
        mov    word ptr[edi+8],cx
        xor    eax,eax
        mov    dword ptr Prog,1
        mov    dword ptr Prog+4,eax
        mov    dword ptr Prog+8,eax
        mov    ebx,1
        invoke    _fmul,lpSin,lpSin,addr xx
        xor    esi,esi
        lp:
        push    esi
        mov    eax,ebx
        inc    eax
        inc    ebx
        inc    ebx
        push    ebx
        mul    ebx
        xor    edi,edi
        mov    ecx,eax
        mov    eax,dword ptr Prog
        mul    ecx
        mov    ebx,eax
        mov    esi,edx
        mov    eax,dword ptr Prog+4
        mul    ecx
        add    esi,eax
        adc    edi,edx
        mov    eax,dword ptr Prog+8
        mul    ecx
        add    edi,eax
        mov    dword ptr Prog,ebx
        mov    dword ptr Prog+4,esi
        mov    dword ptr Prog+8,edi
        pop    ebx
        pop    esi
        lea    edi,Fprog
        invoke    _int2ft,addr Prog,edi
        lea    eax,xxx
        invoke    _fmul,addr xx,eax,eax
        invoke    _fdiv,addr xxx,edi,edi
        test    esi,1
        jz    lp1
        invoke    _fadd,lpResult,edi,lpResult
        jmp    @f
        lp1:
        invoke    _fsub,lpResult,edi,lpResult
        @@:
        inc    esi
        cmp    esi,11
        jne    lp
        ret
_fsin        endp
;=====================================================================================

;-----------------------------------------------------------
;Begin将结果转换为字符串
;-----------------------------------------------------------
bcd        proc     uses ebx edi DataH,DataL,lpbuff
        ;此函数用与于分离64位二进制数,变为小尾方式输出
        mov    eax,DataL
        mov    edx,DataH
        mov    edi,lpbuff
        mov    ecx,10
        @@:
        mov    ebx,eax
        mov    eax,edx
        xor    edx,edx
        div    ecx
        xchg    eax,ebx
        div    ecx
        mov    byte ptr[edi],dl;把分离的数存入缓冲区
        inc    edi
        mov    edx,ebx
        or    ebx,eax
        jnz    @b
        mov    byte ptr[edi],10
        mov    eax,edi
        dec    eax
        ret
bcd        endp

sbcd        proc    uses ebx esi edi DataH,DataL,lpbuff
        ;此函数用于分离64位补码二进制数,变为小尾方式输出,以数10结束
        mov    ebx,DataH
        mov    edi,DataL
        mov    esi,ebx
        test    ebx,ebx
        jns    @f
        not    esi     ;┐
        not    edi     ;├用于把负数变为相反数
        add    edi,1   ;│
        adc    esi,0   ;┘
        @@:
        invoke    bcd,esi,edi,lpbuff
        test    ebx,ebx
        jns    @f
        inc    eax
        mov    byte ptr[eax],'-'-30h
        @@:
        ret
sbcd        endp

sMul        proc    uses ebx esi edi lpLow1,lpLow2,lpbuff,Sign,Vir,Exp
        ;此函数用于把两个小尾方式以数10结束的数串相乘,转为大尾方式的字符串输出,以数0结束
        local    buffer[8]:byte
        local    buffer2[60]:byte
        local    Long2
        local    Long
        local    ws
        mov    edi,lpLow2
        mov    ecx,-1
        mov    al,10
        cld
        repnz    scasb
        mov    ebx,ecx
        neg    ebx
        sub    ebx,2
        mov    Long2,ebx
        mov    edi,lpLow1
        repnz    scasb
        neg    ecx
        sub    ecx,3
        mov    Long,ecx
        add    ecx,2
        lea    edi,buffer2
        xor    eax,eax
        rep    stosb
        ;------------------------------------------
        lea    ebx,[buffer2+2]
        add    ebx,Long
        mov    byte ptr[ebx],10
        mov    esi,lpLow1
        mov    ch,10
        lp:
        mov    cl,byte ptr[esi]
        cmp    cl,10
        je    ex0
        inc    esi
        xor    dx,dx
        mov    edi,lpLow2
        @@:
        mov    al,byte ptr[edi]
        cmp    al,10
        je    @f
        dec    ebx
        inc    edi
        mul    cl
        add    dl,byte ptr[ebx]
        add    al,dl
        aam
        mov    dl,ah
        mov    byte ptr[ebx],al;记录相乘结果
        jmp    @b
        @@:
        dec    ebx
        mov    byte ptr[ebx],dl
        add    ebx,Long2
        jmp    lp
        ex0:
        sub    ebx,Long2
        ;----------------------------------------
        mov    edi,Long
        cmp    byte ptr[ebx],0
        jnz    @f
        inc    ebx
        dec    edi
        @@:
        dec    edi
        add    edi,Exp
        mov    esi,ebx
        mov    dh,-2;'.'-30h
        mov    dl,byte ptr[ebx]
        mov    word ptr[ebx-1],dx
        cmp    Sign,0
        jz    @f
        dec    esi
        mov    byte ptr[ebx-2],-3;'-'-30h
        @@:
        add    ebx,Vir
        mov    byte ptr[ebx],15h;'E'-30h
        ;------------------------------------
        mov    ecx,edi
        sar    ecx,31
        invoke    sbcd,ecx,edi,addr buffer
        lea    ecx,buffer
        @@:
        mov    dl,byte ptr[eax]
        inc    ebx
        mov    byte ptr[ebx],dl
        dec    eax
        cmp    eax,ecx
        jae    @b
        mov    byte ptr[ebx+1],10
        ;------------------------------------
        mov    edi,lpbuff
        dec    esi
        @@:
        mov    dl,byte ptr[esi]
        cmp    dl,10
        je    @f
        add    dl,30h
        mov    byte ptr[edi],dl
        inc    esi
        inc    edi
        jmp    @b
        @@:
        mov    byte ptr[edi],0
        ret
sMul        endp

Integer        proc    uses ebx esi edi lpHigh,lpLow,lpbuff,Vir
        ;此函数用于把正指数转为十进制数串
        local    TemBuff[24]:byte;此缓冲区用于循环存储最新的运算结果,最多保存最高的22位
        mov    byte ptr TemBuff,'#';缓冲区边界标记
        xor    ebx,ebx
        xor    edi,edi
        mov    ch,10
        lp:
        mov    esi,lpHigh
        xor    ah,ah
        xor    cl,cl
        @@:
        mov    al,byte ptr[esi]
        div    ch
        or    cl,al
        mov    byte ptr[esi],al
        dec    esi
        cmp    esi,lpLow
        jae    @b
        or    cl,ah
        jz    @f
        inc    edi
        mov    byte ptr[TemBuff+edi],ah;记录运算结果
        cmp    edi,22
        jne    lp
        xor    edi,edi
        add    ebx,22
        jmp    lp
        @@:
        lea    eax,[ebx+edi];总的十进制位数
        lea    edi,[TemBuff+edi]
        ;---------------------------------------
        mov    ecx,Vir
        cmp    eax,ecx
        ja    @f
        mov    ecx,eax
        @@:
        sub    eax,ecx
        mov    esi,lpbuff
        add    esi,ecx
        mov    byte ptr[esi],10
        lp1:
        mov    dl,byte ptr[edi]
        cmp    dl,'#'
        jne    @f
        add    edi,22
        jmp    lp1
        @@:
        dec    esi
        dec    edi
        mov    byte ptr[esi],dl
        dec    ecx
        jnz    lp1
        ret
Integer        endp

Decimal        proc    uses ebx esi edi lpHigh,lpLow,lpbuff,Vir
        ;此函数用于把负指数转为十进制数串
        local    zcesp
        mov    zcesp,esp
        xor    esp,esp
        xor    ebx,ebx
        mov    edi,lpbuff
        add    edi,Vir
        mov    byte ptr[edi],10
        mov    ch,10
        lp:
        mov    esi,lpLow
        xor    dx,dx
        xor    cl,cl
        @@:
        mov    al,byte ptr[esi]
        mul    ch
        add    ax,dx
        mov    byte ptr[esi],al
        or    cl,al
        mov    dl,ah
        inc    esi
        cmp    esi,lpHigh
        jbe    @b
        or    cl,dl
        jz    @f
        dec    ebx
        test    esp,esp
        jnz    nz
        test    dl,dl
        jz    lp
        mov    esp,Vir
        nz:
        dec    edi
        mov    byte ptr[edi],dl
        dec    esp
        jnz    lp
        @@:
        ;------------------------------
        mov    esi,lpbuff
        cmp    esi,edi
        je    exit
        @@:
        mov    dl,byte ptr[edi]
        mov    byte ptr[esi],dl
        cmp    dl,10
        je    exit
        inc    esi
        inc    edi
        jmp    @b
        exit:
        mov    eax,ebx
        mov    esp,zcesp
        ret
Decimal        endp

IntorDec    proc    jd
        ;此函数用于检测指数的正或负,再决定那种转换
        test    ecx,ecx
        js    @f
        mov    ebx,ecx
        shr    ebx,3
        add    ebx,edi
        mov    eax,1
        rol    al,cl
        mov    byte ptr[ebx],al
        invoke    Integer,ebx,edi,edx,jd
        jmp    lp
        @@:
        neg    ecx
        dec    ecx
        mov    ebx,ecx
        shr    ebx,3
        add    ebx,edi
        mov    eax,80h
        ror    al,cl
        mov    byte ptr[edi],al
        invoke    Decimal,ebx,edi,edx,jd
        lp:
        ret
IntorDec    endp

printfer    proc    uses ebx esi edi DataH,DataM,DataL,lpbuff
        ;扩展精度转换
        local    buffer[4000]:byte
        local    buffer2[24]:byte
        lea    edi,buffer
        xor    eax,eax
        mov    ecx,4000/4
        cld
        rep    stosd
        lea    edi,buffer
        lea    edx,buffer2
        mov    ecx,DataH
        and    ecx,7fffh
        test    ecx,ecx
        jnz    @f
        inc    ecx;这里如果不这样判断,会发现指数为-4932时结果不对了
        @@:
        sub    ecx,403eh;ecx-(2^14-1)-63
        invoke    IntorDec,20
        mov    esi,eax
        invoke    bcd,DataM,DataL,addr buffer
        xor    ebx,ebx
        test    DataH,8000h
        jz    @f
        inc    ebx
        @@:
        invoke    sMul,addr buffer,addr buffer2,lpbuff,ebx,19,esi
        ret
printfer    endp
;---------------------------------------------------------------
;End
;---------------------------------------------------------------

start:
        invoke    _fsin,addr x,addr Res
        invoke    printfer,dword ptr Res+8,dword ptr Res+4,dword ptr Res,addr buff
        invoke    MessageBox,0,addr buff,addr Result,0
        ret
        end    start 
