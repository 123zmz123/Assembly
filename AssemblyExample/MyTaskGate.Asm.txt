
.386
.model flat, stdcall
option casemap:none

include MyTaskGate.inc

.const
CCOUNTED_UNICODE_STRING "\\Device\\MyTaskGate" ,g_usDeviceName,4
CCOUNTED_UNICODE_STRING "\\??\\MyTaskGate",g_usSymbolicLinkName,4
IDT_LIMIT =  800h
GDT_LIMIT  = 03ffh
GATE_TYPE = 0e5h

.data?
myTssSel dw ?
EipValue dd ?     

.code
;MyTaskGateFunction proc
;    cli
;	invoke DbgPrint,$CTA0("MyTaskGate calling...\n")
;	iretd
;MyTaskGateFunction endp
;
;SetMyTssValue proc functionAddr:DWORD
;    LOCAL oldFunction:dword
;	pushfd
;    pushad
;    mov esi,8054A568h
;    assume esi:ptr TSS
;    mov eax,[esi].Eip
;    mov oldFunction,eax
;    push functionAddr
;    pop [esi].Eip 
;    assume esi:nothing
;    popad
;    popfd 
;    mov eax, oldFunction
;	ret
;SetMyTssValue endp


;AddTaskGateInIDT proc
;	push ebx
;	push ecx
;	sidt [esp-2]
;	pop ecx
;	mov eax,0
;	.while eax < IDT_LIMIT
;	     lea edx,[ecx+eax]
;	     assume edx:ptr GATE
;	     test [edx].GTYPE,80h
;	    .if ZERO?
;	       cli
;	       mov bx,myTssSel
;	       mov [edx].OFFSETL,0
;	       mov [edx].SELECTOR,bx
;	       mov [edx].DCOUNT,0
;	       mov [edx].GTYPE,GATE_TYPE
;	       mov [edx].OFFSETH,0   
;	       sti  
;          .break
;	   .endif   
;	    assume edx:nothing
;	   add eax,8
;	.endw
;	pop ebx
;	ret	
;AddTaskGateInIDT endp

AddTaskGateInGDT proc
	push ebx
	push ecx
	sgdt [esp-2]
	pop ecx
	mov eax,8
	.while eax < GDT_LIMIT
	     lea edx,[ecx+eax]
	     assume edx:ptr GATE
	     test [edx].GTYPE,80h
	    .if ZERO?
	       cli
	       mov bx,0a0h
	       mov [edx].OFFSETL,0
	       mov [edx].SELECTOR,bx
	       mov [edx].DCOUNT,0
	       mov [edx].GTYPE,GATE_TYPE
	       mov [edx].OFFSETH,0   
	       sti  
          .break
	   .endif   
	    assume edx:nothing
	   add eax,8
	.endw
	pop ebx
	ret	
AddTaskGateInGDT endp

DriverUnload proc pDriverObject:PDRIVER_OBJECT
	
;	invoke SetMyTssValue,EipValue
	invoke IoDeleteSymbolicLink,addr g_usSymbolicLinkName
	mov eax,pDriverObject
	invoke IoDeleteDevice,(DRIVER_OBJECT PTR[eax]).DeviceObject
	ret

DriverUnload endp

DriverEntry proc pDriverObject:PDRIVER_OBJECT,pusRegistryPath:PUNICODE_STRING

    LOCAL status:NTSTATUS
    LOCAL pDeviceObject:PDEVICE_OBJECT
    
    mov status, STATUS_DEVICE_CONFIGURATION_ERROR
    invoke IoCreateDevice,pDriverObject,0,addr g_usDeviceName,FILE_DEVICE_UNKNOWN,0,FALSE,addr pDeviceObject
    .if eax == STATUS_SUCCESS
    	invoke IoCreateSymbolicLink,addr g_usSymbolicLinkName,addr g_usDeviceName
    	.if eax == STATUS_SUCCESS
    		mov eax,pDriverObject
    		assume eax:ptr DRIVER_OBJECT
    	    mov [eax].DriverUnload,offset DriverUnload
            assume eax:nothing  
            
;            invoke SetMyTssValue,offset MyTaskGateFunction
;            mov EipValue,eax
;            mov myTssSel,058h
            
            invoke AddTaskGateInGDT
            invoke DbgPrint,$CTA0("selector value = %d\n"),eax
            
            mov status,STATUS_SUCCESS
    	.else
    		invoke IoDeleteDevice,pDeviceObject
    	.endif
    .endif
    mov eax,status
    ret

DriverEntry endp

end DriverEntry
